#pragma once
#include "glwpp/gl/api/gl_44.hpp"

namespace glwpp::gl {

bool LoadGl_45(LoadFunc func);

extern void (*BindTextureUnit)(UInt unit, UInt texture);
extern void (*BlitNamedFramebuffer)(UInt readFramebuffer, UInt drawFramebuffer, Int srcX0, Int srcY0, Int srcX1, Int srcY1, Int dstX0, Int dstY0, Int dstX1, Int dstY1, BitField mask, Enum filter);
extern Enum (*CheckNamedFramebufferStatus)(UInt framebuffer, Enum target);
extern void (*ClearNamedBufferData)(UInt buffer, Enum internalformat, Enum format, Enum type, const void * data);
extern void (*ClearNamedBufferSubData)(UInt buffer, Enum internalformat, IntPtr offset, SizeiPtr size, Enum format, Enum type, const void * data);
extern void (*ClearNamedFramebufferfi)(UInt framebuffer, Enum buffer, Int drawbuffer, Float depth, Int stencil);
extern void (*ClearNamedFramebufferfv)(UInt framebuffer, Enum buffer, Int drawbuffer, const Float * value);
extern void (*ClearNamedFramebufferiv)(UInt framebuffer, Enum buffer, Int drawbuffer, const Int * value);
extern void (*ClearNamedFramebufferuiv)(UInt framebuffer, Enum buffer, Int drawbuffer, const UInt * value);
extern void (*ClipControl)(Enum origin, Enum depth);
extern void (*CompressedTextureSubImage1D)(UInt texture, Int level, Int xoffset, Sizei width, Enum format, Sizei imageSize, const void * data);
extern void (*CompressedTextureSubImage2D)(UInt texture, Int level, Int xoffset, Int yoffset, Sizei width, Sizei height, Enum format, Sizei imageSize, const void * data);
extern void (*CompressedTextureSubImage3D)(UInt texture, Int level, Int xoffset, Int yoffset, Int zoffset, Sizei width, Sizei height, Sizei depth, Enum format, Sizei imageSize, const void * data);
extern void (*CopyNamedBufferSubData)(UInt readBuffer, UInt writeBuffer, IntPtr readOffset, IntPtr writeOffset, SizeiPtr size);
extern void (*CopyTextureSubImage1D)(UInt texture, Int level, Int xoffset, Int x, Int y, Sizei width);
extern void (*CopyTextureSubImage2D)(UInt texture, Int level, Int xoffset, Int yoffset, Int x, Int y, Sizei width, Sizei height);
extern void (*CopyTextureSubImage3D)(UInt texture, Int level, Int xoffset, Int yoffset, Int zoffset, Int x, Int y, Sizei width, Sizei height);
extern void (*CreateBuffers)(Sizei n, UInt * buffers);
extern void (*CreateFramebuffers)(Sizei n, UInt * framebuffers);
extern void (*CreateProgramPipelines)(Sizei n, UInt * pipelines);
extern void (*CreateQueries)(Enum target, Sizei n, UInt * ids);
extern void (*CreateRenderbuffers)(Sizei n, UInt * renderbuffers);
extern void (*CreateSamplers)(Sizei n, UInt * samplers);
extern void (*CreateTextures)(Enum target, Sizei n, UInt * textures);
extern void (*CreateTransformFeedbacks)(Sizei n, UInt * ids);
extern void (*CreateVertexArrays)(Sizei n, UInt * arrays);
extern void (*DisableVertexArrayAttrib)(UInt vaobj, UInt index);
extern void (*EnableVertexArrayAttrib)(UInt vaobj, UInt index);
extern void (*FlushMappedNamedBufferRange)(UInt buffer, IntPtr offset, SizeiPtr length);
extern void (*GenerateTextureMipmap)(UInt texture);
extern void (*GetCompressedTextureImage)(UInt texture, Int level, Sizei bufSize, void * pixels);
extern void (*GetCompressedTextureSubImage)(UInt texture, Int level, Int xoffset, Int yoffset, Int zoffset, Sizei width, Sizei height, Sizei depth, Sizei bufSize, void * pixels);
extern Enum (*GetGraphicsResetStatus)();
extern void (*GetNamedBufferParameteri64v)(UInt buffer, Enum pname, GLint64 * params);
extern void (*GetNamedBufferParameteriv)(UInt buffer, Enum pname, Int * params);
extern void (*GetNamedBufferPointerv)(UInt buffer, Enum pname, void ** params);
extern void (*GetNamedBufferSubData)(UInt buffer, IntPtr offset, SizeiPtr size, void * data);
extern void (*GetNamedFramebufferAttachmentParameteriv)(UInt framebuffer, Enum attachment, Enum pname, Int * params);
extern void (*GetNamedFramebufferParameteriv)(UInt framebuffer, Enum pname, Int * param);
extern void (*GetNamedRenderbufferParameteriv)(UInt renderbuffer, Enum pname, Int * params);
extern void (*GetQueryBufferObjecti64v)(UInt id, UInt buffer, Enum pname, IntPtr offset);
extern void (*GetQueryBufferObjectiv)(UInt id, UInt buffer, Enum pname, IntPtr offset);
extern void (*GetQueryBufferObjectui64v)(UInt id, UInt buffer, Enum pname, IntPtr offset);
extern void (*GetQueryBufferObjectuiv)(UInt id, UInt buffer, Enum pname, IntPtr offset);
extern void (*GetTextureImage)(UInt texture, Int level, Enum format, Enum type, Sizei bufSize, void * pixels);
extern void (*GetTextureLevelParameterfv)(UInt texture, Int level, Enum pname, Float * params);
extern void (*GetTextureLevelParameteriv)(UInt texture, Int level, Enum pname, Int * params);
extern void (*GetTextureParameterIiv)(UInt texture, Enum pname, Int * params);
extern void (*GetTextureParameterIuiv)(UInt texture, Enum pname, UInt * params);
extern void (*GetTextureParameterfv)(UInt texture, Enum pname, Float * params);
extern void (*GetTextureParameteriv)(UInt texture, Enum pname, Int * params);
extern void (*GetTextureSubImage)(UInt texture, Int level, Int xoffset, Int yoffset, Int zoffset, Sizei width, Sizei height, Sizei depth, Enum format, Enum type, Sizei bufSize, void * pixels);
extern void (*GetTransformFeedbacki64_v)(UInt xfb, Enum pname, UInt index, GLint64 * param);
extern void (*GetTransformFeedbacki_v)(UInt xfb, Enum pname, UInt index, Int * param);
extern void (*GetTransformFeedbackiv)(UInt xfb, Enum pname, Int * param);
extern void (*GetVertexArrayIndexed64iv)(UInt vaobj, UInt index, Enum pname, GLint64 * param);
extern void (*GetVertexArrayIndexediv)(UInt vaobj, UInt index, Enum pname, Int * param);
extern void (*GetVertexArrayiv)(UInt vaobj, Enum pname, Int * param);
extern void (*GetnCompressedTexImage)(Enum target, Int lod, Sizei bufSize, void * pixels);
extern void (*GetnTexImage)(Enum target, Int level, Enum format, Enum type, Sizei bufSize, void * pixels);
extern void (*GetnUniformdv)(UInt program, Int location, Sizei bufSize, Double * params);
extern void (*GetnUniformfv)(UInt program, Int location, Sizei bufSize, Float * params);
extern void (*GetnUniformiv)(UInt program, Int location, Sizei bufSize, Int * params);
extern void (*GetnUniformuiv)(UInt program, Int location, Sizei bufSize, UInt * params);
extern void (*InvalidateNamedFramebufferData)(UInt framebuffer, Sizei numAttachments, const Enum * attachments);
extern void (*InvalidateNamedFramebufferSubData)(UInt framebuffer, Sizei numAttachments, const Enum * attachments, Int x, Int y, Sizei width, Sizei height);
extern void *(*MapNamedBuffer)(UInt buffer, Enum access);
extern void *(*MapNamedBufferRange)(UInt buffer, IntPtr offset, SizeiPtr length, BitField access);
extern void (*MemoryBarrierByRegion)(BitField barriers);
extern void (*NamedBufferData)(UInt buffer, SizeiPtr size, const void * data, Enum usage);
extern void (*NamedBufferStorage)(UInt buffer, SizeiPtr size, const void * data, BitField flags);
extern void (*NamedBufferSubData)(UInt buffer, IntPtr offset, SizeiPtr size, const void * data);
extern void (*NamedFramebufferDrawBuffer)(UInt framebuffer, Enum buf);
extern void (*NamedFramebufferDrawBuffers)(UInt framebuffer, Sizei n, const Enum * bufs);
extern void (*NamedFramebufferParameteri)(UInt framebuffer, Enum pname, Int param);
extern void (*NamedFramebufferReadBuffer)(UInt framebuffer, Enum src);
extern void (*NamedFramebufferRenderbuffer)(UInt framebuffer, Enum attachment, Enum renderbuffertarget, UInt renderbuffer);
extern void (*NamedFramebufferTexture)(UInt framebuffer, Enum attachment, UInt texture, Int level);
extern void (*NamedFramebufferTextureLayer)(UInt framebuffer, Enum attachment, UInt texture, Int level, Int layer);
extern void (*NamedRenderbufferStorage)(UInt renderbuffer, Enum internalformat, Sizei width, Sizei height);
extern void (*NamedRenderbufferStorageMultisample)(UInt renderbuffer, Sizei samples, Enum internalformat, Sizei width, Sizei height);
extern void (*ReadnPixels)(Int x, Int y, Sizei width, Sizei height, Enum format, Enum type, Sizei bufSize, void * data);
extern void (*TextureBarrier)();
extern void (*TextureBuffer)(UInt texture, Enum internalformat, UInt buffer);
extern void (*TextureBufferRange)(UInt texture, Enum internalformat, UInt buffer, IntPtr offset, SizeiPtr size);
extern void (*TextureParameterIiv)(UInt texture, Enum pname, const Int * params);
extern void (*TextureParameterIuiv)(UInt texture, Enum pname, const UInt * params);
extern void (*TextureParameterf)(UInt texture, Enum pname, Float param);
extern void (*TextureParameterfv)(UInt texture, Enum pname, const Float * param);
extern void (*TextureParameteri)(UInt texture, Enum pname, Int param);
extern void (*TextureParameteriv)(UInt texture, Enum pname, const Int * param);
extern void (*TextureStorage1D)(UInt texture, Sizei levels, Enum internalformat, Sizei width);
extern void (*TextureStorage2D)(UInt texture, Sizei levels, Enum internalformat, Sizei width, Sizei height);
extern void (*TextureStorage2DMultisample)(UInt texture, Sizei samples, Enum internalformat, Sizei width, Sizei height, Bool fixedsamplelocations);
extern void (*TextureStorage3D)(UInt texture, Sizei levels, Enum internalformat, Sizei width, Sizei height, Sizei depth);
extern void (*TextureStorage3DMultisample)(UInt texture, Sizei samples, Enum internalformat, Sizei width, Sizei height, Sizei depth, Bool fixedsamplelocations);
extern void (*TextureSubImage1D)(UInt texture, Int level, Int xoffset, Sizei width, Enum format, Enum type, const void * pixels);
extern void (*TextureSubImage2D)(UInt texture, Int level, Int xoffset, Int yoffset, Sizei width, Sizei height, Enum format, Enum type, const void * pixels);
extern void (*TextureSubImage3D)(UInt texture, Int level, Int xoffset, Int yoffset, Int zoffset, Sizei width, Sizei height, Sizei depth, Enum format, Enum type, const void * pixels);
extern void (*TransformFeedbackBufferBase)(UInt xfb, UInt index, UInt buffer);
extern void (*TransformFeedbackBufferRange)(UInt xfb, UInt index, UInt buffer, IntPtr offset, SizeiPtr size);
extern Bool (*UnmapNamedBuffer)(UInt buffer);
extern void (*VertexArrayAttribBinding)(UInt vaobj, UInt attribindex, UInt bindingindex);
extern void (*VertexArrayAttribFormat)(UInt vaobj, UInt attribindex, Int size, Enum type, Bool normalized, UInt relativeoffset);
extern void (*VertexArrayAttribIFormat)(UInt vaobj, UInt attribindex, Int size, Enum type, UInt relativeoffset);
extern void (*VertexArrayAttribLFormat)(UInt vaobj, UInt attribindex, Int size, Enum type, UInt relativeoffset);
extern void (*VertexArrayBindingDivisor)(UInt vaobj, UInt bindingindex, UInt divisor);
extern void (*VertexArrayElementBuffer)(UInt vaobj, UInt buffer);
extern void (*VertexArrayVertexBuffer)(UInt vaobj, UInt bindingindex, UInt buffer, IntPtr offset, Sizei stride);
extern void (*VertexArrayVertexBuffers)(UInt vaobj, UInt first, Sizei count, const UInt * buffers, const IntPtr * offsets, const Sizei * strides);

}