#pragma once

#include "gl/InterfaceGlInner.hpp"
#include "utils/Export.hpp"

namespace glwpp {

class InterfaceGlOuter : public InterfaceGlInner {
public:
    InterfaceGlOuter(Context* ctx, const std::function<void(const SrcLoc&)> debug);
    ~InterfaceGlOuter();

    EXPORT void ActiveShaderProgram(GLuint pipeline, GLuint program, GLsrc src_loc = SrcLoc{});
    EXPORT void ActiveTexture(GLenum texture, GLsrc src_loc = SrcLoc{});
    EXPORT void AttachShader(GLuint program, GLuint shader, GLsrc src_loc = SrcLoc{});
    EXPORT void BeginConditionalRender(GLuint id, GLenum mode, GLsrc src_loc = SrcLoc{});
    EXPORT void BeginQuery(GLenum target, GLuint id, GLsrc src_loc = SrcLoc{});
    EXPORT void BeginQueryIndexed(GLenum target, GLuint index, GLuint id, GLsrc src_loc = SrcLoc{});
    EXPORT void BeginTransformFeedback(GLenum primitiveMode, GLsrc src_loc = SrcLoc{});
    EXPORT void BindAttribLocation(GLuint program, GLuint index, GLcharArr name, GLsrc src_loc = SrcLoc{});
    EXPORT void BindBuffer(GLenum target, GLuint buffer, GLsrc src_loc = SrcLoc{});
    EXPORT void BindBufferBase(GLenum target, GLuint index, GLuint buffer, GLsrc src_loc = SrcLoc{});
    EXPORT void BindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size, GLsrc src_loc = SrcLoc{});
    EXPORT void BindBuffersBase(GLenum target, GLuint first, GLsizei count, GLuintArr buffers, GLsrc src_loc = SrcLoc{});
    EXPORT void BindBuffersRange(GLenum target, GLuint first, GLsizei count, GLuintArr buffers, GLintptrArr offsets, GLsizeiptrArr sizes, GLsrc src_loc = SrcLoc{});
    EXPORT void BindFragDataLocation(GLuint program, GLuint color, GLcharArr name, GLsrc src_loc = SrcLoc{});
    EXPORT void BindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, GLcharArr name, GLsrc src_loc = SrcLoc{});
    EXPORT void BindFramebuffer(GLenum target, GLuint framebuffer, GLsrc src_loc = SrcLoc{});
    EXPORT void BindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format, GLsrc src_loc = SrcLoc{});
    EXPORT void BindImageTextures(GLuint first, GLsizei count, GLuintArr textures, GLsrc src_loc = SrcLoc{});
    EXPORT void BindProgramPipeline(GLuint pipeline, GLsrc src_loc = SrcLoc{});
    EXPORT void BindRenderbuffer(GLenum target, GLuint renderbuffer, GLsrc src_loc = SrcLoc{});
    EXPORT void BindSampler(GLuint unit, GLuint sampler, GLsrc src_loc = SrcLoc{});
    EXPORT void BindSamplers(GLuint first, GLsizei count, GLuintArr samplers, GLsrc src_loc = SrcLoc{});
    EXPORT void BindTexture(GLenum target, GLuint texture, GLsrc src_loc = SrcLoc{});
    EXPORT void BindTextureUnit(GLuint unit, GLuint texture, GLsrc src_loc = SrcLoc{});
    EXPORT void BindTextures(GLuint first, GLsizei count, GLuintArr textures, GLsrc src_loc = SrcLoc{});
    EXPORT void BindTransformFeedback(GLenum target, GLuint id, GLsrc src_loc = SrcLoc{});
    EXPORT void BindVertexArray(GLuint array, GLsrc src_loc = SrcLoc{});
    EXPORT void BindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride, GLsrc src_loc = SrcLoc{});
    EXPORT void BindVertexBuffers(GLuint first, GLsizei count, GLuintArr buffers, GLintptrArr offsets, GLsizeiArr strides, GLsrc src_loc = SrcLoc{});
    EXPORT void BlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, GLsrc src_loc = SrcLoc{});
    EXPORT void BlendEquation(GLenum mode, GLsrc src_loc = SrcLoc{});
    EXPORT void BlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha, GLsrc src_loc = SrcLoc{});
    EXPORT void BlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha, GLsrc src_loc = SrcLoc{});
    EXPORT void BlendEquationi(GLuint buf, GLenum mode, GLsrc src_loc = SrcLoc{});
    EXPORT void BlendFunc(GLenum sfactor, GLenum dfactor, GLsrc src_loc = SrcLoc{});
    EXPORT void BlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha, GLsrc src_loc = SrcLoc{});
    EXPORT void BlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha, GLenum modeAlpha, GLsrc src_loc = SrcLoc{});
    EXPORT void BlendFunci(GLuint buf, GLenum src, GLenum dst, GLsrc src_loc = SrcLoc{});
    EXPORT void BlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, GLsrc src_loc = SrcLoc{});
    EXPORT void BlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, GLsrc src_loc = SrcLoc{});
    EXPORT void BufferData(GLenum target, GLsizeiptr size, GLdata data, GLenum usage, GLsrc src_loc = SrcLoc{});
    EXPORT void BufferStorage(GLenum target, GLsizeiptr size, GLdata data, GLbitfield flags, GLsrc src_loc = SrcLoc{});
    EXPORT void BufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLdata data, GLsrc src_loc = SrcLoc{});
    EXPORT void CheckFramebufferStatus(GLenum target, GLsrc src_loc = SrcLoc{});
    EXPORT void CheckNamedFramebufferStatus(GLuint framebuffer, GLenum target, GLsrc src_loc = SrcLoc{});
    EXPORT void ClampColor(GLenum target, GLenum clamp, GLsrc src_loc = SrcLoc{});
    EXPORT void Clear(GLbitfield mask, GLsrc src_loc = SrcLoc{});
    EXPORT void ClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, GLdata data, GLsrc src_loc = SrcLoc{});
    EXPORT void ClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, GLdata data, GLsrc src_loc = SrcLoc{});
    EXPORT void ClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil, GLsrc src_loc = SrcLoc{});
    EXPORT void ClearBufferfv(GLenum buffer, GLint drawbuffer, GLfloatArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ClearBufferiv(GLenum buffer, GLint drawbuffer, GLintArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ClearBufferuiv(GLenum buffer, GLint drawbuffer, GLuintArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, GLsrc src_loc = SrcLoc{});
    EXPORT void ClearDepth(GLdouble depth, GLsrc src_loc = SrcLoc{});
    EXPORT void ClearDepthf(GLfloat d, GLsrc src_loc = SrcLoc{});
    EXPORT void ClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, GLdata data, GLsrc src_loc = SrcLoc{});
    EXPORT void ClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, GLdata data, GLsrc src_loc = SrcLoc{});
    EXPORT void ClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil, GLsrc src_loc = SrcLoc{});
    EXPORT void ClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloatArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLintArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLuintArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ClearStencil(GLint s, GLsrc src_loc = SrcLoc{});
    EXPORT void ClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, GLdata data, GLsrc src_loc = SrcLoc{});
    EXPORT void ClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLdata data, GLsrc src_loc = SrcLoc{});
    EXPORT void ClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout, GLsrc src_loc = SrcLoc{});
    EXPORT void ClipControl(GLenum origin, GLenum depth, GLsrc src_loc = SrcLoc{});
    EXPORT void ColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha, GLsrc src_loc = SrcLoc{});
    EXPORT void ColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a, GLsrc src_loc = SrcLoc{});
    EXPORT void CompileShader(GLuint shader, GLsrc src_loc = SrcLoc{});
    EXPORT void CompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, GLdata data, GLsrc src_loc = SrcLoc{});
    EXPORT void CompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, GLdata data, GLsrc src_loc = SrcLoc{});
    EXPORT void CompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, GLdata data, GLsrc src_loc = SrcLoc{});
    EXPORT void CompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, GLdata data, GLsrc src_loc = SrcLoc{});
    EXPORT void CompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, GLdata data, GLsrc src_loc = SrcLoc{});
    EXPORT void CompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, GLdata data, GLsrc src_loc = SrcLoc{});
    EXPORT void CompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, GLdata data, GLsrc src_loc = SrcLoc{});
    EXPORT void CompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, GLdata data, GLsrc src_loc = SrcLoc{});
    EXPORT void CompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, GLdata data, GLsrc src_loc = SrcLoc{});
    EXPORT void CopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, GLsrc src_loc = SrcLoc{});
    EXPORT void CopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth, GLsrc src_loc = SrcLoc{});
    EXPORT void CopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, GLsrc src_loc = SrcLoc{});
    EXPORT void CopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border, GLsrc src_loc = SrcLoc{});
    EXPORT void CopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border, GLsrc src_loc = SrcLoc{});
    EXPORT void CopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width, GLsrc src_loc = SrcLoc{});
    EXPORT void CopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, GLsrc src_loc = SrcLoc{});
    EXPORT void CopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, GLsrc src_loc = SrcLoc{});
    EXPORT void CopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width, GLsrc src_loc = SrcLoc{});
    EXPORT void CopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height, GLsrc src_loc = SrcLoc{});
    EXPORT void CopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height, GLsrc src_loc = SrcLoc{});
    EXPORT void CreateBuffers(GLsizei n, GLuintArr dst, GLsrc src_loc = SrcLoc{});

    EXPORT void CreateFramebuffers(GLsizei n, GLuintArr framebuffers, GLsrc src_loc = SrcLoc{});
    EXPORT GLuintRes CreateProgram(GLsrc src_loc = SrcLoc{});
    EXPORT void CreateProgramPipelines(GLsizei n, GLuintArr pipelines, GLsrc src_loc = SrcLoc{});
    EXPORT void CreateQueries(GLenum target, GLsizei n, GLuintArr ids, GLsrc src_loc = SrcLoc{});
    EXPORT void CreateRenderbuffers(GLsizei n, GLuintArr renderbuffers, GLsrc src_loc = SrcLoc{});
    EXPORT void CreateSamplers(GLsizei n, GLuintArr samplers, GLsrc src_loc = SrcLoc{});
    EXPORT GLuintRes CreateShader(GLenum type, GLsrc src_loc = SrcLoc{});
    EXPORT void CreateTextures(GLenum target, GLsizei n, GLuintArr textures, GLsrc src_loc = SrcLoc{});
    EXPORT void CreateTransformFeedbacks(GLsizei n, GLuintArr ids, GLsrc src_loc = SrcLoc{});
    EXPORT void CreateVertexArrays(GLsizei n, GLuintArr arrays, GLsrc src_loc = SrcLoc{});
    EXPORT void CullFace(GLenum mode, GLsrc src_loc = SrcLoc{});
    EXPORT void DebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, GLuintArr ids, GLboolean enabled, GLsrc src_loc = SrcLoc{});
    EXPORT void DebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, GLcharArr buf, GLsrc src_loc = SrcLoc{});
    EXPORT void DeleteBuffers(GLsizei n, GLuintArr buffers, GLsrc src_loc = SrcLoc{});
    EXPORT void DeleteFramebuffers(GLsizei n, GLuintArr framebuffers, GLsrc src_loc = SrcLoc{});
    EXPORT void DeleteProgram(GLuint program, GLsrc src_loc = SrcLoc{});
    EXPORT void DeleteProgramPipelines(GLsizei n, GLuintArr pipelines, GLsrc src_loc = SrcLoc{});
    EXPORT void DeleteQueries(GLsizei n, GLuintArr ids, GLsrc src_loc = SrcLoc{});
    EXPORT void DeleteRenderbuffers(GLsizei n, GLuintArr renderbuffers, GLsrc src_loc = SrcLoc{});
    EXPORT void DeleteSamplers(GLsizei count, GLuintArr samplers, GLsrc src_loc = SrcLoc{});
    EXPORT void DeleteShader(GLuint shader, GLsrc src_loc = SrcLoc{});
    EXPORT void DeleteSync(GLsync sync, GLsrc src_loc = SrcLoc{});
    EXPORT void DeleteTextures(GLsizei n, GLuintArr textures, GLsrc src_loc = SrcLoc{});
    EXPORT void DeleteTransformFeedbacks(GLsizei n, GLuintArr ids, GLsrc src_loc = SrcLoc{});
    EXPORT void DeleteVertexArrays(GLsizei n, GLuintArr arrays, GLsrc src_loc = SrcLoc{});
    EXPORT void DepthFunc(GLenum func, GLsrc src_loc = SrcLoc{});
    EXPORT void DepthMask(GLboolean flag, GLsrc src_loc = SrcLoc{});
    EXPORT void DepthRange(GLdouble n, GLdouble f, GLsrc src_loc = SrcLoc{});
    EXPORT void DepthRangeArrayv(GLuint first, GLsizei count, GLdoubleArr v, GLsrc src_loc = SrcLoc{});
    EXPORT void DepthRangeIndexed(GLuint index, GLdouble n, GLdouble f, GLsrc src_loc = SrcLoc{});
    EXPORT void DepthRangef(GLfloat n, GLfloat f, GLsrc src_loc = SrcLoc{});
    EXPORT void DetachShader(GLuint program, GLuint shader, GLsrc src_loc = SrcLoc{});
    EXPORT void Disable(GLenum cap, GLsrc src_loc = SrcLoc{});
    EXPORT void DisableVertexArrayAttrib(GLuint vaobj, GLuint index, GLsrc src_loc = SrcLoc{});
    EXPORT void DisableVertexAttribArray(GLuint index, GLsrc src_loc = SrcLoc{});
    EXPORT void Disablei(GLenum target, GLuint index, GLsrc src_loc = SrcLoc{});
    EXPORT void DispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLsrc src_loc = SrcLoc{});
    EXPORT void DispatchComputeIndirect(GLintptr indirect, GLsrc src_loc = SrcLoc{});
    EXPORT void DrawArrays(GLenum mode, GLint first, GLsizei count, GLsrc src_loc = SrcLoc{});
    EXPORT void DrawArraysIndirect(GLenum mode, GLdata indirect, GLsrc src_loc = SrcLoc{});
    EXPORT void DrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLsrc src_loc = SrcLoc{});
    EXPORT void DrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance, GLsrc src_loc = SrcLoc{});
    EXPORT void DrawBuffer(GLenum buf, GLsrc src_loc = SrcLoc{});
    EXPORT void DrawBuffers(GLsizei n, GLenumArr bufs, GLsrc src_loc = SrcLoc{});
    EXPORT void DrawElements(GLenum mode, GLsizei count, GLenum type, GLdata indices, GLsrc src_loc = SrcLoc{});
    EXPORT void DrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, GLdata indices, GLint basevertex, GLsrc src_loc = SrcLoc{});
    EXPORT void DrawElementsIndirect(GLenum mode, GLenum type, GLdata indirect, GLsrc src_loc = SrcLoc{});
    EXPORT void DrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, GLdata indices, GLsizei instancecount, GLsrc src_loc = SrcLoc{});
    EXPORT void DrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, GLdata indices, GLsizei instancecount, GLuint baseinstance, GLsrc src_loc = SrcLoc{});
    EXPORT void DrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, GLdata indices, GLsizei instancecount, GLint basevertex, GLsrc src_loc = SrcLoc{});
    EXPORT void DrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, GLdata indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance, GLsrc src_loc = SrcLoc{});
    EXPORT void DrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, GLdata indices, GLsrc src_loc = SrcLoc{});
    EXPORT void DrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, GLdata indices, GLint basevertex, GLsrc src_loc = SrcLoc{});
    EXPORT void DrawTransformFeedback(GLenum mode, GLuint id, GLsrc src_loc = SrcLoc{});
    EXPORT void DrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount, GLsrc src_loc = SrcLoc{});
    EXPORT void DrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream, GLsrc src_loc = SrcLoc{});
    EXPORT void DrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount, GLsrc src_loc = SrcLoc{});
    EXPORT void Enable(GLenum cap, GLsrc src_loc = SrcLoc{});
    EXPORT void EnableVertexArrayAttrib(GLuint vaobj, GLuint index, GLsrc src_loc = SrcLoc{});
    EXPORT void EnableVertexAttribArray(GLuint index, GLsrc src_loc = SrcLoc{});
    EXPORT void Enablei(GLenum target, GLuint index, GLsrc src_loc = SrcLoc{});
    EXPORT void EndConditionalRender(GLsrc src_loc = SrcLoc{});
    EXPORT void EndQuery(GLenum target, GLsrc src_loc = SrcLoc{});
    EXPORT void EndQueryIndexed(GLenum target, GLuint index, GLsrc src_loc = SrcLoc{});
    EXPORT void EndTransformFeedback(GLsrc src_loc = SrcLoc{});
    EXPORT GLsyncRes FenceSync(GLenum condition, GLbitfield flags, GLsrc src_loc = SrcLoc{});
    EXPORT void Finish(GLsrc src_loc = SrcLoc{});
    EXPORT void Flush(GLsrc src_loc = SrcLoc{});
    EXPORT void FlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLsrc src_loc = SrcLoc{});
    EXPORT void FlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLsrc src_loc = SrcLoc{});
    EXPORT void FramebufferParameteri(GLenum target, GLenum pname, GLint param, GLsrc src_loc = SrcLoc{});
    EXPORT void FramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, GLsrc src_loc = SrcLoc{});
    EXPORT void FramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level, GLsrc src_loc = SrcLoc{});
    EXPORT void FramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsrc src_loc = SrcLoc{});
    EXPORT void FramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLsrc src_loc = SrcLoc{});
    EXPORT void FramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset, GLsrc src_loc = SrcLoc{});
    EXPORT void FramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, GLsrc src_loc = SrcLoc{});
    EXPORT void FrontFace(GLenum mode, GLsrc src_loc = SrcLoc{});
    EXPORT void GenBuffers(GLsizei n, GLuintArr buffers, GLsrc src_loc = SrcLoc{});
    EXPORT void GenFramebuffers(GLsizei n, GLuintArr framebuffers, GLsrc src_loc = SrcLoc{});
    EXPORT void GenProgramPipelines(GLsizei n, GLuintArr pipelines, GLsrc src_loc = SrcLoc{});
    EXPORT void GenQueries(GLsizei n, GLuintArr ids, GLsrc src_loc = SrcLoc{});
    EXPORT void GenRenderbuffers(GLsizei n, GLuintArr renderbuffers, GLsrc src_loc = SrcLoc{});
    EXPORT void GenSamplers(GLsizei count, GLuintArr samplers, GLsrc src_loc = SrcLoc{});
    EXPORT void GenTextures(GLsizei n, GLuintArr textures, GLsrc src_loc = SrcLoc{});
    EXPORT void GenTransformFeedbacks(GLsizei n, GLuintArr ids, GLsrc src_loc = SrcLoc{});
    EXPORT void GenVertexArrays(GLsizei n, GLuintArr arrays, GLsrc src_loc = SrcLoc{});
    EXPORT void GenerateMipmap(GLenum target, GLsrc src_loc = SrcLoc{});
    EXPORT void GenerateTextureMipmap(GLuint texture, GLsrc src_loc = SrcLoc{});
    EXPORT void GetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei length, GLint size, GLenum type, GLcharArr name, GLsrc src_loc = SrcLoc{});
    EXPORT void GetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei length, GLcharArr name, GLsrc src_loc = SrcLoc{});
    EXPORT void GetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei length, GLcharArr name, GLsrc src_loc = SrcLoc{});
    EXPORT void GetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLintArr values, GLsrc src_loc = SrcLoc{});
    EXPORT void GetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei length, GLint size, GLenum type, GLcharArr name, GLsrc src_loc = SrcLoc{});
    EXPORT void GetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei length, GLcharArr uniformBlockName, GLsrc src_loc = SrcLoc{});
    EXPORT void GetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei length, GLcharArr uniformName, GLsrc src_loc = SrcLoc{});
    EXPORT void GetActiveUniformsiv(GLuint program, GLsizei uniformCount, GLuintArr uniformIndices, GLenum pname, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetAttachedShaders(GLuint program, GLsizei maxCount, GLsizeiArr count, GLuintArr shaders, GLsrc src_loc = SrcLoc{});
    EXPORT GLintRes GetAttribLocation(GLuint program, GLcharArr name, GLsrc src_loc = SrcLoc{});
    EXPORT void GetBooleani_v(GLenum target, GLuint index, GLbooleanArr data, GLsrc src_loc = SrcLoc{});
    EXPORT void GetBooleanv(GLenum pname, GLbooleanArr data, GLsrc src_loc = SrcLoc{});
    EXPORT void GetBufferParameteri64v(GLenum target, GLenum pname, GLint64Arr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetBufferParameteriv(GLenum target, GLenum pname, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetBufferPointerv(GLenum target, GLenum pname, GLdataPtr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLdata data, GLsrc src_loc = SrcLoc{});
    EXPORT void GetCompressedTexImage(GLenum target, GLint level, GLdata img, GLsrc src_loc = SrcLoc{});
    EXPORT void GetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, GLdata pixels, GLsrc src_loc = SrcLoc{});
    EXPORT void GetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, GLdata pixels, GLsrc src_loc = SrcLoc{});
    EXPORT GLuintRes GetDebugMessageLog(GLuint count, GLsizei bufSize, GLenumArr sources, GLenumArr types, GLuintArr ids, GLenumArr severities, GLsizei lengths, GLcharArr messageLog, GLsrc src_loc = SrcLoc{});
    EXPORT void GetDoublei_v(GLenum target, GLuint index, GLdoubleArr data, GLsrc src_loc = SrcLoc{});
    EXPORT void GetDoublev(GLenum pname, GLdoubleArr data, GLsrc src_loc = SrcLoc{});
    EXPORT GLenumRes GetError(GLsrc src_loc = SrcLoc{});
    EXPORT void GetFloati_v(GLenum target, GLuint index, GLfloatArr data, GLsrc src_loc = SrcLoc{});
    EXPORT void GetFloatv(GLenum pname, GLfloatArr data, GLsrc src_loc = SrcLoc{});
    EXPORT GLintRes GetFragDataIndex(GLuint program, GLcharArr name, GLsrc src_loc = SrcLoc{});
    EXPORT GLintRes GetFragDataLocation(GLuint program, GLcharArr name, GLsrc src_loc = SrcLoc{});
    EXPORT void GetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetFramebufferParameteriv(GLenum target, GLenum pname, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT GLenumRes GetGraphicsResetStatus(GLsrc src_loc = SrcLoc{});
    EXPORT void GetInteger64i_v(GLenum target, GLuint index, GLint64Arr data, GLsrc src_loc = SrcLoc{});
    EXPORT void GetInteger64v(GLenum pname, GLint64Arr data, GLsrc src_loc = SrcLoc{});
    EXPORT void GetIntegeri_v(GLenum target, GLuint index, GLintArr data, GLsrc src_loc = SrcLoc{});
    EXPORT void GetIntegerv(GLenum pname, GLintArr data, GLsrc src_loc = SrcLoc{});
    EXPORT void GetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64Arr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetMultisamplefv(GLenum pname, GLuint index, GLfloatArr val, GLsrc src_loc = SrcLoc{});
    EXPORT void GetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64Arr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetNamedBufferPointerv(GLuint buffer, GLenum pname, GLdataPtr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, GLdata data, GLsrc src_loc = SrcLoc{});
    EXPORT void GetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLintArr param, GLsrc src_loc = SrcLoc{});
    EXPORT void GetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei length, GLcharArr label, GLsrc src_loc = SrcLoc{});
    EXPORT void GetObjectPtrLabel(GLdata ptr, GLsizei bufSize, GLsizei length, GLcharArr label, GLsrc src_loc = SrcLoc{});
    EXPORT void GetPointerv(GLenum pname, GLdataPtr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetProgramBinary(GLuint program, GLsizei bufSize, GLsizei length, GLenumArr binaryFormat, GLdata binary, GLsrc src_loc = SrcLoc{});
    EXPORT void GetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei length, GLcharArr infoLog, GLsrc src_loc = SrcLoc{});
    EXPORT void GetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei length, GLcharArr infoLog, GLsrc src_loc = SrcLoc{});
    EXPORT void GetProgramPipelineiv(GLuint pipeline, GLenum pname, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT GLuintRes GetProgramResourceIndex(GLuint program, GLenum programInterface, GLcharArr name, GLsrc src_loc = SrcLoc{});
    EXPORT GLintRes GetProgramResourceLocation(GLuint program, GLenum programInterface, GLcharArr name, GLsrc src_loc = SrcLoc{});
    EXPORT GLintRes GetProgramResourceLocationIndex(GLuint program, GLenum programInterface, GLcharArr name, GLsrc src_loc = SrcLoc{});
    EXPORT void GetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei length, GLcharArr name, GLsrc src_loc = SrcLoc{});
    EXPORT void GetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, GLenumArr props, GLsizei count, GLsizei length, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLintArr values, GLsrc src_loc = SrcLoc{});
    EXPORT void GetProgramiv(GLuint program, GLenum pname, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset, GLsrc src_loc = SrcLoc{});
    EXPORT void GetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset, GLsrc src_loc = SrcLoc{});
    EXPORT void GetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset, GLsrc src_loc = SrcLoc{});
    EXPORT void GetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset, GLsrc src_loc = SrcLoc{});
    EXPORT void GetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetQueryObjecti64v(GLuint id, GLenum pname, GLint64Arr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetQueryObjectiv(GLuint id, GLenum pname, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetQueryObjectui64v(GLuint id, GLenum pname, GLuint64Arr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetQueryObjectuiv(GLuint id, GLenum pname, GLuintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetQueryiv(GLenum target, GLenum pname, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetRenderbufferParameteriv(GLenum target, GLenum pname, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetSamplerParameterIiv(GLuint sampler, GLenum pname, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloatArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetSamplerParameteriv(GLuint sampler, GLenum pname, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei length, GLcharArr infoLog, GLsrc src_loc = SrcLoc{});
    EXPORT void GetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLintArr range, GLintArr precision, GLsrc src_loc = SrcLoc{});
    EXPORT void GetShaderSource(GLuint shader, GLsizei bufSize, GLsizei length, GLcharArr source, GLsrc src_loc = SrcLoc{});
    EXPORT void GetShaderiv(GLuint shader, GLenum pname, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT GLubyteArrRes GetString(GLenum name, GLsrc src_loc = SrcLoc{});
    EXPORT GLubyteArrRes GetStringi(GLenum name, GLuint index, GLsrc src_loc = SrcLoc{});
    EXPORT GLuintRes GetSubroutineIndex(GLuint program, GLenum shadertype, GLcharArr name, GLsrc src_loc = SrcLoc{});
    EXPORT GLintRes GetSubroutineUniformLocation(GLuint program, GLenum shadertype, GLcharArr name, GLsrc src_loc = SrcLoc{});
    EXPORT void GetSynciv(GLsync sync, GLenum pname, GLsizei count, GLsizei length, GLintArr values, GLsrc src_loc = SrcLoc{});
    EXPORT void GetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLdata pixels, GLsrc src_loc = SrcLoc{});
    EXPORT void GetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloatArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetTexParameterIiv(GLenum target, GLenum pname, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetTexParameterIuiv(GLenum target, GLenum pname, GLuintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetTexParameterfv(GLenum target, GLenum pname, GLfloatArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetTexParameteriv(GLenum target, GLenum pname, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLdata pixels, GLsrc src_loc = SrcLoc{});
    EXPORT void GetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloatArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetTextureParameterIiv(GLuint texture, GLenum pname, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetTextureParameterIuiv(GLuint texture, GLenum pname, GLuintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetTextureParameterfv(GLuint texture, GLenum pname, GLfloatArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetTextureParameteriv(GLuint texture, GLenum pname, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, GLdata pixels, GLsrc src_loc = SrcLoc{});
    EXPORT void GetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei length, GLsizeiArr size, GLenumArr type, GLcharArr name, GLsrc src_loc = SrcLoc{});
    EXPORT void GetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64Arr param, GLsrc src_loc = SrcLoc{});
    EXPORT void GetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLintArr param, GLsrc src_loc = SrcLoc{});
    EXPORT void GetTransformFeedbackiv(GLuint xfb, GLenum pname, GLintArr param, GLsrc src_loc = SrcLoc{});
    EXPORT GLuintRes GetUniformBlockIndex(GLuint program, GLcharArr uniformBlockName, GLsrc src_loc = SrcLoc{});
    EXPORT GLintRes GetUniformLocation(GLuint program, GLcharArr name, GLsrc src_loc = SrcLoc{});
    EXPORT void GetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetUniformdv(GLuint program, GLint location, GLdoubleArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetUniformfv(GLuint program, GLint location, GLfloatArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetUniformiv(GLuint program, GLint location, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetUniformuiv(GLuint program, GLint location, GLuintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64Arr param, GLsrc src_loc = SrcLoc{});
    EXPORT void GetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLintArr param, GLsrc src_loc = SrcLoc{});
    EXPORT void GetVertexArrayiv(GLuint vaobj, GLenum pname, GLintArr param, GLsrc src_loc = SrcLoc{});
    EXPORT void GetVertexAttribIiv(GLuint index, GLenum pname, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetVertexAttribIuiv(GLuint index, GLenum pname, GLuintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetVertexAttribLdv(GLuint index, GLenum pname, GLdoubleArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetVertexAttribPointerv(GLuint index, GLenum pname, GLdataPtr pointer, GLsrc src_loc = SrcLoc{});
    EXPORT void GetVertexAttribdv(GLuint index, GLenum pname, GLdoubleArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetVertexAttribfv(GLuint index, GLenum pname, GLfloatArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetVertexAttribiv(GLuint index, GLenum pname, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, GLdata pixels, GLsrc src_loc = SrcLoc{});
    EXPORT void GetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLdata pixels, GLsrc src_loc = SrcLoc{});
    EXPORT void GetnUniformdv(GLuint program, GLint location, GLsizei bufSize, GLdoubleArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloatArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void GetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void Hint(GLenum target, GLenum mode, GLsrc src_loc = SrcLoc{});
    EXPORT void InvalidateBufferData(GLuint buffer, GLsrc src_loc = SrcLoc{});
    EXPORT void InvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length, GLsrc src_loc = SrcLoc{});
    EXPORT void InvalidateFramebuffer(GLenum target, GLsizei numAttachments, GLenumArr attachments, GLsrc src_loc = SrcLoc{});
    EXPORT void InvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, GLenumArr attachments, GLsrc src_loc = SrcLoc{});
    EXPORT void InvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, GLenumArr attachments, GLint x, GLint y, GLsizei width, GLsizei height, GLsrc src_loc = SrcLoc{});
    EXPORT void InvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, GLenumArr attachments, GLint x, GLint y, GLsizei width, GLsizei height, GLsrc src_loc = SrcLoc{});
    EXPORT void InvalidateTexImage(GLuint texture, GLint level, GLsrc src_loc = SrcLoc{});
    EXPORT void InvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsrc src_loc = SrcLoc{});
    EXPORT GLbooleanRes IsBuffer(GLuint buffer, GLsrc src_loc = SrcLoc{});
    EXPORT GLbooleanRes IsEnabled(GLenum cap, GLsrc src_loc = SrcLoc{});
    EXPORT GLbooleanRes IsEnabledi(GLenum target, GLuint index, GLsrc src_loc = SrcLoc{});
    EXPORT GLbooleanRes IsFramebuffer(GLuint framebuffer, GLsrc src_loc = SrcLoc{});
    EXPORT GLbooleanRes IsProgram(GLuint program, GLsrc src_loc = SrcLoc{});
    EXPORT GLbooleanRes IsProgramPipeline(GLuint pipeline, GLsrc src_loc = SrcLoc{});
    EXPORT GLbooleanRes IsQuery(GLuint id, GLsrc src_loc = SrcLoc{});
    EXPORT GLbooleanRes IsRenderbuffer(GLuint renderbuffer, GLsrc src_loc = SrcLoc{});
    EXPORT GLbooleanRes IsSampler(GLuint sampler, GLsrc src_loc = SrcLoc{});
    EXPORT GLbooleanRes IsShader(GLuint shader, GLsrc src_loc = SrcLoc{});
    EXPORT GLbooleanRes IsSync(GLsync sync, GLsrc src_loc = SrcLoc{});
    EXPORT GLbooleanRes IsTexture(GLuint texture, GLsrc src_loc = SrcLoc{});
    EXPORT GLbooleanRes IsTransformFeedback(GLuint id, GLsrc src_loc = SrcLoc{});
    EXPORT GLbooleanRes IsVertexArray(GLuint array, GLsrc src_loc = SrcLoc{});
    EXPORT void LineWidth(GLfloat width, GLsrc src_loc = SrcLoc{});
    EXPORT void LinkProgram(GLuint program, GLsrc src_loc = SrcLoc{});
    EXPORT void LogicOp(GLenum opcode, GLsrc src_loc = SrcLoc{});
    EXPORT void MemoryBarrier(GLbitfield barriers, GLsrc src_loc = SrcLoc{});
    EXPORT void MemoryBarrierByRegion(GLbitfield barriers, GLsrc src_loc = SrcLoc{});
    EXPORT void MinSampleShading(GLfloat value, GLsrc src_loc = SrcLoc{});
    EXPORT void MultiDrawArrays(GLenum mode, GLintArr first, GLsizeiArr count, GLsizei drawcount, GLsrc src_loc = SrcLoc{});
    EXPORT void MultiDrawArraysIndirect(GLenum mode, GLdata indirect, GLsizei drawcount, GLsizei stride, GLsrc src_loc = SrcLoc{});
    EXPORT void MultiDrawArraysIndirectCount(GLenum mode, GLdata indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride, GLsrc src_loc = SrcLoc{});
    EXPORT void MultiDrawElements(GLenum mode, GLsizeiArr count, GLenum type, GLdataPtr indices, GLsizei drawcount, GLsrc src_loc = SrcLoc{});
    EXPORT void MultiDrawElementsBaseVertex(GLenum mode, GLsizeiArr count, GLenum type, GLdataPtr indices, GLsizei drawcount, GLintArr basevertex, GLsrc src_loc = SrcLoc{});
    EXPORT void MultiDrawElementsIndirect(GLenum mode, GLenum type, GLdata indirect, GLsizei drawcount, GLsizei stride, GLsrc src_loc = SrcLoc{});
    EXPORT void MultiDrawElementsIndirectCount(GLenum mode, GLenum type, GLdata indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride, GLsrc src_loc = SrcLoc{});
    EXPORT void NamedBufferData(GLuint buffer, GLsizeiptr size, GLdata data, GLenum usage, GLsrc src_loc = SrcLoc{});
    EXPORT void NamedBufferStorage(GLuint buffer, GLsizeiptr size, GLdata data, GLbitfield flags, GLsrc src_loc = SrcLoc{});
    EXPORT void NamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, GLdata data, GLsrc src_loc = SrcLoc{});
    EXPORT void NamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf, GLsrc src_loc = SrcLoc{});
    EXPORT void NamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, GLenumArr bufs, GLsrc src_loc = SrcLoc{});
    EXPORT void NamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param, GLsrc src_loc = SrcLoc{});
    EXPORT void NamedFramebufferReadBuffer(GLuint framebuffer, GLenum src, GLsrc src_loc = SrcLoc{});
    EXPORT void NamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, GLsrc src_loc = SrcLoc{});
    EXPORT void NamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLsrc src_loc = SrcLoc{});
    EXPORT void NamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer, GLsrc src_loc = SrcLoc{});
    EXPORT void NamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height, GLsrc src_loc = SrcLoc{});
    EXPORT void NamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsrc src_loc = SrcLoc{});
    EXPORT void ObjectLabel(GLenum identifier, GLuint name, GLsizei length, GLcharArr label, GLsrc src_loc = SrcLoc{});
    EXPORT void ObjectPtrLabel(GLdata ptr, GLsizei length, GLcharArr label, GLsrc src_loc = SrcLoc{});
    EXPORT void PatchParameterfv(GLenum pname, GLfloatArr values, GLsrc src_loc = SrcLoc{});
    EXPORT void PatchParameteri(GLenum pname, GLint value, GLsrc src_loc = SrcLoc{});
    EXPORT void PauseTransformFeedback(GLsrc src_loc = SrcLoc{});
    EXPORT void PixelStoref(GLenum pname, GLfloat param, GLsrc src_loc = SrcLoc{});
    EXPORT void PixelStorei(GLenum pname, GLint param, GLsrc src_loc = SrcLoc{});
    EXPORT void PointParameterf(GLenum pname, GLfloat param, GLsrc src_loc = SrcLoc{});
    EXPORT void PointParameterfv(GLenum pname, GLfloatArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void PointParameteri(GLenum pname, GLint param, GLsrc src_loc = SrcLoc{});
    EXPORT void PointParameteriv(GLenum pname, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void PointSize(GLfloat size, GLsrc src_loc = SrcLoc{});
    EXPORT void PolygonMode(GLenum face, GLenum mode, GLsrc src_loc = SrcLoc{});
    EXPORT void PolygonOffset(GLfloat factor, GLfloat units, GLsrc src_loc = SrcLoc{});
    EXPORT void PolygonOffsetClamp(GLfloat factor, GLfloat units, GLfloat clamp, GLsrc src_loc = SrcLoc{});
    EXPORT void PopDebugGroup(GLsrc src_loc = SrcLoc{});
    EXPORT void PrimitiveRestartIndex(GLuint index, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramBinary(GLuint program, GLenum binaryFormat, GLdata binary, GLsizei length, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramParameteri(GLuint program, GLenum pname, GLint value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform1d(GLuint program, GLint location, GLdouble v0, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform1dv(GLuint program, GLint location, GLsizei count, GLdoubleArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform1f(GLuint program, GLint location, GLfloat v0, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform1fv(GLuint program, GLint location, GLsizei count, GLfloatArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform1i(GLuint program, GLint location, GLint v0, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform1iv(GLuint program, GLint location, GLsizei count, GLintArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform1ui(GLuint program, GLint location, GLuint v0, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform1uiv(GLuint program, GLint location, GLsizei count, GLuintArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform2dv(GLuint program, GLint location, GLsizei count, GLdoubleArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform2fv(GLuint program, GLint location, GLsizei count, GLfloatArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform2iv(GLuint program, GLint location, GLsizei count, GLintArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform2uiv(GLuint program, GLint location, GLsizei count, GLuintArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform3dv(GLuint program, GLint location, GLsizei count, GLdoubleArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform3fv(GLuint program, GLint location, GLsizei count, GLfloatArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform3iv(GLuint program, GLint location, GLsizei count, GLintArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform3uiv(GLuint program, GLint location, GLsizei count, GLuintArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform4dv(GLuint program, GLint location, GLsizei count, GLdoubleArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform4fv(GLuint program, GLint location, GLsizei count, GLfloatArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform4iv(GLuint program, GLint location, GLsizei count, GLintArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniform4uiv(GLuint program, GLint location, GLsizei count, GLuintArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdoubleArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloatArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdoubleArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloatArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdoubleArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloatArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdoubleArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloatArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdoubleArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloatArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdoubleArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloatArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdoubleArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloatArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdoubleArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloatArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLdoubleArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, GLfloatArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void ProvokingVertex(GLenum mode, GLsrc src_loc = SrcLoc{});
    EXPORT void PushDebugGroup(GLenum source, GLuint id, GLsizei length, GLcharArr message, GLsrc src_loc = SrcLoc{});
    EXPORT void QueryCounter(GLuint id, GLenum target, GLsrc src_loc = SrcLoc{});
    EXPORT void ReadBuffer(GLenum src, GLsrc src_loc = SrcLoc{});
    EXPORT void ReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLdata pixels, GLsrc src_loc = SrcLoc{});
    EXPORT void ReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLdata data, GLsrc src_loc = SrcLoc{});
    EXPORT void ReleaseShaderCompiler(GLsrc src_loc = SrcLoc{});
    EXPORT void RenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLsrc src_loc = SrcLoc{});
    EXPORT void RenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsrc src_loc = SrcLoc{});
    EXPORT void ResumeTransformFeedback(GLsrc src_loc = SrcLoc{});
    EXPORT void SampleCoverage(GLfloat value, GLboolean invert, GLsrc src_loc = SrcLoc{});
    EXPORT void SampleMaski(GLuint maskNumber, GLbitfield mask, GLsrc src_loc = SrcLoc{});
    EXPORT void SamplerParameterIiv(GLuint sampler, GLenum pname, GLintArr param, GLsrc src_loc = SrcLoc{});
    EXPORT void SamplerParameterIuiv(GLuint sampler, GLenum pname, GLuintArr param, GLsrc src_loc = SrcLoc{});
    EXPORT void SamplerParameterf(GLuint sampler, GLenum pname, GLfloat param, GLsrc src_loc = SrcLoc{});
    EXPORT void SamplerParameterfv(GLuint sampler, GLenum pname, GLfloatArr param, GLsrc src_loc = SrcLoc{});
    EXPORT void SamplerParameteri(GLuint sampler, GLenum pname, GLint param, GLsrc src_loc = SrcLoc{});
    EXPORT void SamplerParameteriv(GLuint sampler, GLenum pname, GLintArr param, GLsrc src_loc = SrcLoc{});
    EXPORT void Scissor(GLint x, GLint y, GLsizei width, GLsizei height, GLsrc src_loc = SrcLoc{});
    EXPORT void ScissorArrayv(GLuint first, GLsizei count, GLintArr v, GLsrc src_loc = SrcLoc{});
    EXPORT void ScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height, GLsrc src_loc = SrcLoc{});
    EXPORT void ScissorIndexedv(GLuint index, GLintArr v, GLsrc src_loc = SrcLoc{});
    EXPORT void ShaderBinary(GLsizei count, GLuintArr shaders, GLenum binaryFormat, GLdata binary, GLsizei length, GLsrc src_loc = SrcLoc{});
    EXPORT void ShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding, GLsrc src_loc = SrcLoc{});
    EXPORT void SpecializeShader(GLuint shader, GLcharArr pEntryPoint, GLuint numSpecializationConstants, GLuintArr pConstantIndex, GLuintArr pConstantValue, GLsrc src_loc = SrcLoc{});
    EXPORT void StencilFunc(GLenum func, GLint ref, GLuint mask, GLsrc src_loc = SrcLoc{});
    EXPORT void StencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask, GLsrc src_loc = SrcLoc{});
    EXPORT void StencilMask(GLuint mask, GLsrc src_loc = SrcLoc{});
    EXPORT void StencilMaskSeparate(GLenum face, GLuint mask, GLsrc src_loc = SrcLoc{});
    EXPORT void StencilOp(GLenum fail, GLenum zfail, GLenum zpass, GLsrc src_loc = SrcLoc{});
    EXPORT void StencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass, GLsrc src_loc = SrcLoc{});
    EXPORT void TexBuffer(GLenum target, GLenum internalformat, GLuint buffer, GLsrc src_loc = SrcLoc{});
    EXPORT void TexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size, GLsrc src_loc = SrcLoc{});
    EXPORT void TexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, GLdata pixels, GLsrc src_loc = SrcLoc{});
    EXPORT void TexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, GLdata pixels, GLsrc src_loc = SrcLoc{});
    EXPORT void TexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations, GLsrc src_loc = SrcLoc{});
    EXPORT void TexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, GLdata pixels, GLsrc src_loc = SrcLoc{});
    EXPORT void TexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, GLsrc src_loc = SrcLoc{});
    EXPORT void TexParameterIiv(GLenum target, GLenum pname, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void TexParameterIuiv(GLenum target, GLenum pname, GLuintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void TexParameterf(GLenum target, GLenum pname, GLfloat param, GLsrc src_loc = SrcLoc{});
    EXPORT void TexParameterfv(GLenum target, GLenum pname, GLfloatArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void TexParameteri(GLenum target, GLenum pname, GLint param, GLsrc src_loc = SrcLoc{});
    EXPORT void TexParameteriv(GLenum target, GLenum pname, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void TexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsrc src_loc = SrcLoc{});
    EXPORT void TexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsrc src_loc = SrcLoc{});
    EXPORT void TexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations, GLsrc src_loc = SrcLoc{});
    EXPORT void TexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsrc src_loc = SrcLoc{});
    EXPORT void TexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, GLsrc src_loc = SrcLoc{});
    EXPORT void TexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, GLdata pixels, GLsrc src_loc = SrcLoc{});
    EXPORT void TexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, GLdata pixels, GLsrc src_loc = SrcLoc{});
    EXPORT void TexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLdata pixels, GLsrc src_loc = SrcLoc{});
    EXPORT void TextureBarrier(GLsrc src_loc = SrcLoc{});
    EXPORT void TextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer, GLsrc src_loc = SrcLoc{});
    EXPORT void TextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size, GLsrc src_loc = SrcLoc{});
    EXPORT void TextureParameterIiv(GLuint texture, GLenum pname, GLintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void TextureParameterIuiv(GLuint texture, GLenum pname, GLuintArr params, GLsrc src_loc = SrcLoc{});
    EXPORT void TextureParameterf(GLuint texture, GLenum pname, GLfloat param, GLsrc src_loc = SrcLoc{});
    EXPORT void TextureParameterfv(GLuint texture, GLenum pname, GLfloatArr param, GLsrc src_loc = SrcLoc{});
    EXPORT void TextureParameteri(GLuint texture, GLenum pname, GLint param, GLsrc src_loc = SrcLoc{});
    EXPORT void TextureParameteriv(GLuint texture, GLenum pname, GLintArr param, GLsrc src_loc = SrcLoc{});
    EXPORT void TextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsrc src_loc = SrcLoc{});
    EXPORT void TextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsrc src_loc = SrcLoc{});
    EXPORT void TextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations, GLsrc src_loc = SrcLoc{});
    EXPORT void TextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsrc src_loc = SrcLoc{});
    EXPORT void TextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations, GLsrc src_loc = SrcLoc{});
    EXPORT void TextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, GLdata pixels, GLsrc src_loc = SrcLoc{});
    EXPORT void TextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, GLdata pixels, GLsrc src_loc = SrcLoc{});
    EXPORT void TextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLdata pixels, GLsrc src_loc = SrcLoc{});
    EXPORT void TextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers, GLsrc src_loc = SrcLoc{});
    EXPORT void TransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer, GLsrc src_loc = SrcLoc{});
    EXPORT void TransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform1d(GLint location, GLdouble x, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform1dv(GLint location, GLsizei count, GLdoubleArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform1f(GLint location, GLfloat v0, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform1fv(GLint location, GLsizei count, GLfloatArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform1i(GLint location, GLint v0, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform1iv(GLint location, GLsizei count, GLintArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform1ui(GLint location, GLuint v0, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform1uiv(GLint location, GLsizei count, GLuintArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform2d(GLint location, GLdouble x, GLdouble y, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform2dv(GLint location, GLsizei count, GLdoubleArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform2f(GLint location, GLfloat v0, GLfloat v1, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform2fv(GLint location, GLsizei count, GLfloatArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform2i(GLint location, GLint v0, GLint v1, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform2iv(GLint location, GLsizei count, GLintArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform2ui(GLint location, GLuint v0, GLuint v1, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform2uiv(GLint location, GLsizei count, GLuintArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform3dv(GLint location, GLsizei count, GLdoubleArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform3fv(GLint location, GLsizei count, GLfloatArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform3i(GLint location, GLint v0, GLint v1, GLint v2, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform3iv(GLint location, GLsizei count, GLintArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform3uiv(GLint location, GLsizei count, GLuintArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform4dv(GLint location, GLsizei count, GLdoubleArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform4fv(GLint location, GLsizei count, GLfloatArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform4iv(GLint location, GLsizei count, GLintArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, GLsrc src_loc = SrcLoc{});
    EXPORT void Uniform4uiv(GLint location, GLsizei count, GLuintArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void UniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding, GLsrc src_loc = SrcLoc{});
    EXPORT void UniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, GLdoubleArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void UniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, GLfloatArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void UniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, GLdoubleArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void UniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, GLfloatArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void UniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, GLdoubleArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void UniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, GLfloatArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void UniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, GLdoubleArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void UniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, GLfloatArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void UniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, GLdoubleArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void UniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, GLfloatArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void UniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, GLdoubleArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void UniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, GLfloatArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void UniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, GLdoubleArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void UniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, GLfloatArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void UniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, GLdoubleArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void UniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, GLfloatArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void UniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, GLdoubleArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void UniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, GLfloatArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void UniformSubroutinesuiv(GLenum shadertype, GLsizei count, GLuintArr indices, GLsrc src_loc = SrcLoc{});
    EXPORT GLbooleanRes UnmapBuffer(GLenum target, GLsrc src_loc = SrcLoc{});
    EXPORT GLbooleanRes UnmapNamedBuffer(GLuint buffer, GLsrc src_loc = SrcLoc{});
    EXPORT void UseProgram(GLuint program, GLsrc src_loc = SrcLoc{});
    EXPORT void UseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program, GLsrc src_loc = SrcLoc{});
    EXPORT void ValidateProgram(GLuint program, GLsrc src_loc = SrcLoc{});
    EXPORT void ValidateProgramPipeline(GLuint pipeline, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexArrayElementBuffer(GLuint vaobj, GLuint buffer, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, GLuintArr buffers, GLintptrArr offsets, GLsizeiArr strides, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib1d(GLuint index, GLdouble x, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib1dv(GLuint index, GLdoubleArr v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib1f(GLuint index, GLfloat x, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib1fv(GLuint index, GLfloatArr v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib1s(GLuint index, GLshort x, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib1sv(GLuint index, GLshort v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib2d(GLuint index, GLdouble x, GLdouble y, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib2dv(GLuint index, GLdoubleArr v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib2f(GLuint index, GLfloat x, GLfloat y, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib2fv(GLuint index, GLfloatArr v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib2s(GLuint index, GLshort x, GLshort y, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib2sv(GLuint index, GLshort v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib3dv(GLuint index, GLdoubleArr v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib3fv(GLuint index, GLfloatArr v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib3sv(GLuint index, GLshort v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4Nbv(GLuint index, GLbyte v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4Niv(GLuint index, GLintArr v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4Nsv(GLuint index, GLshort v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4Nubv(GLuint index, GLubyte v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4Nuiv(GLuint index, GLuintArr v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4Nusv(GLuint index, GLushort v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4bv(GLuint index, GLbyte v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4dv(GLuint index, GLdoubleArr v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4fv(GLuint index, GLfloatArr v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4iv(GLuint index, GLintArr v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4sv(GLuint index, GLshort v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4ubv(GLuint index, GLubyte v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4uiv(GLuint index, GLuintArr v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4usv(GLuint index, GLushort v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribBinding(GLuint attribindex, GLuint bindingindex, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribDivisor(GLuint index, GLuint divisor, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribI1i(GLuint index, GLint x, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribI1iv(GLuint index, GLintArr v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribI1ui(GLuint index, GLuint x, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribI1uiv(GLuint index, GLuintArr v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribI2i(GLuint index, GLint x, GLint y, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribI2iv(GLuint index, GLintArr v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribI2ui(GLuint index, GLuint x, GLuint y, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribI2uiv(GLuint index, GLuintArr v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribI3i(GLuint index, GLint x, GLint y, GLint z, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribI3iv(GLuint index, GLintArr v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribI3uiv(GLuint index, GLuintArr v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribI4bv(GLuint index, GLbyte v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribI4iv(GLuint index, GLintArr v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribI4sv(GLuint index, GLshort v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribI4ubv(GLuint index, GLubyte v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribI4uiv(GLuint index, GLuintArr v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribI4usv(GLuint index, GLushort v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, GLdata pointer, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribL1d(GLuint index, GLdouble x, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribL1dv(GLuint index, GLdoubleArr v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribL2d(GLuint index, GLdouble x, GLdouble y, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribL2dv(GLuint index, GLdoubleArr v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribL3dv(GLuint index, GLdoubleArr v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribL4dv(GLuint index, GLdoubleArr v, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, GLdata pointer, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, GLuintArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, GLuintArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, GLuintArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, GLuintArr value, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLdata pointer, GLsrc src_loc = SrcLoc{});
    EXPORT void VertexBindingDivisor(GLuint bindingindex, GLuint divisor, GLsrc src_loc = SrcLoc{});
    EXPORT void Viewport(GLint x, GLint y, GLsizei width, GLsizei height, GLsrc src_loc = SrcLoc{});
    EXPORT void ViewportArrayv(GLuint first, GLsizei count, GLfloatArr v, GLsrc src_loc = SrcLoc{});
    EXPORT void ViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h, GLsrc src_loc = SrcLoc{});
    EXPORT void ViewportIndexedfv(GLuint index, GLfloatArr v, GLsrc src_loc = SrcLoc{});
    EXPORT void WaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout, GLsrc src_loc = SrcLoc{});


    // EXPORT GLuintRes CreateShaderProgramv(GLenum type, GLsizei count, GLchar *const* strings, GLsrc src_loc = SrcLoc{});
    // EXPORT void DebugMessageCallback(GLDEBUGPROC callback, GLdata userParam, GLsrc src_loc = SrcLoc{});
    // EXPORT void GetUniformIndices(GLuint program, GLsizei uniformCount, GLchar *const* uniformNames, GLuintArr uniformIndices, GLsrc src_loc = SrcLoc{});
    // EXPORT void ShaderSource(GLuint shader, GLsizei count, GLchar *const* string, GLintArr length, GLsrc src_loc = SrcLoc{});
    // EXPORT void TransformFeedbackVaryings(GLuint program, GLsizei count, GLchar *const* varyings, GLenum bufferMode, GLsrc src_loc = SrcLoc{});
    // EXPORT void* MapBuffer(GLenum target, GLenum access, GLsrc src_loc = SrcLoc{});
    // EXPORT void* MapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access, GLsrc src_loc = SrcLoc{});
    // EXPORT void* MapNamedBuffer(GLuint buffer, GLenum access, GLsrc src_loc = SrcLoc{});
    // EXPORT void* MapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access, GLsrc src_loc = SrcLoc{});
private:
    template<auto F, typename ... Args>
    auto _call(Args... args);

};

}