#include "glwpp/gl/api/gl_30.hpp"

#include "glad/gl.h"

using namespace glwpp;

void (*gl::BeginConditionalRender)(UInt id, Enum mode) = nullptr;
void (*gl::BeginTransformFeedback)(Enum primitiveMode) = nullptr;
void (*gl::BindBufferBase)(Enum target, UInt index, UInt buffer) = nullptr;
void (*gl::BindBufferRange)(Enum target, UInt index, UInt buffer, IntPtr offset, SizeiPtr size) = nullptr;
void (*gl::BindFragDataLocation)(UInt program, UInt color, const Char * name) = nullptr;
void (*gl::BindFramebuffer)(Enum target, UInt framebuffer) = nullptr;
void (*gl::BindRenderbuffer)(Enum target, UInt renderbuffer) = nullptr;
void (*gl::BindVertexArray)(UInt array) = nullptr;
void (*gl::BlitFramebuffer)(Int srcX0, Int srcY0, Int srcX1, Int srcY1, Int dstX0, Int dstY0, Int dstX1, Int dstY1, BitField mask, Enum filter) = nullptr;
GLenum (*gl::CheckFramebufferStatus)(Enum target) = nullptr;
void (*gl::ClampColor)(Enum target, Enum clamp) = nullptr;
void (*gl::ClearBufferfi)(Enum buffer, Int drawbuffer, Float depth, Int stencil) = nullptr;
void (*gl::ClearBufferfv)(Enum buffer, Int drawbuffer, const Float * value) = nullptr;
void (*gl::ClearBufferiv)(Enum buffer, Int drawbuffer, const Int * value) = nullptr;
void (*gl::ClearBufferuiv)(Enum buffer, Int drawbuffer, const UInt * value) = nullptr;
void (*gl::ColorMaski)(UInt index, Bool r, Bool g, Bool b, Bool a) = nullptr;
void (*gl::DeleteFramebuffers)(Sizei n, const UInt * framebuffers) = nullptr;
void (*gl::DeleteRenderbuffers)(Sizei n, const UInt * renderbuffers) = nullptr;
void (*gl::DeleteVertexArrays)(Sizei n, const UInt * arrays) = nullptr;
void (*gl::Disablei)(Enum target, UInt index) = nullptr;
void (*gl::Enablei)(Enum target, UInt index) = nullptr;
void (*gl::EndConditionalRender)() = nullptr;
void (*gl::EndTransformFeedback)() = nullptr;
void (*gl::FlushMappedBufferRange)(Enum target, IntPtr offset, SizeiPtr length) = nullptr;
void (*gl::FramebufferRenderbuffer)(Enum target, Enum attachment, Enum renderbuffertarget, UInt renderbuffer) = nullptr;
void (*gl::FramebufferTexture1D)(Enum target, Enum attachment, Enum textarget, UInt texture, Int level) = nullptr;
void (*gl::FramebufferTexture2D)(Enum target, Enum attachment, Enum textarget, UInt texture, Int level) = nullptr;
void (*gl::FramebufferTexture3D)(Enum target, Enum attachment, Enum textarget, UInt texture, Int level, Int zoffset) = nullptr;
void (*gl::FramebufferTextureLayer)(Enum target, Enum attachment, UInt texture, Int level, Int layer) = nullptr;
void (*gl::GenFramebuffers)(Sizei n, UInt * framebuffers) = nullptr;
void (*gl::GenRenderbuffers)(Sizei n, UInt * renderbuffers) = nullptr;
void (*gl::GenVertexArrays)(Sizei n, UInt * arrays) = nullptr;
void (*gl::GenerateMipmap)(Enum target) = nullptr;
void (*gl::GetBooleani_v)(Enum target, UInt index, Bool * data) = nullptr;
GLint (*gl::GetFragDataLocation)(UInt program, const Char * name) = nullptr;
void (*gl::GetFramebufferAttachmentParameteriv)(Enum target, Enum attachment, Enum pname, Int * params) = nullptr;
void (*gl::GetIntegeri_v)(Enum target, UInt index, Int * data) = nullptr;
void (*gl::GetRenderbufferParameteriv)(Enum target, Enum pname, Int * params) = nullptr;
const GLubyte *(*gl::GetStringi)(Enum name, UInt index) = nullptr;
void (*gl::GetTexParameterIiv)(Enum target, Enum pname, Int * params) = nullptr;
void (*gl::GetTexParameterIuiv)(Enum target, Enum pname, UInt * params) = nullptr;
void (*gl::GetTransformFeedbackVarying)(UInt program, UInt index, Sizei bufSize, Sizei * length, Sizei * size, Enum * type, Char * name) = nullptr;
void (*gl::GetUniformuiv)(UInt program, Int location, UInt * params) = nullptr;
void (*gl::GetVertexAttribIiv)(UInt index, Enum pname, Int * params) = nullptr;
void (*gl::GetVertexAttribIuiv)(UInt index, Enum pname, UInt * params) = nullptr;
GLboolean (*gl::IsEnabledi)(Enum target, UInt index) = nullptr;
GLboolean (*gl::IsFramebuffer)(UInt framebuffer) = nullptr;
GLboolean (*gl::IsRenderbuffer)(UInt renderbuffer) = nullptr;
GLboolean (*gl::IsVertexArray)(UInt array) = nullptr;
void *(*gl::MapBufferRange)(Enum target, IntPtr offset, SizeiPtr length, BitField access) = nullptr;
void (*gl::RenderbufferStorage)(Enum target, Enum internalformat, Sizei width, Sizei height) = nullptr;
void (*gl::RenderbufferStorageMultisample)(Enum target, Sizei samples, Enum internalformat, Sizei width, Sizei height) = nullptr;
void (*gl::TexParameterIiv)(Enum target, Enum pname, const Int * params) = nullptr;
void (*gl::TexParameterIuiv)(Enum target, Enum pname, const UInt * params) = nullptr;
void (*gl::TransformFeedbackVaryings)(UInt program, Sizei count, const Char *const* varyings, Enum bufferMode) = nullptr;
void (*gl::Uniform1ui)(Int location, UInt v0) = nullptr;
void (*gl::Uniform1uiv)(Int location, Sizei count, const UInt * value) = nullptr;
void (*gl::Uniform2ui)(Int location, UInt v0, UInt v1) = nullptr;
void (*gl::Uniform2uiv)(Int location, Sizei count, const UInt * value) = nullptr;
void (*gl::Uniform3ui)(Int location, UInt v0, UInt v1, UInt v2) = nullptr;
void (*gl::Uniform3uiv)(Int location, Sizei count, const UInt * value) = nullptr;
void (*gl::Uniform4ui)(Int location, UInt v0, UInt v1, UInt v2, UInt v3) = nullptr;
void (*gl::Uniform4uiv)(Int location, Sizei count, const UInt * value) = nullptr;
void (*gl::VertexAttribI1i)(UInt index, Int x) = nullptr;
void (*gl::VertexAttribI1iv)(UInt index, const Int * v) = nullptr;
void (*gl::VertexAttribI1ui)(UInt index, UInt x) = nullptr;
void (*gl::VertexAttribI1uiv)(UInt index, const UInt * v) = nullptr;
void (*gl::VertexAttribI2i)(UInt index, Int x, Int y) = nullptr;
void (*gl::VertexAttribI2iv)(UInt index, const Int * v) = nullptr;
void (*gl::VertexAttribI2ui)(UInt index, UInt x, UInt y) = nullptr;
void (*gl::VertexAttribI2uiv)(UInt index, const UInt * v) = nullptr;
void (*gl::VertexAttribI3i)(UInt index, Int x, Int y, Int z) = nullptr;
void (*gl::VertexAttribI3iv)(UInt index, const Int * v) = nullptr;
void (*gl::VertexAttribI3ui)(UInt index, UInt x, UInt y, UInt z) = nullptr;
void (*gl::VertexAttribI3uiv)(UInt index, const UInt * v) = nullptr;
void (*gl::VertexAttribI4bv)(UInt index, const Byte * v) = nullptr;
void (*gl::VertexAttribI4i)(UInt index, Int x, Int y, Int z, Int w) = nullptr;
void (*gl::VertexAttribI4iv)(UInt index, const Int * v) = nullptr;
void (*gl::VertexAttribI4sv)(UInt index, const Short * v) = nullptr;
void (*gl::VertexAttribI4ubv)(UInt index, const UByte * v) = nullptr;
void (*gl::VertexAttribI4ui)(UInt index, UInt x, UInt y, UInt z, UInt w) = nullptr;
void (*gl::VertexAttribI4uiv)(UInt index, const UInt * v) = nullptr;
void (*gl::VertexAttribI4usv)(UInt index, const UShort * v) = nullptr;
void (*gl::VertexAttribIPointer)(UInt index, Int size, Enum type, Sizei stride, const void * pointer) = nullptr;

bool gl::LoadGl_30(LoadFunc func){
    if (!LoadGl_21(func)){
        return false;
    }
 
    gl::BeginConditionalRender = glBeginConditionalRender;
    gl::BeginTransformFeedback = glBeginTransformFeedback;
    gl::BindBufferBase = glBindBufferBase;
    gl::BindBufferRange = glBindBufferRange;
    gl::BindFragDataLocation = glBindFragDataLocation;
    gl::BindFramebuffer = glBindFramebuffer;
    gl::BindRenderbuffer = glBindRenderbuffer;
    gl::BindVertexArray = glBindVertexArray;
    gl::BlitFramebuffer = glBlitFramebuffer;
    gl::CheckFramebufferStatus = glCheckFramebufferStatus;
    gl::ClampColor = glClampColor;
    gl::ClearBufferfi = glClearBufferfi;
    gl::ClearBufferfv = glClearBufferfv;
    gl::ClearBufferiv = glClearBufferiv;
    gl::ClearBufferuiv = glClearBufferuiv;
    gl::ColorMaski = glColorMaski;
    gl::DeleteFramebuffers = glDeleteFramebuffers;
    gl::DeleteRenderbuffers = glDeleteRenderbuffers;
    gl::DeleteVertexArrays = glDeleteVertexArrays;
    gl::Disablei = glDisablei;
    gl::Enablei = glEnablei;
    gl::EndConditionalRender = glEndConditionalRender;
    gl::EndTransformFeedback = glEndTransformFeedback;
    gl::FlushMappedBufferRange = glFlushMappedBufferRange;
    gl::FramebufferRenderbuffer = glFramebufferRenderbuffer;
    gl::FramebufferTexture1D = glFramebufferTexture1D;
    gl::FramebufferTexture2D = glFramebufferTexture2D;
    gl::FramebufferTexture3D = glFramebufferTexture3D;
    gl::FramebufferTextureLayer = glFramebufferTextureLayer;
    gl::GenFramebuffers = glGenFramebuffers;
    gl::GenRenderbuffers = glGenRenderbuffers;
    gl::GenVertexArrays = glGenVertexArrays;
    gl::GenerateMipmap = glGenerateMipmap;
    gl::GetBooleani_v = glGetBooleani_v;
    gl::GetFragDataLocation = glGetFragDataLocation;
    gl::GetFramebufferAttachmentParameteriv = glGetFramebufferAttachmentParameteriv;
    gl::GetIntegeri_v = glGetIntegeri_v;
    gl::GetRenderbufferParameteriv = glGetRenderbufferParameteriv;
    gl::GetStringi = glGetStringi;
    gl::GetTexParameterIiv = glGetTexParameterIiv;
    gl::GetTexParameterIuiv = glGetTexParameterIuiv;
    gl::GetTransformFeedbackVarying = glGetTransformFeedbackVarying;
    gl::GetUniformuiv = glGetUniformuiv;
    gl::GetVertexAttribIiv = glGetVertexAttribIiv;
    gl::GetVertexAttribIuiv = glGetVertexAttribIuiv;
    gl::IsEnabledi = glIsEnabledi;
    gl::IsFramebuffer = glIsFramebuffer;
    gl::IsRenderbuffer = glIsRenderbuffer;
    gl::IsVertexArray = glIsVertexArray;
    gl::MapBufferRange = glMapBufferRange;
    gl::RenderbufferStorage = glRenderbufferStorage;
    gl::RenderbufferStorageMultisample = glRenderbufferStorageMultisample;
    gl::TexParameterIiv = glTexParameterIiv;
    gl::TexParameterIuiv = glTexParameterIuiv;
    gl::TransformFeedbackVaryings = glTransformFeedbackVaryings;
    gl::Uniform1ui = glUniform1ui;
    gl::Uniform1uiv = glUniform1uiv;
    gl::Uniform2ui = glUniform2ui;
    gl::Uniform2uiv = glUniform2uiv;
    gl::Uniform3ui = glUniform3ui;
    gl::Uniform3uiv = glUniform3uiv;
    gl::Uniform4ui = glUniform4ui;
    gl::Uniform4uiv = glUniform4uiv;
    gl::VertexAttribI1i = glVertexAttribI1i;
    gl::VertexAttribI1iv = glVertexAttribI1iv;
    gl::VertexAttribI1ui = glVertexAttribI1ui;
    gl::VertexAttribI1uiv = glVertexAttribI1uiv;
    gl::VertexAttribI2i = glVertexAttribI2i;
    gl::VertexAttribI2iv = glVertexAttribI2iv;
    gl::VertexAttribI2ui = glVertexAttribI2ui;
    gl::VertexAttribI2uiv = glVertexAttribI2uiv;
    gl::VertexAttribI3i = glVertexAttribI3i;
    gl::VertexAttribI3iv = glVertexAttribI3iv;
    gl::VertexAttribI3ui = glVertexAttribI3ui;
    gl::VertexAttribI3uiv = glVertexAttribI3uiv;
    gl::VertexAttribI4bv = glVertexAttribI4bv;
    gl::VertexAttribI4i = glVertexAttribI4i;
    gl::VertexAttribI4iv = glVertexAttribI4iv;
    gl::VertexAttribI4sv = glVertexAttribI4sv;
    gl::VertexAttribI4ubv = glVertexAttribI4ubv;
    gl::VertexAttribI4ui = glVertexAttribI4ui;
    gl::VertexAttribI4uiv = glVertexAttribI4uiv;
    gl::VertexAttribI4usv = glVertexAttribI4usv;
    gl::VertexAttribIPointer = glVertexAttribIPointer;

    return true;
}