#pragma once

#include "gl/InterfaceInner.hpp"
#include "utils/Export.hpp"

namespace glwpp {

namespace GL {

class InterfaceOuter : public InterfaceInner {
public:
    InterfaceOuter(Context& ctx, const std::function<void(const SrcLoc&)> debug);
    ~InterfaceOuter();

    EXPORT void ActiveShaderProgram(GLuint pipeline, GLuint program, SrcLoc src_loc = SrcLoc{});
    EXPORT void ActiveTexture(GLenum texture, SrcLoc src_loc = SrcLoc{});
    EXPORT void AttachShader(GLuint program, GLuint shader, SrcLoc src_loc = SrcLoc{});
    EXPORT void BeginConditionalRender(GLuint id, GLenum mode, SrcLoc src_loc = SrcLoc{});
    EXPORT void BeginQuery(GLenum target, GLuint id, SrcLoc src_loc = SrcLoc{});
    EXPORT void BeginQueryIndexed(GLenum target, GLuint index, GLuint id, SrcLoc src_loc = SrcLoc{});
    EXPORT void BeginTransformFeedback(GLenum primitiveMode, SrcLoc src_loc = SrcLoc{});
    EXPORT void BindAttribLocation(GLuint program, GLuint index, GLcharArr name, SrcLoc src_loc = SrcLoc{});
    EXPORT void BindBuffer(GLenum target, GLuint buffer, SrcLoc src_loc = SrcLoc{});
    EXPORT void BindBufferBase(GLenum target, GLuint index, GLuint buffer, SrcLoc src_loc = SrcLoc{});
    EXPORT void BindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size, SrcLoc src_loc = SrcLoc{});
    EXPORT void BindBuffersBase(GLenum target, GLuint first, csr_GLsizei count, GLuintArr buffers, SrcLoc src_loc = SrcLoc{});
    EXPORT void BindBuffersRange(GLenum target, GLuint first, csr_GLsizei count, GLuintArr buffers, GLintptrArr offsets, GLsizeiptrArr sizes, SrcLoc src_loc = SrcLoc{});
    EXPORT void BindFragDataLocation(GLuint program, GLuint color, GLcharArr name, SrcLoc src_loc = SrcLoc{});
    EXPORT void BindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, GLcharArr name, SrcLoc src_loc = SrcLoc{});
    EXPORT void BindFramebuffer(GLenum target, GLuint framebuffer, SrcLoc src_loc = SrcLoc{});
    EXPORT void BindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format, SrcLoc src_loc = SrcLoc{});
    EXPORT void BindImageTextures(GLuint first, csr_GLsizei count, GLuintArr textures, SrcLoc src_loc = SrcLoc{});
    EXPORT void BindProgramPipeline(GLuint pipeline, SrcLoc src_loc = SrcLoc{});
    EXPORT void BindRenderbuffer(GLenum target, GLuint renderbuffer, SrcLoc src_loc = SrcLoc{});
    EXPORT void BindSampler(GLuint unit, GLuint sampler, SrcLoc src_loc = SrcLoc{});
    EXPORT void BindSamplers(GLuint first, csr_GLsizei count, GLuintArr samplers, SrcLoc src_loc = SrcLoc{});
    EXPORT void BindTexture(GLenum target, GLuint texture, SrcLoc src_loc = SrcLoc{});
    EXPORT void BindTextureUnit(GLuint unit, GLuint texture, SrcLoc src_loc = SrcLoc{});
    EXPORT void BindTextures(GLuint first, csr_GLsizei count, GLuintArr textures, SrcLoc src_loc = SrcLoc{});
    EXPORT void BindTransformFeedback(GLenum target, GLuint id, SrcLoc src_loc = SrcLoc{});
    EXPORT void BindVertexArray(GLuint array, SrcLoc src_loc = SrcLoc{});
    EXPORT void BindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, csr_GLsizei stride, SrcLoc src_loc = SrcLoc{});
    EXPORT void BindVertexBuffers(GLuint first, csr_GLsizei count, GLuintArr buffers, GLintptrArr offsets, csra_GLsizeiArr strides, SrcLoc src_loc = SrcLoc{});
    EXPORT void BlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, SrcLoc src_loc = SrcLoc{});
    EXPORT void BlendEquation(GLenum mode, SrcLoc src_loc = SrcLoc{});
    EXPORT void BlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha, SrcLoc src_loc = SrcLoc{});
    EXPORT void BlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha, SrcLoc src_loc = SrcLoc{});
    EXPORT void BlendEquationi(GLuint buf, GLenum mode, SrcLoc src_loc = SrcLoc{});
    EXPORT void BlendFunc(GLenum sfactor, GLenum dfactor, SrcLoc src_loc = SrcLoc{});
    EXPORT void BlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha, SrcLoc src_loc = SrcLoc{});
    EXPORT void BlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha, GLenum modeAlpha, SrcLoc src_loc = SrcLoc{});
    EXPORT void BlendFunci(GLuint buf, GLenum src, GLenum dst, SrcLoc src_loc = SrcLoc{});
    EXPORT void BlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, SrcLoc src_loc = SrcLoc{});
    EXPORT void BlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter, SrcLoc src_loc = SrcLoc{});
    EXPORT void BufferData(GLenum target, GLsizeiptr size, GLdata data, GLenum usage, SrcLoc src_loc = SrcLoc{});
    EXPORT void BufferStorage(GLenum target, GLsizeiptr size, GLdata data, GLbitfield flags, SrcLoc src_loc = SrcLoc{});
    EXPORT void BufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLdata data, SrcLoc src_loc = SrcLoc{});
    EXPORT void CheckFramebufferStatus(GLenum target, SrcLoc src_loc = SrcLoc{});
    EXPORT void CheckNamedFramebufferStatus(GLuint framebuffer, GLenum target, SrcLoc src_loc = SrcLoc{});
    EXPORT void ClampColor(GLenum target, GLenum clamp, SrcLoc src_loc = SrcLoc{});
    EXPORT void Clear(GLbitfield mask, SrcLoc src_loc = SrcLoc{});
    EXPORT void ClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, GLdata data, SrcLoc src_loc = SrcLoc{});
    EXPORT void ClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, GLdata data, SrcLoc src_loc = SrcLoc{});
    EXPORT void ClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil, SrcLoc src_loc = SrcLoc{});
    EXPORT void ClearBufferfv(GLenum buffer, GLint drawbuffer, GLfloatArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ClearBufferiv(GLenum buffer, GLint drawbuffer, GLintArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ClearBufferuiv(GLenum buffer, GLint drawbuffer, GLuintArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha, SrcLoc src_loc = SrcLoc{});
    EXPORT void ClearDepth(GLdouble depth, SrcLoc src_loc = SrcLoc{});
    EXPORT void ClearDepthf(GLfloat d, SrcLoc src_loc = SrcLoc{});
    EXPORT void ClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, GLdata data, SrcLoc src_loc = SrcLoc{});
    EXPORT void ClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, GLdata data, SrcLoc src_loc = SrcLoc{});
    EXPORT void ClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil, SrcLoc src_loc = SrcLoc{});
    EXPORT void ClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloatArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLintArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLuintArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ClearStencil(GLint s, SrcLoc src_loc = SrcLoc{});
    EXPORT void ClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, GLdata data, SrcLoc src_loc = SrcLoc{});
    EXPORT void ClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, csr_GLsizei width, csr_GLsizei height, csr_GLsizei depth, GLenum format, GLenum type, GLdata data, SrcLoc src_loc = SrcLoc{});
    EXPORT void ClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout, SrcLoc src_loc = SrcLoc{});
    EXPORT void ClipControl(GLenum origin, GLenum depth, SrcLoc src_loc = SrcLoc{});
    EXPORT void ColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha, SrcLoc src_loc = SrcLoc{});
    EXPORT void ColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a, SrcLoc src_loc = SrcLoc{});
    EXPORT void CompileShader(GLuint shader, SrcLoc src_loc = SrcLoc{});
    EXPORT void CompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, csr_GLsizei width, GLint border, csr_GLsizei imageSize, GLdata data, SrcLoc src_loc = SrcLoc{});
    EXPORT void CompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, csr_GLsizei width, csr_GLsizei height, GLint border, csr_GLsizei imageSize, GLdata data, SrcLoc src_loc = SrcLoc{});
    EXPORT void CompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, csr_GLsizei width, csr_GLsizei height, csr_GLsizei depth, GLint border, csr_GLsizei imageSize, GLdata data, SrcLoc src_loc = SrcLoc{});
    EXPORT void CompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, csr_GLsizei width, GLenum format, csr_GLsizei imageSize, GLdata data, SrcLoc src_loc = SrcLoc{});
    EXPORT void CompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, csr_GLsizei width, csr_GLsizei height, GLenum format, csr_GLsizei imageSize, GLdata data, SrcLoc src_loc = SrcLoc{});
    EXPORT void CompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, csr_GLsizei width, csr_GLsizei height, csr_GLsizei depth, GLenum format, csr_GLsizei imageSize, GLdata data, SrcLoc src_loc = SrcLoc{});
    EXPORT void CompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, csr_GLsizei width, GLenum format, csr_GLsizei imageSize, GLdata data, SrcLoc src_loc = SrcLoc{});
    EXPORT void CompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, csr_GLsizei width, csr_GLsizei height, GLenum format, csr_GLsizei imageSize, GLdata data, SrcLoc src_loc = SrcLoc{});
    EXPORT void CompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, csr_GLsizei width, csr_GLsizei height, csr_GLsizei depth, GLenum format, csr_GLsizei imageSize, GLdata data, SrcLoc src_loc = SrcLoc{});
    EXPORT void CopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, SrcLoc src_loc = SrcLoc{});
    EXPORT void CopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, csr_GLsizei srcWidth, csr_GLsizei srcHeight, csr_GLsizei srcDepth, SrcLoc src_loc = SrcLoc{});
    EXPORT void CopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size, SrcLoc src_loc = SrcLoc{});
    EXPORT void CopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, csr_GLsizei width, GLint border, SrcLoc src_loc = SrcLoc{});
    EXPORT void CopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, csr_GLsizei width, csr_GLsizei height, GLint border, SrcLoc src_loc = SrcLoc{});
    EXPORT void CopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, csr_GLsizei width, SrcLoc src_loc = SrcLoc{});
    EXPORT void CopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, csr_GLsizei width, csr_GLsizei height, SrcLoc src_loc = SrcLoc{});
    EXPORT void CopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, csr_GLsizei width, csr_GLsizei height, SrcLoc src_loc = SrcLoc{});
    EXPORT void CopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, csr_GLsizei width, SrcLoc src_loc = SrcLoc{});
    EXPORT void CopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, csr_GLsizei width, csr_GLsizei height, SrcLoc src_loc = SrcLoc{});
    EXPORT void CopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, csr_GLsizei width, csr_GLsizei height, SrcLoc src_loc = SrcLoc{});
    EXPORT void CreateBuffers(csr_GLsizei n, GLuintArr dst, SrcLoc src_loc = SrcLoc{});

    EXPORT void CreateFramebuffers(csr_GLsizei n, GLuintArr framebuffers, SrcLoc src_loc = SrcLoc{});
    EXPORT GLuintRes CreateProgram(SrcLoc src_loc = SrcLoc{});
    EXPORT void CreateProgramPipelines(csr_GLsizei n, GLuintArr pipelines, SrcLoc src_loc = SrcLoc{});
    EXPORT void CreateQueries(GLenum target, csr_GLsizei n, GLuintArr ids, SrcLoc src_loc = SrcLoc{});
    EXPORT void CreateRenderbuffers(csr_GLsizei n, GLuintArr renderbuffers, SrcLoc src_loc = SrcLoc{});
    EXPORT void CreateSamplers(csr_GLsizei n, GLuintArr samplers, SrcLoc src_loc = SrcLoc{});
    EXPORT GLuintRes CreateShader(GLenum type, SrcLoc src_loc = SrcLoc{});
    EXPORT void CreateTextures(GLenum target, csr_GLsizei n, GLuintArr textures, SrcLoc src_loc = SrcLoc{});
    EXPORT void CreateTransformFeedbacks(csr_GLsizei n, GLuintArr ids, SrcLoc src_loc = SrcLoc{});
    EXPORT void CreateVertexArrays(csr_GLsizei n, GLuintArr arrays, SrcLoc src_loc = SrcLoc{});
    EXPORT void CullFace(GLenum mode, SrcLoc src_loc = SrcLoc{});
    EXPORT void DebugMessageControl(GLenum source, GLenum type, GLenum severity, csr_GLsizei count, GLuintArr ids, GLboolean enabled, SrcLoc src_loc = SrcLoc{});
    EXPORT void DebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, csr_GLsizei length, GLcharArr buf, SrcLoc src_loc = SrcLoc{});
    EXPORT void DeleteBuffers(csr_GLsizei n, GLuintArr buffers, SrcLoc src_loc = SrcLoc{});
    EXPORT void DeleteFramebuffers(csr_GLsizei n, GLuintArr framebuffers, SrcLoc src_loc = SrcLoc{});
    EXPORT void DeleteProgram(GLuint program, SrcLoc src_loc = SrcLoc{});
    EXPORT void DeleteProgramPipelines(csr_GLsizei n, GLuintArr pipelines, SrcLoc src_loc = SrcLoc{});
    EXPORT void DeleteQueries(csr_GLsizei n, GLuintArr ids, SrcLoc src_loc = SrcLoc{});
    EXPORT void DeleteRenderbuffers(csr_GLsizei n, GLuintArr renderbuffers, SrcLoc src_loc = SrcLoc{});
    EXPORT void DeleteSamplers(csr_GLsizei count, GLuintArr samplers, SrcLoc src_loc = SrcLoc{});
    EXPORT void DeleteShader(GLuint shader, SrcLoc src_loc = SrcLoc{});
    EXPORT void DeleteSync(GLsync sync, SrcLoc src_loc = SrcLoc{});
    EXPORT void DeleteTextures(csr_GLsizei n, GLuintArr textures, SrcLoc src_loc = SrcLoc{});
    EXPORT void DeleteTransformFeedbacks(csr_GLsizei n, GLuintArr ids, SrcLoc src_loc = SrcLoc{});
    EXPORT void DeleteVertexArrays(csr_GLsizei n, GLuintArr arrays, SrcLoc src_loc = SrcLoc{});
    EXPORT void DepthFunc(GLenum func, SrcLoc src_loc = SrcLoc{});
    EXPORT void DepthMask(GLboolean flag, SrcLoc src_loc = SrcLoc{});
    EXPORT void DepthRange(GLdouble n, GLdouble f, SrcLoc src_loc = SrcLoc{});
    EXPORT void DepthRangeArrayv(GLuint first, csr_GLsizei count, GLdoubleArr v, SrcLoc src_loc = SrcLoc{});
    EXPORT void DepthRangeIndexed(GLuint index, GLdouble n, GLdouble f, SrcLoc src_loc = SrcLoc{});
    EXPORT void DepthRangef(GLfloat n, GLfloat f, SrcLoc src_loc = SrcLoc{});
    EXPORT void DetachShader(GLuint program, GLuint shader, SrcLoc src_loc = SrcLoc{});
    EXPORT void Disable(GLenum cap, SrcLoc src_loc = SrcLoc{});
    EXPORT void DisableVertexArrayAttrib(GLuint vaobj, GLuint index, SrcLoc src_loc = SrcLoc{});
    EXPORT void DisableVertexAttribArray(GLuint index, SrcLoc src_loc = SrcLoc{});
    EXPORT void Disablei(GLenum target, GLuint index, SrcLoc src_loc = SrcLoc{});
    EXPORT void DispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, SrcLoc src_loc = SrcLoc{});
    EXPORT void DispatchComputeIndirect(GLintptr indirect, SrcLoc src_loc = SrcLoc{});
    EXPORT void DrawArrays(GLenum mode, GLint first, csr_GLsizei count, SrcLoc src_loc = SrcLoc{});
    EXPORT void DrawArraysIndirect(GLenum mode, GLdata indirect, SrcLoc src_loc = SrcLoc{});
    EXPORT void DrawArraysInstanced(GLenum mode, GLint first, csr_GLsizei count, csr_GLsizei instancecount, SrcLoc src_loc = SrcLoc{});
    EXPORT void DrawArraysInstancedBaseInstance(GLenum mode, GLint first, csr_GLsizei count, csr_GLsizei instancecount, GLuint baseinstance, SrcLoc src_loc = SrcLoc{});
    EXPORT void DrawBuffer(GLenum buf, SrcLoc src_loc = SrcLoc{});
    EXPORT void DrawBuffers(csr_GLsizei n, GLenumArr bufs, SrcLoc src_loc = SrcLoc{});
    EXPORT void DrawElements(GLenum mode, csr_GLsizei count, GLenum type, GLdata indices, SrcLoc src_loc = SrcLoc{});
    EXPORT void DrawElementsBaseVertex(GLenum mode, csr_GLsizei count, GLenum type, GLdata indices, GLint basevertex, SrcLoc src_loc = SrcLoc{});
    EXPORT void DrawElementsIndirect(GLenum mode, GLenum type, GLdata indirect, SrcLoc src_loc = SrcLoc{});
    EXPORT void DrawElementsInstanced(GLenum mode, csr_GLsizei count, GLenum type, GLdata indices, csr_GLsizei instancecount, SrcLoc src_loc = SrcLoc{});
    EXPORT void DrawElementsInstancedBaseInstance(GLenum mode, csr_GLsizei count, GLenum type, GLdata indices, csr_GLsizei instancecount, GLuint baseinstance, SrcLoc src_loc = SrcLoc{});
    EXPORT void DrawElementsInstancedBaseVertex(GLenum mode, csr_GLsizei count, GLenum type, GLdata indices, csr_GLsizei instancecount, GLint basevertex, SrcLoc src_loc = SrcLoc{});
    EXPORT void DrawElementsInstancedBaseVertexBaseInstance(GLenum mode, csr_GLsizei count, GLenum type, GLdata indices, csr_GLsizei instancecount, GLint basevertex, GLuint baseinstance, SrcLoc src_loc = SrcLoc{});
    EXPORT void DrawRangeElements(GLenum mode, GLuint start, GLuint end, csr_GLsizei count, GLenum type, GLdata indices, SrcLoc src_loc = SrcLoc{});
    EXPORT void DrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, csr_GLsizei count, GLenum type, GLdata indices, GLint basevertex, SrcLoc src_loc = SrcLoc{});
    EXPORT void DrawTransformFeedback(GLenum mode, GLuint id, SrcLoc src_loc = SrcLoc{});
    EXPORT void DrawTransformFeedbackInstanced(GLenum mode, GLuint id, csr_GLsizei instancecount, SrcLoc src_loc = SrcLoc{});
    EXPORT void DrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream, SrcLoc src_loc = SrcLoc{});
    EXPORT void DrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, csr_GLsizei instancecount, SrcLoc src_loc = SrcLoc{});
    EXPORT void Enable(GLenum cap, SrcLoc src_loc = SrcLoc{});
    EXPORT void EnableVertexArrayAttrib(GLuint vaobj, GLuint index, SrcLoc src_loc = SrcLoc{});
    EXPORT void EnableVertexAttribArray(GLuint index, SrcLoc src_loc = SrcLoc{});
    EXPORT void Enablei(GLenum target, GLuint index, SrcLoc src_loc = SrcLoc{});
    EXPORT void EndConditionalRender(SrcLoc src_loc = SrcLoc{});
    EXPORT void EndQuery(GLenum target, SrcLoc src_loc = SrcLoc{});
    EXPORT void EndQueryIndexed(GLenum target, GLuint index, SrcLoc src_loc = SrcLoc{});
    EXPORT void EndTransformFeedback(SrcLoc src_loc = SrcLoc{});
    EXPORT GLsyncRes FenceSync(GLenum condition, GLbitfield flags, SrcLoc src_loc = SrcLoc{});
    EXPORT void Finish(SrcLoc src_loc = SrcLoc{});
    EXPORT void Flush(SrcLoc src_loc = SrcLoc{});
    EXPORT void FlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, SrcLoc src_loc = SrcLoc{});
    EXPORT void FlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, SrcLoc src_loc = SrcLoc{});
    EXPORT void FramebufferParameteri(GLenum target, GLenum pname, GLint param, SrcLoc src_loc = SrcLoc{});
    EXPORT void FramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, SrcLoc src_loc = SrcLoc{});
    EXPORT void FramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level, SrcLoc src_loc = SrcLoc{});
    EXPORT void FramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, SrcLoc src_loc = SrcLoc{});
    EXPORT void FramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, SrcLoc src_loc = SrcLoc{});
    EXPORT void FramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset, SrcLoc src_loc = SrcLoc{});
    EXPORT void FramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer, SrcLoc src_loc = SrcLoc{});
    EXPORT void FrontFace(GLenum mode, SrcLoc src_loc = SrcLoc{});
    EXPORT void GenBuffers(csr_GLsizei n, GLuintArr buffers, SrcLoc src_loc = SrcLoc{});
    EXPORT void GenFramebuffers(csr_GLsizei n, GLuintArr framebuffers, SrcLoc src_loc = SrcLoc{});
    EXPORT void GenProgramPipelines(csr_GLsizei n, GLuintArr pipelines, SrcLoc src_loc = SrcLoc{});
    EXPORT void GenQueries(csr_GLsizei n, GLuintArr ids, SrcLoc src_loc = SrcLoc{});
    EXPORT void GenRenderbuffers(csr_GLsizei n, GLuintArr renderbuffers, SrcLoc src_loc = SrcLoc{});
    EXPORT void GenSamplers(csr_GLsizei count, GLuintArr samplers, SrcLoc src_loc = SrcLoc{});
    EXPORT void GenTextures(csr_GLsizei n, GLuintArr textures, SrcLoc src_loc = SrcLoc{});
    EXPORT void GenTransformFeedbacks(csr_GLsizei n, GLuintArr ids, SrcLoc src_loc = SrcLoc{});
    EXPORT void GenVertexArrays(csr_GLsizei n, GLuintArr arrays, SrcLoc src_loc = SrcLoc{});
    EXPORT void GenerateMipmap(GLenum target, SrcLoc src_loc = SrcLoc{});
    EXPORT void GenerateTextureMipmap(GLuint texture, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetActiveAttrib(GLuint program, GLuint index, csr_GLsizei bufSize, csr_GLsizei length, GLint size, GLenum type, GLcharArr name, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, csr_GLsizei bufSize, csr_GLsizei length, GLcharArr name, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, csr_GLsizei bufSize, csr_GLsizei length, GLcharArr name, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLintArr values, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetActiveUniform(GLuint program, GLuint index, csr_GLsizei bufSize, csr_GLsizei length, GLint size, GLenum type, GLcharArr name, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, csr_GLsizei bufSize, csr_GLsizei length, GLcharArr uniformBlockName, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetActiveUniformName(GLuint program, GLuint uniformIndex, csr_GLsizei bufSize, csr_GLsizei length, GLcharArr uniformName, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetActiveUniformsiv(GLuint program, csr_GLsizei uniformCount, GLuintArr uniformIndices, GLenum pname, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetAttachedShaders(GLuint program, csr_GLsizei maxCount, csra_GLsizeiArr count, GLuintArr shaders, SrcLoc src_loc = SrcLoc{});
    EXPORT GLintRes GetAttribLocation(GLuint program, GLcharArr name, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetBooleani_v(GLenum target, GLuint index, GLbooleanArr data, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetBooleanv(GLenum pname, GLbooleanArr data, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetBufferParameteri64v(GLenum target, GLenum pname, GLint64Arr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetBufferParameteriv(GLenum target, GLenum pname, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetBufferPointerv(GLenum target, GLenum pname, GLdataPtr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLdata data, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetCompressedTexImage(GLenum target, GLint level, GLdata img, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetCompressedTextureImage(GLuint texture, GLint level, csr_GLsizei bufSize, GLdata pixels, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, csr_GLsizei width, csr_GLsizei height, csr_GLsizei depth, csr_GLsizei bufSize, GLdata pixels, SrcLoc src_loc = SrcLoc{});
    EXPORT GLuintRes GetDebugMessageLog(GLuint count, csr_GLsizei bufSize, GLenumArr sources, GLenumArr types, GLuintArr ids, GLenumArr severities, csr_GLsizei lengths, GLcharArr messageLog, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetDoublei_v(GLenum target, GLuint index, GLdoubleArr data, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetDoublev(GLenum pname, GLdoubleArr data, SrcLoc src_loc = SrcLoc{});
    EXPORT GLenumRes GetError(SrcLoc src_loc = SrcLoc{});
    EXPORT void GetFloati_v(GLenum target, GLuint index, GLfloatArr data, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetFloatv(GLenum pname, GLfloatArr data, SrcLoc src_loc = SrcLoc{});
    EXPORT GLintRes GetFragDataIndex(GLuint program, GLcharArr name, SrcLoc src_loc = SrcLoc{});
    EXPORT GLintRes GetFragDataLocation(GLuint program, GLcharArr name, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetFramebufferParameteriv(GLenum target, GLenum pname, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT GLenumRes GetGraphicsResetStatus(SrcLoc src_loc = SrcLoc{});
    EXPORT void GetInteger64i_v(GLenum target, GLuint index, GLint64Arr data, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetInteger64v(GLenum pname, GLint64Arr data, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetIntegeri_v(GLenum target, GLuint index, GLintArr data, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetIntegerv(GLenum pname, GLintArr data, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, csr_GLsizei count, GLint64Arr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, csr_GLsizei count, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetMultisamplefv(GLenum pname, GLuint index, GLfloatArr val, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64Arr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetNamedBufferPointerv(GLuint buffer, GLenum pname, GLdataPtr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, GLdata data, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLintArr param, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetObjectLabel(GLenum identifier, GLuint name, csr_GLsizei bufSize, csr_GLsizei length, GLcharArr label, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetObjectPtrLabel(GLdata ptr, csr_GLsizei bufSize, csr_GLsizei length, GLcharArr label, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetPointerv(GLenum pname, GLdataPtr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetProgramBinary(GLuint program, csr_GLsizei bufSize, csr_GLsizei length, GLenumArr binaryFormat, GLdata binary, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetProgramInfoLog(GLuint program, csr_GLsizei bufSize, csr_GLsizei length, GLcharArr infoLog, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetProgramPipelineInfoLog(GLuint pipeline, csr_GLsizei bufSize, csr_GLsizei length, GLcharArr infoLog, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetProgramPipelineiv(GLuint pipeline, GLenum pname, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT GLuintRes GetProgramResourceIndex(GLuint program, GLenum programInterface, GLcharArr name, SrcLoc src_loc = SrcLoc{});
    EXPORT GLintRes GetProgramResourceLocation(GLuint program, GLenum programInterface, GLcharArr name, SrcLoc src_loc = SrcLoc{});
    EXPORT GLintRes GetProgramResourceLocationIndex(GLuint program, GLenum programInterface, GLcharArr name, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, csr_GLsizei bufSize, csr_GLsizei length, GLcharArr name, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, csr_GLsizei propCount, GLenumArr props, csr_GLsizei count, csr_GLsizei length, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLintArr values, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetProgramiv(GLuint program, GLenum pname, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetQueryObjecti64v(GLuint id, GLenum pname, GLint64Arr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetQueryObjectiv(GLuint id, GLenum pname, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetQueryObjectui64v(GLuint id, GLenum pname, GLuint64Arr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetQueryObjectuiv(GLuint id, GLenum pname, GLuintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetQueryiv(GLenum target, GLenum pname, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetRenderbufferParameteriv(GLenum target, GLenum pname, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetSamplerParameterIiv(GLuint sampler, GLenum pname, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloatArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetSamplerParameteriv(GLuint sampler, GLenum pname, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetShaderInfoLog(GLuint shader, csr_GLsizei bufSize, csr_GLsizei length, GLcharArr infoLog, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLintArr range, GLintArr precision, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetShaderSource(GLuint shader, csr_GLsizei bufSize, csr_GLsizei length, GLcharArr source, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetShaderiv(GLuint shader, GLenum pname, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT GLubyteArrRes GetString(GLenum name, SrcLoc src_loc = SrcLoc{});
    EXPORT GLubyteArrRes GetStringi(GLenum name, GLuint index, SrcLoc src_loc = SrcLoc{});
    EXPORT GLuintRes GetSubroutineIndex(GLuint program, GLenum shadertype, GLcharArr name, SrcLoc src_loc = SrcLoc{});
    EXPORT GLintRes GetSubroutineUniformLocation(GLuint program, GLenum shadertype, GLcharArr name, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetSynciv(GLsync sync, GLenum pname, csr_GLsizei count, csr_GLsizei length, GLintArr values, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLdata pixels, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloatArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetTexParameterIiv(GLenum target, GLenum pname, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetTexParameterIuiv(GLenum target, GLenum pname, GLuintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetTexParameterfv(GLenum target, GLenum pname, GLfloatArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetTexParameteriv(GLenum target, GLenum pname, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, csr_GLsizei bufSize, GLdata pixels, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloatArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetTextureParameterIiv(GLuint texture, GLenum pname, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetTextureParameterIuiv(GLuint texture, GLenum pname, GLuintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetTextureParameterfv(GLuint texture, GLenum pname, GLfloatArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetTextureParameteriv(GLuint texture, GLenum pname, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, csr_GLsizei width, csr_GLsizei height, csr_GLsizei depth, GLenum format, GLenum type, csr_GLsizei bufSize, GLdata pixels, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetTransformFeedbackVarying(GLuint program, GLuint index, csr_GLsizei bufSize, csr_GLsizei length, csra_GLsizeiArr size, GLenumArr type, GLcharArr name, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64Arr param, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLintArr param, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetTransformFeedbackiv(GLuint xfb, GLenum pname, GLintArr param, SrcLoc src_loc = SrcLoc{});
    EXPORT GLuintRes GetUniformBlockIndex(GLuint program, GLcharArr uniformBlockName, SrcLoc src_loc = SrcLoc{});
    EXPORT GLintRes GetUniformLocation(GLuint program, GLcharArr name, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetUniformdv(GLuint program, GLint location, GLdoubleArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetUniformfv(GLuint program, GLint location, GLfloatArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetUniformiv(GLuint program, GLint location, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetUniformuiv(GLuint program, GLint location, GLuintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64Arr param, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLintArr param, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetVertexArrayiv(GLuint vaobj, GLenum pname, GLintArr param, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetVertexAttribIiv(GLuint index, GLenum pname, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetVertexAttribIuiv(GLuint index, GLenum pname, GLuintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetVertexAttribLdv(GLuint index, GLenum pname, GLdoubleArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetVertexAttribPointerv(GLuint index, GLenum pname, GLdataPtr pointer, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetVertexAttribdv(GLuint index, GLenum pname, GLdoubleArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetVertexAttribfv(GLuint index, GLenum pname, GLfloatArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetVertexAttribiv(GLuint index, GLenum pname, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetnCompressedTexImage(GLenum target, GLint lod, csr_GLsizei bufSize, GLdata pixels, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, csr_GLsizei bufSize, GLdata pixels, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetnUniformdv(GLuint program, GLint location, csr_GLsizei bufSize, GLdoubleArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetnUniformfv(GLuint program, GLint location, csr_GLsizei bufSize, GLfloatArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetnUniformiv(GLuint program, GLint location, csr_GLsizei bufSize, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void GetnUniformuiv(GLuint program, GLint location, csr_GLsizei bufSize, GLuintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void Hint(GLenum target, GLenum mode, SrcLoc src_loc = SrcLoc{});
    EXPORT void InvalidateBufferData(GLuint buffer, SrcLoc src_loc = SrcLoc{});
    EXPORT void InvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length, SrcLoc src_loc = SrcLoc{});
    EXPORT void InvalidateFramebuffer(GLenum target, csr_GLsizei numAttachments, GLenumArr attachments, SrcLoc src_loc = SrcLoc{});
    EXPORT void InvalidateNamedFramebufferData(GLuint framebuffer, csr_GLsizei numAttachments, GLenumArr attachments, SrcLoc src_loc = SrcLoc{});
    EXPORT void InvalidateNamedFramebufferSubData(GLuint framebuffer, csr_GLsizei numAttachments, GLenumArr attachments, GLint x, GLint y, csr_GLsizei width, csr_GLsizei height, SrcLoc src_loc = SrcLoc{});
    EXPORT void InvalidateSubFramebuffer(GLenum target, csr_GLsizei numAttachments, GLenumArr attachments, GLint x, GLint y, csr_GLsizei width, csr_GLsizei height, SrcLoc src_loc = SrcLoc{});
    EXPORT void InvalidateTexImage(GLuint texture, GLint level, SrcLoc src_loc = SrcLoc{});
    EXPORT void InvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, csr_GLsizei width, csr_GLsizei height, csr_GLsizei depth, SrcLoc src_loc = SrcLoc{});
    EXPORT GLbooleanRes IsBuffer(GLuint buffer, SrcLoc src_loc = SrcLoc{});
    EXPORT GLbooleanRes IsEnabled(GLenum cap, SrcLoc src_loc = SrcLoc{});
    EXPORT GLbooleanRes IsEnabledi(GLenum target, GLuint index, SrcLoc src_loc = SrcLoc{});
    EXPORT GLbooleanRes IsFramebuffer(GLuint framebuffer, SrcLoc src_loc = SrcLoc{});
    EXPORT GLbooleanRes IsProgram(GLuint program, SrcLoc src_loc = SrcLoc{});
    EXPORT GLbooleanRes IsProgramPipeline(GLuint pipeline, SrcLoc src_loc = SrcLoc{});
    EXPORT GLbooleanRes IsQuery(GLuint id, SrcLoc src_loc = SrcLoc{});
    EXPORT GLbooleanRes IsRenderbuffer(GLuint renderbuffer, SrcLoc src_loc = SrcLoc{});
    EXPORT GLbooleanRes IsSampler(GLuint sampler, SrcLoc src_loc = SrcLoc{});
    EXPORT GLbooleanRes IsShader(GLuint shader, SrcLoc src_loc = SrcLoc{});
    EXPORT GLbooleanRes IsSync(GLsync sync, SrcLoc src_loc = SrcLoc{});
    EXPORT GLbooleanRes IsTexture(GLuint texture, SrcLoc src_loc = SrcLoc{});
    EXPORT GLbooleanRes IsTransformFeedback(GLuint id, SrcLoc src_loc = SrcLoc{});
    EXPORT GLbooleanRes IsVertexArray(GLuint array, SrcLoc src_loc = SrcLoc{});
    EXPORT void LineWidth(GLfloat width, SrcLoc src_loc = SrcLoc{});
    EXPORT void LinkProgram(GLuint program, SrcLoc src_loc = SrcLoc{});
    EXPORT void LogicOp(GLenum opcode, SrcLoc src_loc = SrcLoc{});
    EXPORT void MemoryBarrier(GLbitfield barriers, SrcLoc src_loc = SrcLoc{});
    EXPORT void MemoryBarrierByRegion(GLbitfield barriers, SrcLoc src_loc = SrcLoc{});
    EXPORT void MinSampleShading(GLfloat value, SrcLoc src_loc = SrcLoc{});
    EXPORT void MultiDrawArrays(GLenum mode, GLintArr first, csra_GLsizeiArr count, csr_GLsizei drawcount, SrcLoc src_loc = SrcLoc{});
    EXPORT void MultiDrawArraysIndirect(GLenum mode, GLdata indirect, csr_GLsizei drawcount, csr_GLsizei stride, SrcLoc src_loc = SrcLoc{});
    EXPORT void MultiDrawArraysIndirectCount(GLenum mode, GLdata indirect, GLintptr drawcount, csr_GLsizei maxdrawcount, csr_GLsizei stride, SrcLoc src_loc = SrcLoc{});
    EXPORT void MultiDrawElements(GLenum mode, csra_GLsizeiArr count, GLenum type, GLdataPtr indices, csr_GLsizei drawcount, SrcLoc src_loc = SrcLoc{});
    EXPORT void MultiDrawElementsBaseVertex(GLenum mode, csra_GLsizeiArr count, GLenum type, GLdataPtr indices, csr_GLsizei drawcount, GLintArr basevertex, SrcLoc src_loc = SrcLoc{});
    EXPORT void MultiDrawElementsIndirect(GLenum mode, GLenum type, GLdata indirect, csr_GLsizei drawcount, csr_GLsizei stride, SrcLoc src_loc = SrcLoc{});
    EXPORT void MultiDrawElementsIndirectCount(GLenum mode, GLenum type, GLdata indirect, GLintptr drawcount, csr_GLsizei maxdrawcount, csr_GLsizei stride, SrcLoc src_loc = SrcLoc{});
    EXPORT void NamedBufferData(GLuint buffer, GLsizeiptr size, GLdata data, GLenum usage, SrcLoc src_loc = SrcLoc{});
    EXPORT void NamedBufferStorage(GLuint buffer, GLsizeiptr size, GLdata data, GLbitfield flags, SrcLoc src_loc = SrcLoc{});
    EXPORT void NamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, GLdata data, SrcLoc src_loc = SrcLoc{});
    EXPORT void NamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf, SrcLoc src_loc = SrcLoc{});
    EXPORT void NamedFramebufferDrawBuffers(GLuint framebuffer, csr_GLsizei n, GLenumArr bufs, SrcLoc src_loc = SrcLoc{});
    EXPORT void NamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param, SrcLoc src_loc = SrcLoc{});
    EXPORT void NamedFramebufferReadBuffer(GLuint framebuffer, GLenum src, SrcLoc src_loc = SrcLoc{});
    EXPORT void NamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer, SrcLoc src_loc = SrcLoc{});
    EXPORT void NamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, SrcLoc src_loc = SrcLoc{});
    EXPORT void NamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer, SrcLoc src_loc = SrcLoc{});
    EXPORT void NamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, csr_GLsizei width, csr_GLsizei height, SrcLoc src_loc = SrcLoc{});
    EXPORT void NamedRenderbufferStorageMultisample(GLuint renderbuffer, csr_GLsizei samples, GLenum internalformat, csr_GLsizei width, csr_GLsizei height, SrcLoc src_loc = SrcLoc{});
    EXPORT void ObjectLabel(GLenum identifier, GLuint name, csr_GLsizei length, GLcharArr label, SrcLoc src_loc = SrcLoc{});
    EXPORT void ObjectPtrLabel(GLdata ptr, csr_GLsizei length, GLcharArr label, SrcLoc src_loc = SrcLoc{});
    EXPORT void PatchParameterfv(GLenum pname, GLfloatArr values, SrcLoc src_loc = SrcLoc{});
    EXPORT void PatchParameteri(GLenum pname, GLint value, SrcLoc src_loc = SrcLoc{});
    EXPORT void PauseTransformFeedback(SrcLoc src_loc = SrcLoc{});
    EXPORT void PixelStoref(GLenum pname, GLfloat param, SrcLoc src_loc = SrcLoc{});
    EXPORT void PixelStorei(GLenum pname, GLint param, SrcLoc src_loc = SrcLoc{});
    EXPORT void PointParameterf(GLenum pname, GLfloat param, SrcLoc src_loc = SrcLoc{});
    EXPORT void PointParameterfv(GLenum pname, GLfloatArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void PointParameteri(GLenum pname, GLint param, SrcLoc src_loc = SrcLoc{});
    EXPORT void PointParameteriv(GLenum pname, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void PointSize(GLfloat size, SrcLoc src_loc = SrcLoc{});
    EXPORT void PolygonMode(GLenum face, GLenum mode, SrcLoc src_loc = SrcLoc{});
    EXPORT void PolygonOffset(GLfloat factor, GLfloat units, SrcLoc src_loc = SrcLoc{});
    EXPORT void PolygonOffsetClamp(GLfloat factor, GLfloat units, GLfloat clamp, SrcLoc src_loc = SrcLoc{});
    EXPORT void PopDebugGroup(SrcLoc src_loc = SrcLoc{});
    EXPORT void PrimitiveRestartIndex(GLuint index, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramBinary(GLuint program, GLenum binaryFormat, GLdata binary, csr_GLsizei length, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramParameteri(GLuint program, GLenum pname, GLint value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform1d(GLuint program, GLint location, GLdouble v0, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform1dv(GLuint program, GLint location, csr_GLsizei count, GLdoubleArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform1f(GLuint program, GLint location, GLfloat v0, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform1fv(GLuint program, GLint location, csr_GLsizei count, GLfloatArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform1i(GLuint program, GLint location, GLint v0, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform1iv(GLuint program, GLint location, csr_GLsizei count, GLintArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform1ui(GLuint program, GLint location, GLuint v0, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform1uiv(GLuint program, GLint location, csr_GLsizei count, GLuintArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform2dv(GLuint program, GLint location, csr_GLsizei count, GLdoubleArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform2fv(GLuint program, GLint location, csr_GLsizei count, GLfloatArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform2iv(GLuint program, GLint location, csr_GLsizei count, GLintArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform2uiv(GLuint program, GLint location, csr_GLsizei count, GLuintArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform3dv(GLuint program, GLint location, csr_GLsizei count, GLdoubleArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform3fv(GLuint program, GLint location, csr_GLsizei count, GLfloatArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform3iv(GLuint program, GLint location, csr_GLsizei count, GLintArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform3uiv(GLuint program, GLint location, csr_GLsizei count, GLuintArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform4dv(GLuint program, GLint location, csr_GLsizei count, GLdoubleArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform4fv(GLuint program, GLint location, csr_GLsizei count, GLfloatArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform4iv(GLuint program, GLint location, csr_GLsizei count, GLintArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniform4uiv(GLuint program, GLint location, csr_GLsizei count, GLuintArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix2dv(GLuint program, GLint location, csr_GLsizei count, GLboolean transpose, GLdoubleArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix2fv(GLuint program, GLint location, csr_GLsizei count, GLboolean transpose, GLfloatArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix2x3dv(GLuint program, GLint location, csr_GLsizei count, GLboolean transpose, GLdoubleArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix2x3fv(GLuint program, GLint location, csr_GLsizei count, GLboolean transpose, GLfloatArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix2x4dv(GLuint program, GLint location, csr_GLsizei count, GLboolean transpose, GLdoubleArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix2x4fv(GLuint program, GLint location, csr_GLsizei count, GLboolean transpose, GLfloatArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix3dv(GLuint program, GLint location, csr_GLsizei count, GLboolean transpose, GLdoubleArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix3fv(GLuint program, GLint location, csr_GLsizei count, GLboolean transpose, GLfloatArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix3x2dv(GLuint program, GLint location, csr_GLsizei count, GLboolean transpose, GLdoubleArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix3x2fv(GLuint program, GLint location, csr_GLsizei count, GLboolean transpose, GLfloatArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix3x4dv(GLuint program, GLint location, csr_GLsizei count, GLboolean transpose, GLdoubleArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix3x4fv(GLuint program, GLint location, csr_GLsizei count, GLboolean transpose, GLfloatArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix4dv(GLuint program, GLint location, csr_GLsizei count, GLboolean transpose, GLdoubleArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix4fv(GLuint program, GLint location, csr_GLsizei count, GLboolean transpose, GLfloatArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix4x2dv(GLuint program, GLint location, csr_GLsizei count, GLboolean transpose, GLdoubleArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix4x2fv(GLuint program, GLint location, csr_GLsizei count, GLboolean transpose, GLfloatArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix4x3dv(GLuint program, GLint location, csr_GLsizei count, GLboolean transpose, GLdoubleArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProgramUniformMatrix4x3fv(GLuint program, GLint location, csr_GLsizei count, GLboolean transpose, GLfloatArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void ProvokingVertex(GLenum mode, SrcLoc src_loc = SrcLoc{});
    EXPORT void PushDebugGroup(GLenum source, GLuint id, csr_GLsizei length, GLcharArr message, SrcLoc src_loc = SrcLoc{});
    EXPORT void QueryCounter(GLuint id, GLenum target, SrcLoc src_loc = SrcLoc{});
    EXPORT void ReadBuffer(GLenum src, SrcLoc src_loc = SrcLoc{});
    EXPORT void ReadPixels(GLint x, GLint y, csr_GLsizei width, csr_GLsizei height, GLenum format, GLenum type, GLdata pixels, SrcLoc src_loc = SrcLoc{});
    EXPORT void ReadnPixels(GLint x, GLint y, csr_GLsizei width, csr_GLsizei height, GLenum format, GLenum type, csr_GLsizei bufSize, GLdata data, SrcLoc src_loc = SrcLoc{});
    EXPORT void ReleaseShaderCompiler(SrcLoc src_loc = SrcLoc{});
    EXPORT void RenderbufferStorage(GLenum target, GLenum internalformat, csr_GLsizei width, csr_GLsizei height, SrcLoc src_loc = SrcLoc{});
    EXPORT void RenderbufferStorageMultisample(GLenum target, csr_GLsizei samples, GLenum internalformat, csr_GLsizei width, csr_GLsizei height, SrcLoc src_loc = SrcLoc{});
    EXPORT void ResumeTransformFeedback(SrcLoc src_loc = SrcLoc{});
    EXPORT void SampleCoverage(GLfloat value, GLboolean invert, SrcLoc src_loc = SrcLoc{});
    EXPORT void SampleMaski(GLuint maskNumber, GLbitfield mask, SrcLoc src_loc = SrcLoc{});
    EXPORT void SamplerParameterIiv(GLuint sampler, GLenum pname, GLintArr param, SrcLoc src_loc = SrcLoc{});
    EXPORT void SamplerParameterIuiv(GLuint sampler, GLenum pname, GLuintArr param, SrcLoc src_loc = SrcLoc{});
    EXPORT void SamplerParameterf(GLuint sampler, GLenum pname, GLfloat param, SrcLoc src_loc = SrcLoc{});
    EXPORT void SamplerParameterfv(GLuint sampler, GLenum pname, GLfloatArr param, SrcLoc src_loc = SrcLoc{});
    EXPORT void SamplerParameteri(GLuint sampler, GLenum pname, GLint param, SrcLoc src_loc = SrcLoc{});
    EXPORT void SamplerParameteriv(GLuint sampler, GLenum pname, GLintArr param, SrcLoc src_loc = SrcLoc{});
    EXPORT void Scissor(GLint x, GLint y, csr_GLsizei width, csr_GLsizei height, SrcLoc src_loc = SrcLoc{});
    EXPORT void ScissorArrayv(GLuint first, csr_GLsizei count, GLintArr v, SrcLoc src_loc = SrcLoc{});
    EXPORT void ScissorIndexed(GLuint index, GLint left, GLint bottom, csr_GLsizei width, csr_GLsizei height, SrcLoc src_loc = SrcLoc{});
    EXPORT void ScissorIndexedv(GLuint index, GLintArr v, SrcLoc src_loc = SrcLoc{});
    EXPORT void ShaderBinary(csr_GLsizei count, GLuintArr shaders, GLenum binaryFormat, GLdata binary, csr_GLsizei length, SrcLoc src_loc = SrcLoc{});
    EXPORT void ShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding, SrcLoc src_loc = SrcLoc{});
    EXPORT void SpecializeShader(GLuint shader, GLcharArr pEntryPoint, GLuint numSpecializationConstants, GLuintArr pConstantIndex, GLuintArr pConstantValue, SrcLoc src_loc = SrcLoc{});
    EXPORT void StencilFunc(GLenum func, GLint ref, GLuint mask, SrcLoc src_loc = SrcLoc{});
    EXPORT void StencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask, SrcLoc src_loc = SrcLoc{});
    EXPORT void StencilMask(GLuint mask, SrcLoc src_loc = SrcLoc{});
    EXPORT void StencilMaskSeparate(GLenum face, GLuint mask, SrcLoc src_loc = SrcLoc{});
    EXPORT void StencilOp(GLenum fail, GLenum zfail, GLenum zpass, SrcLoc src_loc = SrcLoc{});
    EXPORT void StencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass, SrcLoc src_loc = SrcLoc{});
    EXPORT void TexBuffer(GLenum target, GLenum internalformat, GLuint buffer, SrcLoc src_loc = SrcLoc{});
    EXPORT void TexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size, SrcLoc src_loc = SrcLoc{});
    EXPORT void TexImage1D(GLenum target, GLint level, GLint internalformat, csr_GLsizei width, GLint border, GLenum format, GLenum type, GLdata pixels, SrcLoc src_loc = SrcLoc{});
    EXPORT void TexImage2D(GLenum target, GLint level, GLint internalformat, csr_GLsizei width, csr_GLsizei height, GLint border, GLenum format, GLenum type, GLdata pixels, SrcLoc src_loc = SrcLoc{});
    EXPORT void TexImage2DMultisample(GLenum target, csr_GLsizei samples, GLenum internalformat, csr_GLsizei width, csr_GLsizei height, GLboolean fixedsamplelocations, SrcLoc src_loc = SrcLoc{});
    EXPORT void TexImage3D(GLenum target, GLint level, GLint internalformat, csr_GLsizei width, csr_GLsizei height, csr_GLsizei depth, GLint border, GLenum format, GLenum type, GLdata pixels, SrcLoc src_loc = SrcLoc{});
    EXPORT void TexImage3DMultisample(GLenum target, csr_GLsizei samples, GLenum internalformat, csr_GLsizei width, csr_GLsizei height, csr_GLsizei depth, GLboolean fixedsamplelocations, SrcLoc src_loc = SrcLoc{});
    EXPORT void TexParameterIiv(GLenum target, GLenum pname, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void TexParameterIuiv(GLenum target, GLenum pname, GLuintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void TexParameterf(GLenum target, GLenum pname, GLfloat param, SrcLoc src_loc = SrcLoc{});
    EXPORT void TexParameterfv(GLenum target, GLenum pname, GLfloatArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void TexParameteri(GLenum target, GLenum pname, GLint param, SrcLoc src_loc = SrcLoc{});
    EXPORT void TexParameteriv(GLenum target, GLenum pname, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void TexStorage1D(GLenum target, csr_GLsizei levels, GLenum internalformat, csr_GLsizei width, SrcLoc src_loc = SrcLoc{});
    EXPORT void TexStorage2D(GLenum target, csr_GLsizei levels, GLenum internalformat, csr_GLsizei width, csr_GLsizei height, SrcLoc src_loc = SrcLoc{});
    EXPORT void TexStorage2DMultisample(GLenum target, csr_GLsizei samples, GLenum internalformat, csr_GLsizei width, csr_GLsizei height, GLboolean fixedsamplelocations, SrcLoc src_loc = SrcLoc{});
    EXPORT void TexStorage3D(GLenum target, csr_GLsizei levels, GLenum internalformat, csr_GLsizei width, csr_GLsizei height, csr_GLsizei depth, SrcLoc src_loc = SrcLoc{});
    EXPORT void TexStorage3DMultisample(GLenum target, csr_GLsizei samples, GLenum internalformat, csr_GLsizei width, csr_GLsizei height, csr_GLsizei depth, GLboolean fixedsamplelocations, SrcLoc src_loc = SrcLoc{});
    EXPORT void TexSubImage1D(GLenum target, GLint level, GLint xoffset, csr_GLsizei width, GLenum format, GLenum type, GLdata pixels, SrcLoc src_loc = SrcLoc{});
    EXPORT void TexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, csr_GLsizei width, csr_GLsizei height, GLenum format, GLenum type, GLdata pixels, SrcLoc src_loc = SrcLoc{});
    EXPORT void TexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, csr_GLsizei width, csr_GLsizei height, csr_GLsizei depth, GLenum format, GLenum type, GLdata pixels, SrcLoc src_loc = SrcLoc{});
    EXPORT void TextureBarrier(SrcLoc src_loc = SrcLoc{});
    EXPORT void TextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer, SrcLoc src_loc = SrcLoc{});
    EXPORT void TextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size, SrcLoc src_loc = SrcLoc{});
    EXPORT void TextureParameterIiv(GLuint texture, GLenum pname, GLintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void TextureParameterIuiv(GLuint texture, GLenum pname, GLuintArr params, SrcLoc src_loc = SrcLoc{});
    EXPORT void TextureParameterf(GLuint texture, GLenum pname, GLfloat param, SrcLoc src_loc = SrcLoc{});
    EXPORT void TextureParameterfv(GLuint texture, GLenum pname, GLfloatArr param, SrcLoc src_loc = SrcLoc{});
    EXPORT void TextureParameteri(GLuint texture, GLenum pname, GLint param, SrcLoc src_loc = SrcLoc{});
    EXPORT void TextureParameteriv(GLuint texture, GLenum pname, GLintArr param, SrcLoc src_loc = SrcLoc{});
    EXPORT void TextureStorage1D(GLuint texture, csr_GLsizei levels, GLenum internalformat, csr_GLsizei width, SrcLoc src_loc = SrcLoc{});
    EXPORT void TextureStorage2D(GLuint texture, csr_GLsizei levels, GLenum internalformat, csr_GLsizei width, csr_GLsizei height, SrcLoc src_loc = SrcLoc{});
    EXPORT void TextureStorage2DMultisample(GLuint texture, csr_GLsizei samples, GLenum internalformat, csr_GLsizei width, csr_GLsizei height, GLboolean fixedsamplelocations, SrcLoc src_loc = SrcLoc{});
    EXPORT void TextureStorage3D(GLuint texture, csr_GLsizei levels, GLenum internalformat, csr_GLsizei width, csr_GLsizei height, csr_GLsizei depth, SrcLoc src_loc = SrcLoc{});
    EXPORT void TextureStorage3DMultisample(GLuint texture, csr_GLsizei samples, GLenum internalformat, csr_GLsizei width, csr_GLsizei height, csr_GLsizei depth, GLboolean fixedsamplelocations, SrcLoc src_loc = SrcLoc{});
    EXPORT void TextureSubImage1D(GLuint texture, GLint level, GLint xoffset, csr_GLsizei width, GLenum format, GLenum type, GLdata pixels, SrcLoc src_loc = SrcLoc{});
    EXPORT void TextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, csr_GLsizei width, csr_GLsizei height, GLenum format, GLenum type, GLdata pixels, SrcLoc src_loc = SrcLoc{});
    EXPORT void TextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, csr_GLsizei width, csr_GLsizei height, csr_GLsizei depth, GLenum format, GLenum type, GLdata pixels, SrcLoc src_loc = SrcLoc{});
    EXPORT void TextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers, SrcLoc src_loc = SrcLoc{});
    EXPORT void TransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer, SrcLoc src_loc = SrcLoc{});
    EXPORT void TransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform1d(GLint location, GLdouble x, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform1dv(GLint location, csr_GLsizei count, GLdoubleArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform1f(GLint location, GLfloat v0, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform1fv(GLint location, csr_GLsizei count, GLfloatArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform1i(GLint location, GLint v0, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform1iv(GLint location, csr_GLsizei count, GLintArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform1ui(GLint location, GLuint v0, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform1uiv(GLint location, csr_GLsizei count, GLuintArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform2d(GLint location, GLdouble x, GLdouble y, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform2dv(GLint location, csr_GLsizei count, GLdoubleArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform2f(GLint location, GLfloat v0, GLfloat v1, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform2fv(GLint location, csr_GLsizei count, GLfloatArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform2i(GLint location, GLint v0, GLint v1, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform2iv(GLint location, csr_GLsizei count, GLintArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform2ui(GLint location, GLuint v0, GLuint v1, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform2uiv(GLint location, csr_GLsizei count, GLuintArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform3dv(GLint location, csr_GLsizei count, GLdoubleArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform3fv(GLint location, csr_GLsizei count, GLfloatArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform3i(GLint location, GLint v0, GLint v1, GLint v2, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform3iv(GLint location, csr_GLsizei count, GLintArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform3uiv(GLint location, csr_GLsizei count, GLuintArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform4dv(GLint location, csr_GLsizei count, GLdoubleArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform4fv(GLint location, csr_GLsizei count, GLfloatArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform4iv(GLint location, csr_GLsizei count, GLintArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3, SrcLoc src_loc = SrcLoc{});
    EXPORT void Uniform4uiv(GLint location, csr_GLsizei count, GLuintArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void UniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding, SrcLoc src_loc = SrcLoc{});
    EXPORT void UniformMatrix2dv(GLint location, csr_GLsizei count, GLboolean transpose, GLdoubleArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void UniformMatrix2fv(GLint location, csr_GLsizei count, GLboolean transpose, GLfloatArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void UniformMatrix2x3dv(GLint location, csr_GLsizei count, GLboolean transpose, GLdoubleArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void UniformMatrix2x3fv(GLint location, csr_GLsizei count, GLboolean transpose, GLfloatArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void UniformMatrix2x4dv(GLint location, csr_GLsizei count, GLboolean transpose, GLdoubleArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void UniformMatrix2x4fv(GLint location, csr_GLsizei count, GLboolean transpose, GLfloatArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void UniformMatrix3dv(GLint location, csr_GLsizei count, GLboolean transpose, GLdoubleArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void UniformMatrix3fv(GLint location, csr_GLsizei count, GLboolean transpose, GLfloatArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void UniformMatrix3x2dv(GLint location, csr_GLsizei count, GLboolean transpose, GLdoubleArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void UniformMatrix3x2fv(GLint location, csr_GLsizei count, GLboolean transpose, GLfloatArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void UniformMatrix3x4dv(GLint location, csr_GLsizei count, GLboolean transpose, GLdoubleArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void UniformMatrix3x4fv(GLint location, csr_GLsizei count, GLboolean transpose, GLfloatArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void UniformMatrix4dv(GLint location, csr_GLsizei count, GLboolean transpose, GLdoubleArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void UniformMatrix4fv(GLint location, csr_GLsizei count, GLboolean transpose, GLfloatArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void UniformMatrix4x2dv(GLint location, csr_GLsizei count, GLboolean transpose, GLdoubleArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void UniformMatrix4x2fv(GLint location, csr_GLsizei count, GLboolean transpose, GLfloatArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void UniformMatrix4x3dv(GLint location, csr_GLsizei count, GLboolean transpose, GLdoubleArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void UniformMatrix4x3fv(GLint location, csr_GLsizei count, GLboolean transpose, GLfloatArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void UniformSubroutinesuiv(GLenum shadertype, csr_GLsizei count, GLuintArr indices, SrcLoc src_loc = SrcLoc{});
    EXPORT GLbooleanRes UnmapBuffer(GLenum target, SrcLoc src_loc = SrcLoc{});
    EXPORT GLbooleanRes UnmapNamedBuffer(GLuint buffer, SrcLoc src_loc = SrcLoc{});
    EXPORT void UseProgram(GLuint program, SrcLoc src_loc = SrcLoc{});
    EXPORT void UseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program, SrcLoc src_loc = SrcLoc{});
    EXPORT void ValidateProgram(GLuint program, SrcLoc src_loc = SrcLoc{});
    EXPORT void ValidateProgramPipeline(GLuint pipeline, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexArrayElementBuffer(GLuint vaobj, GLuint buffer, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, csr_GLsizei stride, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexArrayVertexBuffers(GLuint vaobj, GLuint first, csr_GLsizei count, GLuintArr buffers, GLintptrArr offsets, csra_GLsizeiArr strides, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib1d(GLuint index, GLdouble x, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib1dv(GLuint index, GLdoubleArr v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib1f(GLuint index, GLfloat x, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib1fv(GLuint index, GLfloatArr v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib1s(GLuint index, GLshort x, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib1sv(GLuint index, GLshort v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib2d(GLuint index, GLdouble x, GLdouble y, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib2dv(GLuint index, GLdoubleArr v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib2f(GLuint index, GLfloat x, GLfloat y, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib2fv(GLuint index, GLfloatArr v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib2s(GLuint index, GLshort x, GLshort y, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib2sv(GLuint index, GLshort v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib3dv(GLuint index, GLdoubleArr v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib3fv(GLuint index, GLfloatArr v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib3sv(GLuint index, GLshort v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4Nbv(GLuint index, GLbyte v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4Niv(GLuint index, GLintArr v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4Nsv(GLuint index, GLshort v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4Nubv(GLuint index, GLubyte v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4Nuiv(GLuint index, GLuintArr v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4Nusv(GLuint index, GLushort v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4bv(GLuint index, GLbyte v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4dv(GLuint index, GLdoubleArr v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4fv(GLuint index, GLfloatArr v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4iv(GLuint index, GLintArr v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4sv(GLuint index, GLshort v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4ubv(GLuint index, GLubyte v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4uiv(GLuint index, GLuintArr v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttrib4usv(GLuint index, GLushort v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribBinding(GLuint attribindex, GLuint bindingindex, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribDivisor(GLuint index, GLuint divisor, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribI1i(GLuint index, GLint x, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribI1iv(GLuint index, GLintArr v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribI1ui(GLuint index, GLuint x, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribI1uiv(GLuint index, GLuintArr v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribI2i(GLuint index, GLint x, GLint y, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribI2iv(GLuint index, GLintArr v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribI2ui(GLuint index, GLuint x, GLuint y, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribI2uiv(GLuint index, GLuintArr v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribI3i(GLuint index, GLint x, GLint y, GLint z, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribI3iv(GLuint index, GLintArr v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribI3uiv(GLuint index, GLuintArr v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribI4bv(GLuint index, GLbyte v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribI4iv(GLuint index, GLintArr v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribI4sv(GLuint index, GLshort v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribI4ubv(GLuint index, GLubyte v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribI4uiv(GLuint index, GLuintArr v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribI4usv(GLuint index, GLushort v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribIPointer(GLuint index, GLint size, GLenum type, csr_GLsizei stride, GLdata pointer, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribL1d(GLuint index, GLdouble x, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribL1dv(GLuint index, GLdoubleArr v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribL2d(GLuint index, GLdouble x, GLdouble y, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribL2dv(GLuint index, GLdoubleArr v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribL3dv(GLuint index, GLdoubleArr v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribL4dv(GLuint index, GLdoubleArr v, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribLPointer(GLuint index, GLint size, GLenum type, csr_GLsizei stride, GLdata pointer, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, GLuintArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, GLuintArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, GLuintArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, GLuintArr value, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, csr_GLsizei stride, GLdata pointer, SrcLoc src_loc = SrcLoc{});
    EXPORT void VertexBindingDivisor(GLuint bindingindex, GLuint divisor, SrcLoc src_loc = SrcLoc{});
    EXPORT void Viewport(GLint x, GLint y, csr_GLsizei width, csr_GLsizei height, SrcLoc src_loc = SrcLoc{});
    EXPORT void ViewportArrayv(GLuint first, csr_GLsizei count, GLfloatArr v, SrcLoc src_loc = SrcLoc{});
    EXPORT void ViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h, SrcLoc src_loc = SrcLoc{});
    EXPORT void ViewportIndexedfv(GLuint index, GLfloatArr v, SrcLoc src_loc = SrcLoc{});
    EXPORT void WaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout, SrcLoc src_loc = SrcLoc{});


    // EXPORT GLuintRes CreateShaderProgramv(GLenum type, GLsizei count, GLchar *const* strings, SrcLoc src_loc = SrcLoc{});
    // EXPORT void DebugMessageCallback(GLDEBUGPROC callback, GLdata userParam, SrcLoc src_loc = SrcLoc{});
    // EXPORT void GetUniformIndices(GLuint program, GLsizei uniformCount, GLchar *const* uniformNames, GLuintArr uniformIndices, SrcLoc src_loc = SrcLoc{});
    // EXPORT void ShaderSource(GLuint shader, GLsizei count, GLchar *const* string, GLintArr length, SrcLoc src_loc = SrcLoc{});
    // EXPORT void TransformFeedbackVaryings(GLuint program, GLsizei count, GLchar *const* varyings, GLenum bufferMode, SrcLoc src_loc = SrcLoc{});
    // EXPORT void* MapBuffer(GLenum target, GLenum access, SrcLoc src_loc = SrcLoc{});
    // EXPORT void* MapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access, SrcLoc src_loc = SrcLoc{});
    // EXPORT void* MapNamedBuffer(GLuint buffer, GLenum access, SrcLoc src_loc = SrcLoc{});
    // EXPORT void* MapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access, SrcLoc src_loc = SrcLoc{});
private:
    template<auto F, typename ... Args>
    auto _call(Args... args);

};

} // namespace GL

} // namespace glwpp