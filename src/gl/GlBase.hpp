#pragma once

#include <functional>
#include <memory>

#include "KHR/khrplatform.h"

#include "gl/Value.hpp"
#include "utils/Export.hpp"
#include "utils/SrcLoc.hpp"

struct __GLsync;

namespace glwpp {

class Context;

namespace GL {

using String = Value<std::string>;
using StringArr = Value<std::string[]>;

using Byte = Value<khronos_int8_t>;
using ByteArr = Value<khronos_int8_t[]>;

using Short = Value<khronos_int16_t>;
using ShortArr = Value<khronos_int16_t[]>;

using Sizei = Value<int>;
using SizeiArr = Value<int[]>;

using Int = Value<int>;
using IntArr = Value<int[]>;

using Int64 = Value<khronos_int64_t>;
using Int64Arr = Value<khronos_int64_t[]>;

using Sizeiptr = Value<khronos_ssize_t>;
using SizeiptrArr = Value<khronos_ssize_t[]>;

using Boolean = Value<unsigned char>;
using BooleanArr = Value<unsigned char[]>;

using Ubyte = Value<khronos_uint8_t>;
using UbyteArr = Value<khronos_uint8_t[]>;

using Ushort = Value<khronos_uint16_t>;
using UshortArr = Value<khronos_uint16_t[]>;

using Uint = Value<unsigned int>;
using UintArr = Value<unsigned int[]>;

using Bitfield = Value<unsigned int>;
using BitfieldArr = Value<unsigned int[]>;

using Enum = Value<unsigned int>;
using EnumArr = Value<unsigned int[]>;

using Uint64 = Value<khronos_uint64_t>;
using Uint64Arr = Value<khronos_uint64_t[]>;

using Intptr = Value<khronos_intptr_t>;
using IntptrArr = Value<khronos_intptr_t[]>;

using Float = Value<khronos_float_t>;
using FloatArr = Value<khronos_float_t[]>;

using Double = Value<double>;
using DoubleArr = Value<double[]>;

using Sync = Value<__GLsync*>;
using Data = Value<void>;
using DataPtr = Value<void*>;
using SrcLoc = SrcLoc;

class Gl {
public:
    Gl(const std::function<void(const SrcLoc&)>& debug) :
        _debug(debug){};
    Gl(const Gl&) = delete;
    Gl(const Gl&&) = delete;
    virtual ~Gl(){};
    
    EXPORT virtual void debug(const SrcLoc& src_loc) = 0;
    EXPORT virtual void callSimple(const std::function<void(Gl&)>& func) = 0;
    EXPORT auto call(auto func, auto&&... args){
        using R = std::invoke_result_t<decltype(func), Gl&, decltype(args)...>;

        if constexpr (std::is_same_v<R, void>){
            callSimple([func, args...](Gl& gl){
                func(gl, args...);
            });
        } else {
            Value<R> result;
            callSimple([result, func, args...](Gl& gl){
                *result = func(gl, args...);
            });
            return result;
        }
    }

    EXPORT virtual void ActiveShaderProgram(const Uint& pipeline, const Uint& program, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ActiveTexture(const Enum& texture, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void AttachShader(const Uint& program, const Uint& shader, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BeginConditionalRender(const Uint& id, const Enum& mode, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BeginQuery(const Enum& target, const Uint& id, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BeginQueryIndexed(const Enum& target, const Uint& index, const Uint& id, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BeginTransformFeedback(const Enum& primitiveMode, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BindAttribLocation(const Uint& program, const Uint& index, const String& name, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BindBuffer(const Enum& target, const Uint& buffer, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BindBufferBase(const Enum& target, const Uint& index, const Uint& buffer, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BindBufferRange(const Enum& target, const Uint& index, const Uint& buffer, const Intptr& offset, const Sizeiptr& size, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BindBuffersBase(const Enum& target, const Uint& first, const Sizei& count, const UintArr& buffers, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BindBuffersRange(const Enum& target, const Uint& first, const Sizei& count, const UintArr& buffers, const IntptrArr& offsets, const SizeiptrArr& sizes, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BindFragDataLocation(const Uint& program, const Uint& color, const String& name, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BindFragDataLocationIndexed(const Uint& program, const Uint& colorNumber, const Uint& index, const String& name, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BindFramebuffer(const Enum& target, const Uint& framebuffer, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BindImageTexture(const Uint& unit, const Uint& texture, const Int& level, const Boolean& layered, const Int& layer, const Enum& access, const Enum& format, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BindImageTextures(const Uint& first, const Sizei& count, const UintArr& textures, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BindProgramPipeline(const Uint& pipeline, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BindRenderbuffer(const Enum& target, const Uint& renderbuffer, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BindSampler(const Uint& unit, const Uint& sampler, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BindSamplers(const Uint& first, const Sizei& count, const UintArr& samplers, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BindTexture(const Enum& target, const Uint& texture, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BindTextureUnit(const Uint& unit, const Uint& texture, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BindTextures(const Uint& first, const Sizei& count, const UintArr& textures, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BindTransformFeedback(const Enum& target, const Uint& id, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BindVertexArray(const Uint& array, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BindVertexBuffer(const Uint& bindingindex, const Uint& buffer, const Intptr& offset, const Sizei& stride, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BindVertexBuffers(const Uint& first, const Sizei& count, const UintArr& buffers, const IntptrArr& offsets, const SizeiArr& strides, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BlendColor(const Float& red, const Float& green, const Float& blue, const Float& alpha, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BlendEquation(const Enum& mode, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BlendEquationSeparate(const Enum& modeRGB, const Enum& modeAlpha, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BlendEquationSeparatei(const Uint& buf, const Enum& modeRGB, const Enum& modeAlpha, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BlendEquationi(const Uint& buf, const Enum& mode, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BlendFunc(const Enum& sfactor, const Enum& dfactor, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BlendFuncSeparate(const Enum& sfactorRGB, const Enum& dfactorRGB, const Enum& sfactorAlpha, const Enum& dfactorAlpha, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BlendFuncSeparatei(const Uint& buf, const Enum& srcRGB, const Enum& dstRGB, const Enum& srcAlpha, const Enum& dstAlpha, const Enum& modeAlpha, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BlendFunci(const Uint& buf, const Enum& src, const Enum& dst, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BlitFramebuffer(const Int& srcX0, const Int& srcY0, const Int& srcX1, const Int& srcY1, const Int& dstX0, const Int& dstY0, const Int& dstX1, const Int& dstY1, const Bitfield& mask, const Enum& filter, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BlitNamedFramebuffer(const Uint& readFramebuffer, const Uint& drawFramebuffer, const Int& srcX0, const Int& srcY0, const Int& srcX1, const Int& srcY1, const Int& dstX0, const Int& dstY0, const Int& dstX1, const Int& dstY1, const Bitfield& mask, const Enum& filter, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BufferData(const Enum& target, const Sizeiptr& size, const Data& data, const Enum& usage, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BufferStorage(const Enum& target, const Sizeiptr& size, const Data& data, const Bitfield& flags, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void BufferSubData(const Enum& target, const Intptr& offset, const Sizeiptr& size, const Data& data, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Enum CheckFramebufferStatus(const Enum& target, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Enum CheckNamedFramebufferStatus(const Uint& framebuffer, const Enum& target, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ClampColor(const Enum& target, const Enum& clamp, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Clear(const Bitfield& mask, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ClearBufferData(const Enum& target, const Enum& internalformat, const Enum& format, const Enum& type, const Data& data, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ClearBufferSubData(const Enum& target, const Enum& internalformat, const Intptr& offset, const Sizeiptr& size, const Enum& format, const Enum& type, const Data& data, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ClearBufferfi(const Enum& buffer, const Int& drawbuffer, const Float& depth, const Int& stencil, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ClearBufferfv(const Enum& buffer, const Int& drawbuffer, const FloatArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ClearBufferiv(const Enum& buffer, const Int& drawbuffer, const IntArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ClearBufferuiv(const Enum& buffer, const Int& drawbuffer, const UintArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ClearColor(const Float& red, const Float& green, const Float& blue, const Float& alpha, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ClearDepth(const Double& depth, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ClearDepthf(const Float& d, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ClearNamedBufferData(const Uint& buffer, const Enum& internalformat, const Enum& format, const Enum& type, const Data& data, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ClearNamedBufferSubData(const Uint& buffer, const Enum& internalformat, const Intptr& offset, const Sizeiptr& size, const Enum& format, const Enum& type, const Data& data, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ClearNamedFramebufferfi(const Uint& framebuffer, const Enum& buffer, const Int& drawbuffer, const Float& depth, const Int& stencil, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ClearNamedFramebufferfv(const Uint& framebuffer, const Enum& buffer, const Int& drawbuffer, const FloatArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ClearNamedFramebufferiv(const Uint& framebuffer, const Enum& buffer, const Int& drawbuffer, const IntArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ClearNamedFramebufferuiv(const Uint& framebuffer, const Enum& buffer, const Int& drawbuffer, const UintArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ClearStencil(const Int& s, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ClearTexImage(const Uint& texture, const Int& level, const Enum& format, const Enum& type, const Data& data, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ClearTexSubImage(const Uint& texture, const Int& level, const Int& xoffset, const Int& yoffset, const Int& zoffset, const Sizei& width, const Sizei& height, const Sizei& depth, const Enum& format, const Enum& type, const Data& data, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Enum ClientWaitSync(const Sync& sync, const Bitfield& flags, const Uint64& timeout, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ClipControl(const Enum& origin, const Enum& depth, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ColorMask(const Boolean& red, const Boolean& green, const Boolean& blue, const Boolean& alpha, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ColorMaski(const Uint& index, const Boolean& r, const Boolean& g, const Boolean& b, const Boolean& a, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void CompileShader(const Uint& shader, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void CompressedTexImage1D(const Enum& target, const Int& level, const Enum& internalformat, const Sizei& width, const Int& border, const Sizei& imageSize, const Data& data, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void CompressedTexImage2D(const Enum& target, const Int& level, const Enum& internalformat, const Sizei& width, const Sizei& height, const Int& border, const Sizei& imageSize, const Data& data, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void CompressedTexImage3D(const Enum& target, const Int& level, const Enum& internalformat, const Sizei& width, const Sizei& height, const Sizei& depth, const Int& border, const Sizei& imageSize, const Data& data, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void CompressedTexSubImage1D(const Enum& target, const Int& level, const Int& xoffset, const Sizei& width, const Enum& format, const Sizei& imageSize, const Data& data, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void CompressedTexSubImage2D(const Enum& target, const Int& level, const Int& xoffset, const Int& yoffset, const Sizei& width, const Sizei& height, const Enum& format, const Sizei& imageSize, const Data& data, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void CompressedTexSubImage3D(const Enum& target, const Int& level, const Int& xoffset, const Int& yoffset, const Int& zoffset, const Sizei& width, const Sizei& height, const Sizei& depth, const Enum& format, const Sizei& imageSize, const Data& data, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void CompressedTextureSubImage1D(const Uint& texture, const Int& level, const Int& xoffset, const Sizei& width, const Enum& format, const Sizei& imageSize, const Data& data, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void CompressedTextureSubImage2D(const Uint& texture, const Int& level, const Int& xoffset, const Int& yoffset, const Sizei& width, const Sizei& height, const Enum& format, const Sizei& imageSize, const Data& data, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void CompressedTextureSubImage3D(const Uint& texture, const Int& level, const Int& xoffset, const Int& yoffset, const Int& zoffset, const Sizei& width, const Sizei& height, const Sizei& depth, const Enum& format, const Sizei& imageSize, const Data& data, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void CopyBufferSubData(const Enum& readTarget, const Enum& writeTarget, const Intptr& readOffset, const Intptr& writeOffset, const Sizeiptr& size, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void CopyImageSubData(const Uint& srcName, const Enum& srcTarget, const Int& srcLevel, const Int& srcX, const Int& srcY, const Int& srcZ, const Uint& dstName, const Enum& dstTarget, const Int& dstLevel, const Int& dstX, const Int& dstY, const Int& dstZ, const Sizei& srcWidth, const Sizei& srcHeight, const Sizei& srcDepth, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void CopyNamedBufferSubData(const Uint& readBuffer, const Uint& writeBuffer, const Intptr& readOffset, const Intptr& writeOffset, const Sizeiptr& size, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void CopyTexImage1D(const Enum& target, const Int& level, const Enum& internalformat, const Int& x, const Int& y, const Sizei& width, const Int& border, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void CopyTexImage2D(const Enum& target, const Int& level, const Enum& internalformat, const Int& x, const Int& y, const Sizei& width, const Sizei& height, const Int& border, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void CopyTexSubImage1D(const Enum& target, const Int& level, const Int& xoffset, const Int& x, const Int& y, const Sizei& width, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void CopyTexSubImage2D(const Enum& target, const Int& level, const Int& xoffset, const Int& yoffset, const Int& x, const Int& y, const Sizei& width, const Sizei& height, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void CopyTexSubImage3D(const Enum& target, const Int& level, const Int& xoffset, const Int& yoffset, const Int& zoffset, const Int& x, const Int& y, const Sizei& width, const Sizei& height, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void CopyTextureSubImage1D(const Uint& texture, const Int& level, const Int& xoffset, const Int& x, const Int& y, const Sizei& width, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void CopyTextureSubImage2D(const Uint& texture, const Int& level, const Int& xoffset, const Int& yoffset, const Int& x, const Int& y, const Sizei& width, const Sizei& height, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void CopyTextureSubImage3D(const Uint& texture, const Int& level, const Int& xoffset, const Int& yoffset, const Int& zoffset, const Int& x, const Int& y, const Sizei& width, const Sizei& height, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void CreateBuffers(const Sizei& n, const UintArr& dst, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void CreateFramebuffers(const Sizei& n, const UintArr& framebuffers, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Uint CreateProgram(const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void CreateProgramPipelines(const Sizei& n, const UintArr& pipelines, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void CreateQueries(const Enum& target, const Sizei& n, const UintArr& ids, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void CreateRenderbuffers(const Sizei& n, const UintArr& renderbuffers, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void CreateSamplers(const Sizei& n, const UintArr& samplers, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Uint CreateShader(const Enum& type, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Uint CreateShaderProgramv(const Enum& type, const Sizei& count, const StringArr& strings, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void CreateTextures(const Enum& target, const Sizei& n, const UintArr& textures, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void CreateTransformFeedbacks(const Sizei& n, const UintArr& ids, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void CreateVertexArrays(const Sizei& n, const UintArr& arrays, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void CullFace(const Enum& mode, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DebugMessageControl(const Enum& source, const Enum& type, const Enum& severity, const Sizei& count, const UintArr& ids, const Boolean& enabled, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DebugMessageInsert(const Enum& source, const Enum& type, const Uint& id, const Enum& severity, const Sizei& length, const String& buf, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DeleteBuffers(const Sizei& n, const UintArr& buffers, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DeleteFramebuffers(const Sizei& n, const UintArr& framebuffers, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DeleteProgram(const Uint& program, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DeleteProgramPipelines(const Sizei& n, const UintArr& pipelines, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DeleteQueries(const Sizei& n, const UintArr& ids, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DeleteRenderbuffers(const Sizei& n, const UintArr& renderbuffers, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DeleteSamplers(const Sizei& count, const UintArr& samplers, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DeleteShader(const Uint& shader, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DeleteSync(const Sync& sync, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DeleteTextures(const Sizei& n, const UintArr& textures, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DeleteTransformFeedbacks(const Sizei& n, const UintArr& ids, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DeleteVertexArrays(const Sizei& n, const UintArr& arrays, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DepthFunc(const Enum& func, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DepthMask(const Boolean& flag, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DepthRange(const Double& n, const Double& f, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DepthRangeArrayv(const Uint& first, const Sizei& count, const DoubleArr& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DepthRangeIndexed(const Uint& index, const Double& n, const Double& f, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DepthRangef(const Float& n, const Float& f, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DetachShader(const Uint& program, const Uint& shader, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Disable(const Enum& cap, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DisableVertexArrayAttrib(const Uint& vaobj, const Uint& index, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DisableVertexAttribArray(const Uint& index, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Disablei(const Enum& target, const Uint& index, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DispatchCompute(const Uint& num_groups_x, const Uint& num_groups_y, const Uint& num_groups_z, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DispatchComputeIndirect(const Intptr& indirect, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DrawArrays(const Enum& mode, const Int& first, const Sizei& count, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DrawArraysIndirect(const Enum& mode, const Data& indirect, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DrawArraysInstanced(const Enum& mode, const Int& first, const Sizei& count, const Sizei& instancecount, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DrawArraysInstancedBaseInstance(const Enum& mode, const Int& first, const Sizei& count, const Sizei& instancecount, const Uint& baseinstance, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DrawBuffer(const Enum& buf, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DrawBuffers(const Sizei& n, const EnumArr& bufs, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DrawElements(const Enum& mode, const Sizei& count, const Enum& type, const Data& indices, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DrawElementsBaseVertex(const Enum& mode, const Sizei& count, const Enum& type, const Data& indices, const Int& basevertex, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DrawElementsIndirect(const Enum& mode, const Enum& type, const Data& indirect, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DrawElementsInstanced(const Enum& mode, const Sizei& count, const Enum& type, const Data& indices, const Sizei& instancecount, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DrawElementsInstancedBaseInstance(const Enum& mode, const Sizei& count, const Enum& type, const Data& indices, const Sizei& instancecount, const Uint& baseinstance, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DrawElementsInstancedBaseVertex(const Enum& mode, const Sizei& count, const Enum& type, const Data& indices, const Sizei& instancecount, const Int& basevertex, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DrawElementsInstancedBaseVertexBaseInstance(const Enum& mode, const Sizei& count, const Enum& type, const Data& indices, const Sizei& instancecount, const Int& basevertex, const Uint& baseinstance, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DrawRangeElements(const Enum& mode, const Uint& start, const Uint& end, const Sizei& count, const Enum& type, const Data& indices, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DrawRangeElementsBaseVertex(const Enum& mode, const Uint& start, const Uint& end, const Sizei& count, const Enum& type, const Data& indices, const Int& basevertex, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DrawTransformFeedback(const Enum& mode, const Uint& id, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DrawTransformFeedbackInstanced(const Enum& mode, const Uint& id, const Sizei& instancecount, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DrawTransformFeedbackStream(const Enum& mode, const Uint& id, const Uint& stream, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void DrawTransformFeedbackStreamInstanced(const Enum& mode, const Uint& id, const Uint& stream, const Sizei& instancecount, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Enable(const Enum& cap, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void EnableVertexArrayAttrib(const Uint& vaobj, const Uint& index, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void EnableVertexAttribArray(const Uint& index, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Enablei(const Enum& target, const Uint& index, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void EndConditionalRender(const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void EndQuery(const Enum& target, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void EndQueryIndexed(const Enum& target, const Uint& index, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void EndTransformFeedback(const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Sync FenceSync(const Enum& condition, const Bitfield& flags, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Finish(const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Flush(const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void FlushMappedBufferRange(const Enum& target, const Intptr& offset, const Sizeiptr& length, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void FlushMappedNamedBufferRange(const Uint& buffer, const Intptr& offset, const Sizeiptr& length, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void FramebufferParameteri(const Enum& target, const Enum& pname, const Int& param, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void FramebufferRenderbuffer(const Enum& target, const Enum& attachment, const Enum& renderbuffertarget, const Uint& renderbuffer, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void FramebufferTexture(const Enum& target, const Enum& attachment, const Uint& texture, const Int& level, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void FramebufferTexture1D(const Enum& target, const Enum& attachment, const Enum& textarget, const Uint& texture, const Int& level, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void FramebufferTexture2D(const Enum& target, const Enum& attachment, const Enum& textarget, const Uint& texture, const Int& level, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void FramebufferTexture3D(const Enum& target, const Enum& attachment, const Enum& textarget, const Uint& texture, const Int& level, const Int& zoffset, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void FramebufferTextureLayer(const Enum& target, const Enum& attachment, const Uint& texture, const Int& level, const Int& layer, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void FrontFace(const Enum& mode, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GenBuffers(const Sizei& n, const UintArr& buffers, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GenFramebuffers(const Sizei& n, const UintArr& framebuffers, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GenProgramPipelines(const Sizei& n, const UintArr& pipelines, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GenQueries(const Sizei& n, const UintArr& ids, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GenRenderbuffers(const Sizei& n, const UintArr& renderbuffers, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GenSamplers(const Sizei& count, const UintArr& samplers, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GenTextures(const Sizei& n, const UintArr& textures, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GenTransformFeedbacks(const Sizei& n, const UintArr& ids, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GenVertexArrays(const Sizei& n, const UintArr& arrays, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GenerateMipmap(const Enum& target, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GenerateTextureMipmap(const Uint& texture, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetActiveAtomicCounterBufferiv(const Uint& program, const Uint& bufferIndex, const Enum& pname, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetActiveAttrib(const Uint& program, const Uint& index, const Sizei& bufSize, const Sizei& length, const Int& size, const Enum& type, const String& name, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetActiveSubroutineName(const Uint& program, const Enum& shadertype, const Uint& index, const Sizei& bufSize, const Sizei& length, const String& name, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetActiveSubroutineUniformName(const Uint& program, const Enum& shadertype, const Uint& index, const Sizei& bufSize, const Sizei& length, const String& name, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetActiveSubroutineUniformiv(const Uint& program, const Enum& shadertype, const Uint& index, const Enum& pname, const IntArr& values, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetActiveUniform(const Uint& program, const Uint& index, const Sizei& bufSize, const Sizei& length, const Int& size, const Enum& type, const String& name, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetActiveUniformBlockName(const Uint& program, const Uint& uniformBlockIndex, const Sizei& bufSize, const Sizei& length, const String& uniformBlockName, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetActiveUniformBlockiv(const Uint& program, const Uint& uniformBlockIndex, const Enum& pname, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetActiveUniformName(const Uint& program, const Uint& uniformIndex, const Sizei& bufSize, const Sizei& length, const String& uniformName, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetActiveUniformsiv(const Uint& program, const Sizei& uniformCount, const UintArr& uniformIndices, const Enum& pname, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetAttachedShaders(const Uint& program, const Sizei& maxCount, const SizeiArr& count, const UintArr& shaders, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Int GetAttribLocation(const Uint& program, const String& name, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetBooleani_v(const Enum& target, const Uint& index, const BooleanArr& data, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetBooleanv(const Enum& pname, const BooleanArr& data, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetBufferParameteri64v(const Enum& target, const Enum& pname, const Int64Arr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetBufferParameteriv(const Enum& target, const Enum& pname, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetBufferPointerv(const Enum& target, const Enum& pname, const DataPtr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetBufferSubData(const Enum& target, const Intptr& offset, const Sizeiptr& size, const Data& data, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetCompressedTexImage(const Enum& target, const Int& level, const Data& img, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetCompressedTextureImage(const Uint& texture, const Int& level, const Sizei& bufSize, const Data& pixels, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetCompressedTextureSubImage(const Uint& texture, const Int& level, const Int& xoffset, const Int& yoffset, const Int& zoffset, const Sizei& width, const Sizei& height, const Sizei& depth, const Sizei& bufSize, const Data& pixels, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Uint GetDebugMessageLog(const Uint& count, const Sizei& bufSize, const EnumArr& sources, const EnumArr& types, const UintArr& ids, const EnumArr& severities, const Sizei& lengths, const String& messageLog, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetDoublei_v(const Enum& target, const Uint& index, const DoubleArr& data, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetDoublev(const Enum& pname, const DoubleArr& data, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Enum GetError(const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetFloati_v(const Enum& target, const Uint& index, const FloatArr& data, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetFloatv(const Enum& pname, const FloatArr& data, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Int GetFragDataIndex(const Uint& program, const String& name, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Int GetFragDataLocation(const Uint& program, const String& name, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetFramebufferAttachmentParameteriv(const Enum& target, const Enum& attachment, const Enum& pname, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetFramebufferParameteriv(const Enum& target, const Enum& pname, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Enum GetGraphicsResetStatus(const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetInteger64i_v(const Enum& target, const Uint& index, const Int64Arr& data, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetInteger64v(const Enum& pname, const Int64Arr& data, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetIntegeri_v(const Enum& target, const Uint& index, const IntArr& data, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetIntegerv(const Enum& pname, const IntArr& data, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetInternalformati64v(const Enum& target, const Enum& internalformat, const Enum& pname, const Sizei& count, const Int64Arr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetInternalformativ(const Enum& target, const Enum& internalformat, const Enum& pname, const Sizei& count, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetMultisamplefv(const Enum& pname, const Uint& index, const FloatArr& val, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetNamedBufferParameteri64v(const Uint& buffer, const Enum& pname, const Int64Arr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetNamedBufferParameteriv(const Uint& buffer, const Enum& pname, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetNamedBufferPointerv(const Uint& buffer, const Enum& pname, const DataPtr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetNamedBufferSubData(const Uint& buffer, const Intptr& offset, const Sizeiptr& size, const Data& data, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetNamedFramebufferAttachmentParameteriv(const Uint& framebuffer, const Enum& attachment, const Enum& pname, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetNamedFramebufferParameteriv(const Uint& framebuffer, const Enum& pname, const IntArr& param, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetNamedRenderbufferParameteriv(const Uint& renderbuffer, const Enum& pname, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetObjectLabel(const Enum& identifier, const Uint& name, const Sizei& bufSize, const Sizei& length, const String& label, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetObjectPtrLabel(const Data& ptr, const Sizei& bufSize, const Sizei& length, const String& label, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetPointerv(const Enum& pname, const DataPtr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetProgramBinary(const Uint& program, const Sizei& bufSize, const Sizei& length, const EnumArr& binaryFormat, const Data& binary, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetProgramInfoLog(const Uint& program, const Sizei& bufSize, const Sizei& length, const String& infoLog, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetProgramInterfaceiv(const Uint& program, const Enum& programGlBase, const Enum& pname, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetProgramPipelineInfoLog(const Uint& pipeline, const Sizei& bufSize, const Sizei& length, const String& infoLog, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetProgramPipelineiv(const Uint& pipeline, const Enum& pname, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Uint GetProgramResourceIndex(const Uint& program, const Enum& programGlBase, const String& name, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Int GetProgramResourceLocation(const Uint& program, const Enum& programGlBase, const String& name, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Int GetProgramResourceLocationIndex(const Uint& program, const Enum& programGlBase, const String& name, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetProgramResourceName(const Uint& program, const Enum& programGlBase, const Uint& index, const Sizei& bufSize, const Sizei& length, const String& name, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetProgramResourceiv(const Uint& program, const Enum& programGlBase, const Uint& index, const Sizei& propCount, const EnumArr& props, const Sizei& count, const Sizei& length, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetProgramStageiv(const Uint& program, const Enum& shadertype, const Enum& pname, const IntArr& values, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetProgramiv(const Uint& program, const Enum& pname, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetQueryBufferObjecti64v(const Uint& id, const Uint& buffer, const Enum& pname, const Intptr& offset, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetQueryBufferObjectiv(const Uint& id, const Uint& buffer, const Enum& pname, const Intptr& offset, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetQueryBufferObjectui64v(const Uint& id, const Uint& buffer, const Enum& pname, const Intptr& offset, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetQueryBufferObjectuiv(const Uint& id, const Uint& buffer, const Enum& pname, const Intptr& offset, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetQueryIndexediv(const Enum& target, const Uint& index, const Enum& pname, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetQueryObjecti64v(const Uint& id, const Enum& pname, const Int64Arr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetQueryObjectiv(const Uint& id, const Enum& pname, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetQueryObjectui64v(const Uint& id, const Enum& pname, const Uint64Arr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetQueryObjectuiv(const Uint& id, const Enum& pname, const UintArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetQueryiv(const Enum& target, const Enum& pname, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetRenderbufferParameteriv(const Enum& target, const Enum& pname, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetSamplerParameterIiv(const Uint& sampler, const Enum& pname, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetSamplerParameterIuiv(const Uint& sampler, const Enum& pname, const UintArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetSamplerParameterfv(const Uint& sampler, const Enum& pname, const FloatArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetSamplerParameteriv(const Uint& sampler, const Enum& pname, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetShaderInfoLog(const Uint& shader, const Sizei& bufSize, const Sizei& length, const String& infoLog, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetShaderPrecisionFormat(const Enum& shadertype, const Enum& precisiontype, const IntArr& range, const IntArr& precision, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetShaderSource(const Uint& shader, const Sizei& bufSize, const Sizei& length, const String& source, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetShaderiv(const Uint& shader, const Enum& pname, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual String GetString(const Enum& name, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual String GetStringi(const Enum& name, const Uint& index, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Uint GetSubroutineIndex(const Uint& program, const Enum& shadertype, const String& name, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Int GetSubroutineUniformLocation(const Uint& program, const Enum& shadertype, const String& name, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetSynciv(const Sync& sync, const Enum& pname, const Sizei& count, const Sizei& length, const IntArr& values, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetTexImage(const Enum& target, const Int& level, const Enum& format, const Enum& type, const Data& pixels, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetTexLevelParameterfv(const Enum& target, const Int& level, const Enum& pname, const FloatArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetTexLevelParameteriv(const Enum& target, const Int& level, const Enum& pname, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetTexParameterIiv(const Enum& target, const Enum& pname, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetTexParameterIuiv(const Enum& target, const Enum& pname, const UintArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetTexParameterfv(const Enum& target, const Enum& pname, const FloatArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetTexParameteriv(const Enum& target, const Enum& pname, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetTextureImage(const Uint& texture, const Int& level, const Enum& format, const Enum& type, const Sizei& bufSize, const Data& pixels, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetTextureLevelParameterfv(const Uint& texture, const Int& level, const Enum& pname, const FloatArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetTextureLevelParameteriv(const Uint& texture, const Int& level, const Enum& pname, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetTextureParameterIiv(const Uint& texture, const Enum& pname, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetTextureParameterIuiv(const Uint& texture, const Enum& pname, const UintArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetTextureParameterfv(const Uint& texture, const Enum& pname, const FloatArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetTextureParameteriv(const Uint& texture, const Enum& pname, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetTextureSubImage(const Uint& texture, const Int& level, const Int& xoffset, const Int& yoffset, const Int& zoffset, const Sizei& width, const Sizei& height, const Sizei& depth, const Enum& format, const Enum& type, const Sizei& bufSize, const Data& pixels, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetTransformFeedbackVarying(const Uint& program, const Uint& index, const Sizei& bufSize, const Sizei& length, const SizeiArr& size, const EnumArr& type, const String& name, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetTransformFeedbacki64_v(const Uint& xfb, const Enum& pname, const Uint& index, const Int64Arr& param, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetTransformFeedbacki_v(const Uint& xfb, const Enum& pname, const Uint& index, const IntArr& param, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetTransformFeedbackiv(const Uint& xfb, const Enum& pname, const IntArr& param, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Uint GetUniformBlockIndex(const Uint& program, const String& uniformBlockName, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Int GetUniformLocation(const Uint& program, const String& name, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetUniformSubroutineuiv(const Enum& shadertype, const Int& location, const UintArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetUniformdv(const Uint& program, const Int& location, const DoubleArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetUniformfv(const Uint& program, const Int& location, const FloatArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetUniformiv(const Uint& program, const Int& location, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetUniformuiv(const Uint& program, const Int& location, const UintArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetVertexArrayIndexed64iv(const Uint& vaobj, const Uint& index, const Enum& pname, const Int64Arr& param, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetVertexArrayIndexediv(const Uint& vaobj, const Uint& index, const Enum& pname, const IntArr& param, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetVertexArrayiv(const Uint& vaobj, const Enum& pname, const IntArr& param, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetVertexAttribIiv(const Uint& index, const Enum& pname, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetVertexAttribIuiv(const Uint& index, const Enum& pname, const UintArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetVertexAttribLdv(const Uint& index, const Enum& pname, const DoubleArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetVertexAttribPointerv(const Uint& index, const Enum& pname, const DataPtr& pointer, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetVertexAttribdv(const Uint& index, const Enum& pname, const DoubleArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetVertexAttribfv(const Uint& index, const Enum& pname, const FloatArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetVertexAttribiv(const Uint& index, const Enum& pname, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetnCompressedTexImage(const Enum& target, const Int& lod, const Sizei& bufSize, const Data& pixels, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetnTexImage(const Enum& target, const Int& level, const Enum& format, const Enum& type, const Sizei& bufSize, const Data& pixels, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetnUniformdv(const Uint& program, const Int& location, const Sizei& bufSize, const DoubleArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetnUniformfv(const Uint& program, const Int& location, const Sizei& bufSize, const FloatArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetnUniformiv(const Uint& program, const Int& location, const Sizei& bufSize, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void GetnUniformuiv(const Uint& program, const Int& location, const Sizei& bufSize, const UintArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Hint(const Enum& target, const Enum& mode, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void InvalidateBufferData(const Uint& buffer, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void InvalidateBufferSubData(const Uint& buffer, const Intptr& offset, const Sizeiptr& length, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void InvalidateFramebuffer(const Enum& target, const Sizei& numAttachments, const EnumArr& attachments, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void InvalidateNamedFramebufferData(const Uint& framebuffer, const Sizei& numAttachments, const EnumArr& attachments, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void InvalidateNamedFramebufferSubData(const Uint& framebuffer, const Sizei& numAttachments, const EnumArr& attachments, const Int& x, const Int& y, const Sizei& width, const Sizei& height, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void InvalidateSubFramebuffer(const Enum& target, const Sizei& numAttachments, const EnumArr& attachments, const Int& x, const Int& y, const Sizei& width, const Sizei& height, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void InvalidateTexImage(const Uint& texture, const Int& level, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void InvalidateTexSubImage(const Uint& texture, const Int& level, const Int& xoffset, const Int& yoffset, const Int& zoffset, const Sizei& width, const Sizei& height, const Sizei& depth, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Boolean IsBuffer(const Uint& buffer, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Boolean IsEnabled(const Enum& cap, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Boolean IsEnabledi(const Enum& target, const Uint& index, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Boolean IsFramebuffer(const Uint& framebuffer, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Boolean IsProgram(const Uint& program, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Boolean IsProgramPipeline(const Uint& pipeline, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Boolean IsQuery(const Uint& id, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Boolean IsRenderbuffer(const Uint& renderbuffer, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Boolean IsSampler(const Uint& sampler, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Boolean IsShader(const Uint& shader, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Boolean IsSync(const Sync& sync, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Boolean IsTexture(const Uint& texture, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Boolean IsTransformFeedback(const Uint& id, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Boolean IsVertexArray(const Uint& array, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void LineWidth(const Float& width, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void LinkProgram(const Uint& program, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void LogicOp(const Enum& opcode, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual DataPtr MapBuffer(const Enum& target, const Enum& access, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual DataPtr MapBufferRange(const Enum& target, const Intptr& offset, const Sizeiptr& length, const Bitfield& access, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual DataPtr MapNamedBuffer(const Uint& buffer, const Enum& access, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual DataPtr MapNamedBufferRange(const Uint& buffer, const Intptr& offset, const Sizeiptr& length, const Bitfield& access, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void MemoryBarrier(const Bitfield& barriers, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void MemoryBarrierByRegion(const Bitfield& barriers, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void MinSampleShading(const Float& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void MultiDrawArrays(const Enum& mode, const IntArr& first, const SizeiArr& count, const Sizei& drawcount, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void MultiDrawArraysIndirect(const Enum& mode, const Data& indirect, const Sizei& drawcount, const Sizei& stride, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void MultiDrawArraysIndirectCount(const Enum& mode, const Data& indirect, const Intptr& drawcount, const Sizei& maxdrawcount, const Sizei& stride, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void MultiDrawElements(const Enum& mode, const SizeiArr& count, const Enum& type, const DataPtr& indices, const Sizei& drawcount, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void MultiDrawElementsBaseVertex(const Enum& mode, const SizeiArr& count, const Enum& type, const DataPtr& indices, const Sizei& drawcount, const IntArr& basevertex, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void MultiDrawElementsIndirect(const Enum& mode, const Enum& type, const Data& indirect, const Sizei& drawcount, const Sizei& stride, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void MultiDrawElementsIndirectCount(const Enum& mode, const Enum& type, const Data& indirect, const Intptr& drawcount, const Sizei& maxdrawcount, const Sizei& stride, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void NamedBufferData(const Uint& buffer, const Sizeiptr& size, const Data& data, const Enum& usage, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void NamedBufferStorage(const Uint& buffer, const Sizeiptr& size, const Data& data, const Bitfield& flags, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void NamedBufferSubData(const Uint& buffer, const Intptr& offset, const Sizeiptr& size, const Data& data, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void NamedFramebufferDrawBuffer(const Uint& framebuffer, const Enum& buf, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void NamedFramebufferDrawBuffers(const Uint& framebuffer, const Sizei& n, const EnumArr& bufs, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void NamedFramebufferParameteri(const Uint& framebuffer, const Enum& pname, const Int& param, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void NamedFramebufferReadBuffer(const Uint& framebuffer, const Enum& src, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void NamedFramebufferRenderbuffer(const Uint& framebuffer, const Enum& attachment, const Enum& renderbuffertarget, const Uint& renderbuffer, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void NamedFramebufferTexture(const Uint& framebuffer, const Enum& attachment, const Uint& texture, const Int& level, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void NamedFramebufferTextureLayer(const Uint& framebuffer, const Enum& attachment, const Uint& texture, const Int& level, const Int& layer, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void NamedRenderbufferStorage(const Uint& renderbuffer, const Enum& internalformat, const Sizei& width, const Sizei& height, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void NamedRenderbufferStorageMultisample(const Uint& renderbuffer, const Sizei& samples, const Enum& internalformat, const Sizei& width, const Sizei& height, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ObjectLabel(const Enum& identifier, const Uint& name, const Sizei& length, const String& label, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ObjectPtrLabel(const Data& ptr, const Sizei& length, const String& label, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void PatchParameterfv(const Enum& pname, const FloatArr& values, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void PatchParameteri(const Enum& pname, const Int& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void PauseTransformFeedback(const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void PixelStoref(const Enum& pname, const Float& param, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void PixelStorei(const Enum& pname, const Int& param, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void PointParameterf(const Enum& pname, const Float& param, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void PointParameterfv(const Enum& pname, const FloatArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void PointParameteri(const Enum& pname, const Int& param, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void PointParameteriv(const Enum& pname, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void PointSize(const Float& size, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void PolygonMode(const Enum& face, const Enum& mode, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void PolygonOffset(const Float& factor, const Float& units, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void PolygonOffsetClamp(const Float& factor, const Float& units, const Float& clamp, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void PopDebugGroup(const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void PrimitiveRestartIndex(const Uint& index, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramBinary(const Uint& program, const Enum& binaryFormat, const Data& binary, const Sizei& length, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramParameteri(const Uint& program, const Enum& pname, const Int& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform1d(const Uint& program, const Int& location, const Double& v0, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform1dv(const Uint& program, const Int& location, const Sizei& count, const DoubleArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform1f(const Uint& program, const Int& location, const Float& v0, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform1fv(const Uint& program, const Int& location, const Sizei& count, const FloatArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform1i(const Uint& program, const Int& location, const Int& v0, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform1iv(const Uint& program, const Int& location, const Sizei& count, const IntArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform1ui(const Uint& program, const Int& location, const Uint& v0, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform1uiv(const Uint& program, const Int& location, const Sizei& count, const UintArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform2d(const Uint& program, const Int& location, const Double& v0, const Double& v1, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform2dv(const Uint& program, const Int& location, const Sizei& count, const DoubleArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform2f(const Uint& program, const Int& location, const Float& v0, const Float& v1, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform2fv(const Uint& program, const Int& location, const Sizei& count, const FloatArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform2i(const Uint& program, const Int& location, const Int& v0, const Int& v1, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform2iv(const Uint& program, const Int& location, const Sizei& count, const IntArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform2ui(const Uint& program, const Int& location, const Uint& v0, const Uint& v1, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform2uiv(const Uint& program, const Int& location, const Sizei& count, const UintArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform3d(const Uint& program, const Int& location, const Double& v0, const Double& v1, const Double& v2, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform3dv(const Uint& program, const Int& location, const Sizei& count, const DoubleArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform3f(const Uint& program, const Int& location, const Float& v0, const Float& v1, const Float& v2, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform3fv(const Uint& program, const Int& location, const Sizei& count, const FloatArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform3i(const Uint& program, const Int& location, const Int& v0, const Int& v1, const Int& v2, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform3iv(const Uint& program, const Int& location, const Sizei& count, const IntArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform3ui(const Uint& program, const Int& location, const Uint& v0, const Uint& v1, const Uint& v2, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform3uiv(const Uint& program, const Int& location, const Sizei& count, const UintArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform4d(const Uint& program, const Int& location, const Double& v0, const Double& v1, const Double& v2, const Double& v3, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform4dv(const Uint& program, const Int& location, const Sizei& count, const DoubleArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform4f(const Uint& program, const Int& location, const Float& v0, const Float& v1, const Float& v2, const Float& v3, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform4fv(const Uint& program, const Int& location, const Sizei& count, const FloatArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform4i(const Uint& program, const Int& location, const Int& v0, const Int& v1, const Int& v2, const Int& v3, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform4iv(const Uint& program, const Int& location, const Sizei& count, const IntArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform4ui(const Uint& program, const Int& location, const Uint& v0, const Uint& v1, const Uint& v2, const Uint& v3, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniform4uiv(const Uint& program, const Int& location, const Sizei& count, const UintArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniformMatrix2dv(const Uint& program, const Int& location, const Sizei& count, const Boolean& transpose, const DoubleArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniformMatrix2fv(const Uint& program, const Int& location, const Sizei& count, const Boolean& transpose, const FloatArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniformMatrix2x3dv(const Uint& program, const Int& location, const Sizei& count, const Boolean& transpose, const DoubleArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniformMatrix2x3fv(const Uint& program, const Int& location, const Sizei& count, const Boolean& transpose, const FloatArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniformMatrix2x4dv(const Uint& program, const Int& location, const Sizei& count, const Boolean& transpose, const DoubleArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniformMatrix2x4fv(const Uint& program, const Int& location, const Sizei& count, const Boolean& transpose, const FloatArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniformMatrix3dv(const Uint& program, const Int& location, const Sizei& count, const Boolean& transpose, const DoubleArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniformMatrix3fv(const Uint& program, const Int& location, const Sizei& count, const Boolean& transpose, const FloatArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniformMatrix3x2dv(const Uint& program, const Int& location, const Sizei& count, const Boolean& transpose, const DoubleArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniformMatrix3x2fv(const Uint& program, const Int& location, const Sizei& count, const Boolean& transpose, const FloatArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniformMatrix3x4dv(const Uint& program, const Int& location, const Sizei& count, const Boolean& transpose, const DoubleArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniformMatrix3x4fv(const Uint& program, const Int& location, const Sizei& count, const Boolean& transpose, const FloatArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniformMatrix4dv(const Uint& program, const Int& location, const Sizei& count, const Boolean& transpose, const DoubleArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniformMatrix4fv(const Uint& program, const Int& location, const Sizei& count, const Boolean& transpose, const FloatArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniformMatrix4x2dv(const Uint& program, const Int& location, const Sizei& count, const Boolean& transpose, const DoubleArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniformMatrix4x2fv(const Uint& program, const Int& location, const Sizei& count, const Boolean& transpose, const FloatArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniformMatrix4x3dv(const Uint& program, const Int& location, const Sizei& count, const Boolean& transpose, const DoubleArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProgramUniformMatrix4x3fv(const Uint& program, const Int& location, const Sizei& count, const Boolean& transpose, const FloatArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ProvokingVertex(const Enum& mode, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void PushDebugGroup(const Enum& source, const Uint& id, const Sizei& length, const String& message, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void QueryCounter(const Uint& id, const Enum& target, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ReadBuffer(const Enum& src, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ReadPixels(const Int& x, const Int& y, const Sizei& width, const Sizei& height, const Enum& format, const Enum& type, const Data& pixels, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ReadnPixels(const Int& x, const Int& y, const Sizei& width, const Sizei& height, const Enum& format, const Enum& type, const Sizei& bufSize, const Data& data, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ReleaseShaderCompiler(const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void RenderbufferStorage(const Enum& target, const Enum& internalformat, const Sizei& width, const Sizei& height, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void RenderbufferStorageMultisample(const Enum& target, const Sizei& samples, const Enum& internalformat, const Sizei& width, const Sizei& height, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ResumeTransformFeedback(const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void SampleCoverage(const Float& value, const Boolean& invert, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void SampleMaski(const Uint& maskNumber, const Bitfield& mask, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void SamplerParameterIiv(const Uint& sampler, const Enum& pname, const IntArr& param, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void SamplerParameterIuiv(const Uint& sampler, const Enum& pname, const UintArr& param, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void SamplerParameterf(const Uint& sampler, const Enum& pname, const Float& param, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void SamplerParameterfv(const Uint& sampler, const Enum& pname, const FloatArr& param, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void SamplerParameteri(const Uint& sampler, const Enum& pname, const Int& param, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void SamplerParameteriv(const Uint& sampler, const Enum& pname, const IntArr& param, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Scissor(const Int& x, const Int& y, const Sizei& width, const Sizei& height, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ScissorArrayv(const Uint& first, const Sizei& count, const IntArr& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ScissorIndexed(const Uint& index, const Int& left, const Int& bottom, const Sizei& width, const Sizei& height, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ScissorIndexedv(const Uint& index, const IntArr& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ShaderBinary(const Sizei& count, const UintArr& shaders, const Enum& binaryFormat, const Data& binary, const Sizei& length, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ShaderSource(const Uint& shader, const Sizei& count, const StringArr& strings, const IntArr& lengths, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ShaderStorageBlockBinding(const Uint& program, const Uint& storageBlockIndex, const Uint& storageBlockBinding, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void SpecializeShader(const Uint& shader, const String& pEntryPoint, const Uint& numSpecializationConstants, const UintArr& pConstantIndex, const UintArr& pConstantValue, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void StencilFunc(const Enum& func, const Int& ref, const Uint& mask, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void StencilFuncSeparate(const Enum& face, const Enum& func, const Int& ref, const Uint& mask, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void StencilMask(const Uint& mask, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void StencilMaskSeparate(const Enum& face, const Uint& mask, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void StencilOp(const Enum& fail, const Enum& zfail, const Enum& zpass, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void StencilOpSeparate(const Enum& face, const Enum& sfail, const Enum& dpfail, const Enum& dppass, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TexBuffer(const Enum& target, const Enum& internalformat, const Uint& buffer, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TexBufferRange(const Enum& target, const Enum& internalformat, const Uint& buffer, const Intptr& offset, const Sizeiptr& size, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TexImage1D(const Enum& target, const Int& level, const Int& internalformat, const Sizei& width, const Int& border, const Enum& format, const Enum& type, const Data& pixels, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TexImage2D(const Enum& target, const Int& level, const Int& internalformat, const Sizei& width, const Sizei& height, const Int& border, const Enum& format, const Enum& type, const Data& pixels, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TexImage2DMultisample(const Enum& target, const Sizei& samples, const Enum& internalformat, const Sizei& width, const Sizei& height, const Boolean& fixedsamplelocations, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TexImage3D(const Enum& target, const Int& level, const Int& internalformat, const Sizei& width, const Sizei& height, const Sizei& depth, const Int& border, const Enum& format, const Enum& type, const Data& pixels, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TexImage3DMultisample(const Enum& target, const Sizei& samples, const Enum& internalformat, const Sizei& width, const Sizei& height, const Sizei& depth, const Boolean& fixedsamplelocations, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TexParameterIiv(const Enum& target, const Enum& pname, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TexParameterIuiv(const Enum& target, const Enum& pname, const UintArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TexParameterf(const Enum& target, const Enum& pname, const Float& param, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TexParameterfv(const Enum& target, const Enum& pname, const FloatArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TexParameteri(const Enum& target, const Enum& pname, const Int& param, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TexParameteriv(const Enum& target, const Enum& pname, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TexStorage1D(const Enum& target, const Sizei& levels, const Enum& internalformat, const Sizei& width, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TexStorage2D(const Enum& target, const Sizei& levels, const Enum& internalformat, const Sizei& width, const Sizei& height, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TexStorage2DMultisample(const Enum& target, const Sizei& samples, const Enum& internalformat, const Sizei& width, const Sizei& height, const Boolean& fixedsamplelocations, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TexStorage3D(const Enum& target, const Sizei& levels, const Enum& internalformat, const Sizei& width, const Sizei& height, const Sizei& depth, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TexStorage3DMultisample(const Enum& target, const Sizei& samples, const Enum& internalformat, const Sizei& width, const Sizei& height, const Sizei& depth, const Boolean& fixedsamplelocations, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TexSubImage1D(const Enum& target, const Int& level, const Int& xoffset, const Sizei& width, const Enum& format, const Enum& type, const Data& pixels, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TexSubImage2D(const Enum& target, const Int& level, const Int& xoffset, const Int& yoffset, const Sizei& width, const Sizei& height, const Enum& format, const Enum& type, const Data& pixels, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TexSubImage3D(const Enum& target, const Int& level, const Int& xoffset, const Int& yoffset, const Int& zoffset, const Sizei& width, const Sizei& height, const Sizei& depth, const Enum& format, const Enum& type, const Data& pixels, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TextureBarrier(const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TextureBuffer(const Uint& texture, const Enum& internalformat, const Uint& buffer, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TextureBufferRange(const Uint& texture, const Enum& internalformat, const Uint& buffer, const Intptr& offset, const Sizeiptr& size, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TextureParameterIiv(const Uint& texture, const Enum& pname, const IntArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TextureParameterIuiv(const Uint& texture, const Enum& pname, const UintArr& params, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TextureParameterf(const Uint& texture, const Enum& pname, const Float& param, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TextureParameterfv(const Uint& texture, const Enum& pname, const FloatArr& param, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TextureParameteri(const Uint& texture, const Enum& pname, const Int& param, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TextureParameteriv(const Uint& texture, const Enum& pname, const IntArr& param, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TextureStorage1D(const Uint& texture, const Sizei& levels, const Enum& internalformat, const Sizei& width, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TextureStorage2D(const Uint& texture, const Sizei& levels, const Enum& internalformat, const Sizei& width, const Sizei& height, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TextureStorage2DMultisample(const Uint& texture, const Sizei& samples, const Enum& internalformat, const Sizei& width, const Sizei& height, const Boolean& fixedsamplelocations, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TextureStorage3D(const Uint& texture, const Sizei& levels, const Enum& internalformat, const Sizei& width, const Sizei& height, const Sizei& depth, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TextureStorage3DMultisample(const Uint& texture, const Sizei& samples, const Enum& internalformat, const Sizei& width, const Sizei& height, const Sizei& depth, const Boolean& fixedsamplelocations, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TextureSubImage1D(const Uint& texture, const Int& level, const Int& xoffset, const Sizei& width, const Enum& format, const Enum& type, const Data& pixels, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TextureSubImage2D(const Uint& texture, const Int& level, const Int& xoffset, const Int& yoffset, const Sizei& width, const Sizei& height, const Enum& format, const Enum& type, const Data& pixels, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TextureSubImage3D(const Uint& texture, const Int& level, const Int& xoffset, const Int& yoffset, const Int& zoffset, const Sizei& width, const Sizei& height, const Sizei& depth, const Enum& format, const Enum& type, const Data& pixels, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TextureView(const Uint& texture, const Enum& target, const Uint& origtexture, const Enum& internalformat, const Uint& minlevel, const Uint& numlevels, const Uint& minlayer, const Uint& numlayers, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TransformFeedbackBufferBase(const Uint& xfb, const Uint& index, const Uint& buffer, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void TransformFeedbackBufferRange(const Uint& xfb, const Uint& index, const Uint& buffer, const Intptr& offset, const Sizeiptr& size, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform1d(const Int& location, const Double& x, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform1dv(const Int& location, const Sizei& count, const DoubleArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform1f(const Int& location, const Float& v0, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform1fv(const Int& location, const Sizei& count, const FloatArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform1i(const Int& location, const Int& v0, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform1iv(const Int& location, const Sizei& count, const IntArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform1ui(const Int& location, const Uint& v0, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform1uiv(const Int& location, const Sizei& count, const UintArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform2d(const Int& location, const Double& x, const Double& y, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform2dv(const Int& location, const Sizei& count, const DoubleArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform2f(const Int& location, const Float& v0, const Float& v1, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform2fv(const Int& location, const Sizei& count, const FloatArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform2i(const Int& location, const Int& v0, const Int& v1, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform2iv(const Int& location, const Sizei& count, const IntArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform2ui(const Int& location, const Uint& v0, const Uint& v1, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform2uiv(const Int& location, const Sizei& count, const UintArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform3d(const Int& location, const Double& x, const Double& y, const Double& z, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform3dv(const Int& location, const Sizei& count, const DoubleArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform3f(const Int& location, const Float& v0, const Float& v1, const Float& v2, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform3fv(const Int& location, const Sizei& count, const FloatArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform3i(const Int& location, const Int& v0, const Int& v1, const Int& v2, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform3iv(const Int& location, const Sizei& count, const IntArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform3ui(const Int& location, const Uint& v0, const Uint& v1, const Uint& v2, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform3uiv(const Int& location, const Sizei& count, const UintArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform4d(const Int& location, const Double& x, const Double& y, const Double& z, const Double& w, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform4dv(const Int& location, const Sizei& count, const DoubleArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform4f(const Int& location, const Float& v0, const Float& v1, const Float& v2, const Float& v3, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform4fv(const Int& location, const Sizei& count, const FloatArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform4i(const Int& location, const Int& v0, const Int& v1, const Int& v2, const Int& v3, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform4iv(const Int& location, const Sizei& count, const IntArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform4ui(const Int& location, const Uint& v0, const Uint& v1, const Uint& v2, const Uint& v3, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Uniform4uiv(const Int& location, const Sizei& count, const UintArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void UniformBlockBinding(const Uint& program, const Uint& uniformBlockIndex, const Uint& uniformBlockBinding, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void UniformMatrix2dv(const Int& location, const Sizei& count, const Boolean& transpose, const DoubleArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void UniformMatrix2fv(const Int& location, const Sizei& count, const Boolean& transpose, const FloatArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void UniformMatrix2x3dv(const Int& location, const Sizei& count, const Boolean& transpose, const DoubleArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void UniformMatrix2x3fv(const Int& location, const Sizei& count, const Boolean& transpose, const FloatArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void UniformMatrix2x4dv(const Int& location, const Sizei& count, const Boolean& transpose, const DoubleArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void UniformMatrix2x4fv(const Int& location, const Sizei& count, const Boolean& transpose, const FloatArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void UniformMatrix3dv(const Int& location, const Sizei& count, const Boolean& transpose, const DoubleArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void UniformMatrix3fv(const Int& location, const Sizei& count, const Boolean& transpose, const FloatArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void UniformMatrix3x2dv(const Int& location, const Sizei& count, const Boolean& transpose, const DoubleArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void UniformMatrix3x2fv(const Int& location, const Sizei& count, const Boolean& transpose, const FloatArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void UniformMatrix3x4dv(const Int& location, const Sizei& count, const Boolean& transpose, const DoubleArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void UniformMatrix3x4fv(const Int& location, const Sizei& count, const Boolean& transpose, const FloatArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void UniformMatrix4dv(const Int& location, const Sizei& count, const Boolean& transpose, const DoubleArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void UniformMatrix4fv(const Int& location, const Sizei& count, const Boolean& transpose, const FloatArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void UniformMatrix4x2dv(const Int& location, const Sizei& count, const Boolean& transpose, const DoubleArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void UniformMatrix4x2fv(const Int& location, const Sizei& count, const Boolean& transpose, const FloatArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void UniformMatrix4x3dv(const Int& location, const Sizei& count, const Boolean& transpose, const DoubleArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void UniformMatrix4x3fv(const Int& location, const Sizei& count, const Boolean& transpose, const FloatArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void UniformSubroutinesuiv(const Enum& shadertype, const Sizei& count, const UintArr& indices, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Boolean UnmapBuffer(const Enum& target, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual Boolean UnmapNamedBuffer(const Uint& buffer, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void UseProgram(const Uint& program, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void UseProgramStages(const Uint& pipeline, const Bitfield& stages, const Uint& program, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ValidateProgram(const Uint& program, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ValidateProgramPipeline(const Uint& pipeline, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexArrayAttribBinding(const Uint& vaobj, const Uint& attribindex, const Uint& bindingindex, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexArrayAttribFormat(const Uint& vaobj, const Uint& attribindex, const Int& size, const Enum& type, const Boolean& normalized, const Uint& relativeoffset, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexArrayAttribIFormat(const Uint& vaobj, const Uint& attribindex, const Int& size, const Enum& type, const Uint& relativeoffset, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexArrayAttribLFormat(const Uint& vaobj, const Uint& attribindex, const Int& size, const Enum& type, const Uint& relativeoffset, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexArrayBindingDivisor(const Uint& vaobj, const Uint& bindingindex, const Uint& divisor, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexArrayElementBuffer(const Uint& vaobj, const Uint& buffer, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexArrayVertexBuffer(const Uint& vaobj, const Uint& bindingindex, const Uint& buffer, const Intptr& offset, const Sizei& stride, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexArrayVertexBuffers(const Uint& vaobj, const Uint& first, const Sizei& count, const UintArr& buffers, const IntptrArr& offsets, const SizeiArr& strides, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib1d(const Uint& index, const Double& x, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib1dv(const Uint& index, const DoubleArr& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib1f(const Uint& index, const Float& x, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib1fv(const Uint& index, const FloatArr& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib1s(const Uint& index, const Short& x, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib1sv(const Uint& index, const Short& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib2d(const Uint& index, const Double& x, const Double& y, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib2dv(const Uint& index, const DoubleArr& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib2f(const Uint& index, const Float& x, const Float& y, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib2fv(const Uint& index, const FloatArr& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib2s(const Uint& index, const Short& x, const Short& y, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib2sv(const Uint& index, const Short& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib3d(const Uint& index, const Double& x, const Double& y, const Double& z, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib3dv(const Uint& index, const DoubleArr& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib3f(const Uint& index, const Float& x, const Float& y, const Float& z, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib3fv(const Uint& index, const FloatArr& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib3s(const Uint& index, const Short& x, const Short& y, const Short& z, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib3sv(const Uint& index, const Short& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib4Nbv(const Uint& index, const Byte& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib4Niv(const Uint& index, const IntArr& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib4Nsv(const Uint& index, const Short& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib4Nub(const Uint& index, const Ubyte& x, const Ubyte& y, const Ubyte& z, const Ubyte& w, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib4Nubv(const Uint& index, const Ubyte& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib4Nuiv(const Uint& index, const UintArr& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib4Nusv(const Uint& index, const Ushort& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib4bv(const Uint& index, const Byte& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib4d(const Uint& index, const Double& x, const Double& y, const Double& z, const Double& w, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib4dv(const Uint& index, const DoubleArr& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib4f(const Uint& index, const Float& x, const Float& y, const Float& z, const Float& w, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib4fv(const Uint& index, const FloatArr& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib4iv(const Uint& index, const IntArr& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib4s(const Uint& index, const Short& x, const Short& y, const Short& z, const Short& w, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib4sv(const Uint& index, const Short& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib4ubv(const Uint& index, const Ubyte& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib4uiv(const Uint& index, const UintArr& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttrib4usv(const Uint& index, const Ushort& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribBinding(const Uint& attribindex, const Uint& bindingindex, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribDivisor(const Uint& index, const Uint& divisor, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribFormat(const Uint& attribindex, const Int& size, const Enum& type, const Boolean& normalized, const Uint& relativeoffset, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribI1i(const Uint& index, const Int& x, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribI1iv(const Uint& index, const IntArr& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribI1ui(const Uint& index, const Uint& x, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribI1uiv(const Uint& index, const UintArr& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribI2i(const Uint& index, const Int& x, const Int& y, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribI2iv(const Uint& index, const IntArr& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribI2ui(const Uint& index, const Uint& x, const Uint& y, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribI2uiv(const Uint& index, const UintArr& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribI3i(const Uint& index, const Int& x, const Int& y, const Int& z, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribI3iv(const Uint& index, const IntArr& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribI3ui(const Uint& index, const Uint& x, const Uint& y, const Uint& z, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribI3uiv(const Uint& index, const UintArr& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribI4bv(const Uint& index, const Byte& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribI4i(const Uint& index, const Int& x, const Int& y, const Int& z, const Int& w, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribI4iv(const Uint& index, const IntArr& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribI4sv(const Uint& index, const Short& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribI4ubv(const Uint& index, const Ubyte& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribI4ui(const Uint& index, const Uint& x, const Uint& y, const Uint& z, const Uint& w, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribI4uiv(const Uint& index, const UintArr& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribI4usv(const Uint& index, const Ushort& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribIFormat(const Uint& attribindex, const Int& size, const Enum& type, const Uint& relativeoffset, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribIPointer(const Uint& index, const Int& size, const Enum& type, const Sizei& stride, const Data& pointer, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribL1d(const Uint& index, const Double& x, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribL1dv(const Uint& index, const DoubleArr& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribL2d(const Uint& index, const Double& x, const Double& y, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribL2dv(const Uint& index, const DoubleArr& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribL3d(const Uint& index, const Double& x, const Double& y, const Double& z, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribL3dv(const Uint& index, const DoubleArr& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribL4d(const Uint& index, const Double& x, const Double& y, const Double& z, const Double& w, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribL4dv(const Uint& index, const DoubleArr& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribLFormat(const Uint& attribindex, const Int& size, const Enum& type, const Uint& relativeoffset, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribLPointer(const Uint& index, const Int& size, const Enum& type, const Sizei& stride, const Data& pointer, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribP1ui(const Uint& index, const Enum& type, const Boolean& normalized, const Uint& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribP1uiv(const Uint& index, const Enum& type, const Boolean& normalized, const UintArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribP2ui(const Uint& index, const Enum& type, const Boolean& normalized, const Uint& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribP2uiv(const Uint& index, const Enum& type, const Boolean& normalized, const UintArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribP3ui(const Uint& index, const Enum& type, const Boolean& normalized, const Uint& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribP3uiv(const Uint& index, const Enum& type, const Boolean& normalized, const UintArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribP4ui(const Uint& index, const Enum& type, const Boolean& normalized, const Uint& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribP4uiv(const Uint& index, const Enum& type, const Boolean& normalized, const UintArr& value, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexAttribPointer(const Uint& index, const Int& size, const Enum& type, const Boolean& normalized, const Sizei& stride, const Data& pointer, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void VertexBindingDivisor(const Uint& bindingindex, const Uint& divisor, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void Viewport(const Int& x, const Int& y, const Sizei& width, const Sizei& height, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ViewportArrayv(const Uint& first, const Sizei& count, const FloatArr& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ViewportIndexedf(const Uint& index, const Float& x, const Float& y, const Float& w, const Float& h, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void ViewportIndexedfv(const Uint& index, const FloatArr& v, const SrcLoc& src_loc = SrcLoc{}) = 0;
    EXPORT virtual void WaitSync(const Sync& sync, const Bitfield& flags, const Uint64& timeout, const SrcLoc& src_loc = SrcLoc{}) = 0;

    EXPORT static Enum::type ACTIVE_ATOMIC_COUNTER_BUFFERS();
    EXPORT static Enum::type ACTIVE_ATTRIBUTES();
    EXPORT static Enum::type ACTIVE_ATTRIBUTE_MAX_LENGTH();
    EXPORT static Enum::type ACTIVE_PROGRAM();
    EXPORT static Enum::type ACTIVE_RESOURCES();
    EXPORT static Enum::type ACTIVE_SUBROUTINES();
    EXPORT static Enum::type ACTIVE_SUBROUTINE_MAX_LENGTH();
    EXPORT static Enum::type ACTIVE_SUBROUTINE_UNIFORMS();
    EXPORT static Enum::type ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS();
    EXPORT static Enum::type ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH();
    EXPORT static Enum::type ACTIVE_TEXTURE();
    EXPORT static Enum::type ACTIVE_UNIFORMS();
    EXPORT static Enum::type ACTIVE_UNIFORM_BLOCKS();
    EXPORT static Enum::type ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH();
    EXPORT static Enum::type ACTIVE_UNIFORM_MAX_LENGTH();
    EXPORT static Enum::type ACTIVE_VARIABLES();
    EXPORT static Enum::type ALIASED_LINE_WIDTH_RANGE();
    EXPORT static Enum::type ALL_BARRIER_BITS();
    EXPORT static Enum::type ALL_SHADER_BITS();
    EXPORT static Enum::type ALPHA();
    EXPORT static Enum::type ALREADY_SIGNALED();
    EXPORT static Enum::type ALWAYS();
    EXPORT static Enum::type AND();
    EXPORT static Enum::type AND_INVERTED();
    EXPORT static Enum::type AND_REVERSE();
    EXPORT static Enum::type ANY_SAMPLES_PASSED();
    EXPORT static Enum::type ANY_SAMPLES_PASSED_CONSERVATIVE();
    EXPORT static Enum::type ARRAY_BUFFER();
    EXPORT static Enum::type ARRAY_BUFFER_BINDING();
    EXPORT static Enum::type ARRAY_SIZE();
    EXPORT static Enum::type ARRAY_STRIDE();
    EXPORT static Enum::type ATOMIC_COUNTER_BARRIER_BIT();
    EXPORT static Enum::type ATOMIC_COUNTER_BUFFER();
    EXPORT static Enum::type ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS();
    EXPORT static Enum::type ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES();
    EXPORT static Enum::type ATOMIC_COUNTER_BUFFER_BINDING();
    EXPORT static Enum::type ATOMIC_COUNTER_BUFFER_DATA_SIZE();
    EXPORT static Enum::type ATOMIC_COUNTER_BUFFER_INDEX();
    EXPORT static Enum::type ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER();
    EXPORT static Enum::type ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER();
    EXPORT static Enum::type ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER();
    EXPORT static Enum::type ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER();
    EXPORT static Enum::type ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER();
    EXPORT static Enum::type ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER();
    EXPORT static Enum::type ATOMIC_COUNTER_BUFFER_SIZE();
    EXPORT static Enum::type ATOMIC_COUNTER_BUFFER_START();
    EXPORT static Enum::type ATTACHED_SHADERS();
    EXPORT static Enum::type AUTO_GENERATE_MIPMAP();
    EXPORT static Enum::type BACK();
    EXPORT static Enum::type BACK_LEFT();
    EXPORT static Enum::type BACK_RIGHT();
    EXPORT static Enum::type BGR();
    EXPORT static Enum::type BGRA();
    EXPORT static Enum::type BGRA_INTEGER();
    EXPORT static Enum::type BGR_INTEGER();
    EXPORT static Enum::type BLEND();
    EXPORT static Enum::type BLEND_COLOR();
    EXPORT static Enum::type BLEND_DST();
    EXPORT static Enum::type BLEND_DST_ALPHA();
    EXPORT static Enum::type BLEND_DST_RGB();
    EXPORT static Enum::type BLEND_EQUATION();
    EXPORT static Enum::type BLEND_EQUATION_ALPHA();
    EXPORT static Enum::type BLEND_EQUATION_RGB();
    EXPORT static Enum::type BLEND_SRC();
    EXPORT static Enum::type BLEND_SRC_ALPHA();
    EXPORT static Enum::type BLEND_SRC_RGB();
    EXPORT static Enum::type BLOCK_INDEX();
    EXPORT static Enum::type BLUE();
    EXPORT static Enum::type BLUE_INTEGER();
    EXPORT static Enum::type BOOL();
    EXPORT static Enum::type BOOL_VEC2();
    EXPORT static Enum::type BOOL_VEC3();
    EXPORT static Enum::type BOOL_VEC4();
    EXPORT static Enum::type BUFFER();
    EXPORT static Enum::type BUFFER_ACCESS();
    EXPORT static Enum::type BUFFER_ACCESS_FLAGS();
    EXPORT static Enum::type BUFFER_BINDING();
    EXPORT static Enum::type BUFFER_DATA_SIZE();
    EXPORT static Enum::type BUFFER_IMMUTABLE_STORAGE();
    EXPORT static Enum::type BUFFER_MAPPED();
    EXPORT static Enum::type BUFFER_MAP_LENGTH();
    EXPORT static Enum::type BUFFER_MAP_OFFSET();
    EXPORT static Enum::type BUFFER_MAP_POINTER();
    EXPORT static Enum::type BUFFER_SIZE();
    EXPORT static Enum::type BUFFER_STORAGE_FLAGS();
    EXPORT static Enum::type BUFFER_UPDATE_BARRIER_BIT();
    EXPORT static Enum::type BUFFER_USAGE();
    EXPORT static Enum::type BUFFER_VARIABLE();
    EXPORT static Enum::type BYTE();
    EXPORT static Enum::type CAVEAT_SUPPORT();
    EXPORT static Enum::type CCW();
    EXPORT static Enum::type CLAMP_READ_COLOR();
    EXPORT static Enum::type CLAMP_TO_BORDER();
    EXPORT static Enum::type CLAMP_TO_EDGE();
    EXPORT static Enum::type CLEAR();
    EXPORT static Enum::type CLEAR_BUFFER();
    EXPORT static Enum::type CLEAR_TEXTURE();
    EXPORT static Enum::type CLIENT_MAPPED_BUFFER_BARRIER_BIT();
    EXPORT static Enum::type CLIENT_STORAGE_BIT();
    EXPORT static Enum::type CLIPPING_INPUT_PRIMITIVES();
    EXPORT static Enum::type CLIPPING_OUTPUT_PRIMITIVES();
    EXPORT static Enum::type CLIP_DEPTH_MODE();
    EXPORT static Enum::type CLIP_DISTANCE0();
    EXPORT static Enum::type CLIP_DISTANCE1();
    EXPORT static Enum::type CLIP_DISTANCE2();
    EXPORT static Enum::type CLIP_DISTANCE3();
    EXPORT static Enum::type CLIP_DISTANCE4();
    EXPORT static Enum::type CLIP_DISTANCE5();
    EXPORT static Enum::type CLIP_DISTANCE6();
    EXPORT static Enum::type CLIP_DISTANCE7();
    EXPORT static Enum::type CLIP_ORIGIN();
    EXPORT static Enum::type COLOR();
    EXPORT static Enum::type COLOR_ATTACHMENT0();
    EXPORT static Enum::type COLOR_ATTACHMENT1();
    EXPORT static Enum::type COLOR_ATTACHMENT10();
    EXPORT static Enum::type COLOR_ATTACHMENT11();
    EXPORT static Enum::type COLOR_ATTACHMENT12();
    EXPORT static Enum::type COLOR_ATTACHMENT13();
    EXPORT static Enum::type COLOR_ATTACHMENT14();
    EXPORT static Enum::type COLOR_ATTACHMENT15();
    EXPORT static Enum::type COLOR_ATTACHMENT16();
    EXPORT static Enum::type COLOR_ATTACHMENT17();
    EXPORT static Enum::type COLOR_ATTACHMENT18();
    EXPORT static Enum::type COLOR_ATTACHMENT19();
    EXPORT static Enum::type COLOR_ATTACHMENT2();
    EXPORT static Enum::type COLOR_ATTACHMENT20();
    EXPORT static Enum::type COLOR_ATTACHMENT21();
    EXPORT static Enum::type COLOR_ATTACHMENT22();
    EXPORT static Enum::type COLOR_ATTACHMENT23();
    EXPORT static Enum::type COLOR_ATTACHMENT24();
    EXPORT static Enum::type COLOR_ATTACHMENT25();
    EXPORT static Enum::type COLOR_ATTACHMENT26();
    EXPORT static Enum::type COLOR_ATTACHMENT27();
    EXPORT static Enum::type COLOR_ATTACHMENT28();
    EXPORT static Enum::type COLOR_ATTACHMENT29();
    EXPORT static Enum::type COLOR_ATTACHMENT3();
    EXPORT static Enum::type COLOR_ATTACHMENT30();
    EXPORT static Enum::type COLOR_ATTACHMENT31();
    EXPORT static Enum::type COLOR_ATTACHMENT4();
    EXPORT static Enum::type COLOR_ATTACHMENT5();
    EXPORT static Enum::type COLOR_ATTACHMENT6();
    EXPORT static Enum::type COLOR_ATTACHMENT7();
    EXPORT static Enum::type COLOR_ATTACHMENT8();
    EXPORT static Enum::type COLOR_ATTACHMENT9();
    EXPORT static Enum::type COLOR_BUFFER_BIT();
    EXPORT static Enum::type COLOR_CLEAR_VALUE();
    EXPORT static Enum::type COLOR_COMPONENTS();
    EXPORT static Enum::type COLOR_ENCODING();
    EXPORT static Enum::type COLOR_LOGIC_OP();
    EXPORT static Enum::type COLOR_RENDERABLE();
    EXPORT static Enum::type COLOR_WRITEMASK();
    EXPORT static Enum::type COMMAND_BARRIER_BIT();
    EXPORT static Enum::type COMPARE_REF_TO_TEXTURE();
    EXPORT static Enum::type COMPATIBLE_SUBROUTINES();
    EXPORT static Enum::type COMPILE_STATUS();
    EXPORT static Enum::type COMPRESSED_R11_EAC();
    EXPORT static Enum::type COMPRESSED_RED();
    EXPORT static Enum::type COMPRESSED_RED_RGTC1();
    EXPORT static Enum::type COMPRESSED_RG();
    EXPORT static Enum::type COMPRESSED_RG11_EAC();
    EXPORT static Enum::type COMPRESSED_RGB();
    EXPORT static Enum::type COMPRESSED_RGB8_ETC2();
    EXPORT static Enum::type COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2();
    EXPORT static Enum::type COMPRESSED_RGBA();
    EXPORT static Enum::type COMPRESSED_RGBA8_ETC2_EAC();
    EXPORT static Enum::type COMPRESSED_RGBA_BPTC_UNORM();
    EXPORT static Enum::type COMPRESSED_RGB_BPTC_SIGNED_FLOAT();
    EXPORT static Enum::type COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT();
    EXPORT static Enum::type COMPRESSED_RG_RGTC2();
    EXPORT static Enum::type COMPRESSED_SIGNED_R11_EAC();
    EXPORT static Enum::type COMPRESSED_SIGNED_RED_RGTC1();
    EXPORT static Enum::type COMPRESSED_SIGNED_RG11_EAC();
    EXPORT static Enum::type COMPRESSED_SIGNED_RG_RGTC2();
    EXPORT static Enum::type COMPRESSED_SRGB();
    EXPORT static Enum::type COMPRESSED_SRGB8_ALPHA8_ETC2_EAC();
    EXPORT static Enum::type COMPRESSED_SRGB8_ETC2();
    EXPORT static Enum::type COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2();
    EXPORT static Enum::type COMPRESSED_SRGB_ALPHA();
    EXPORT static Enum::type COMPRESSED_SRGB_ALPHA_BPTC_UNORM();
    EXPORT static Enum::type COMPRESSED_TEXTURE_FORMATS();
    EXPORT static Enum::type COMPUTE_SHADER();
    EXPORT static Enum::type COMPUTE_SHADER_BIT();
    EXPORT static Enum::type COMPUTE_SHADER_INVOCATIONS();
    EXPORT static Enum::type COMPUTE_SUBROUTINE();
    EXPORT static Enum::type COMPUTE_SUBROUTINE_UNIFORM();
    EXPORT static Enum::type COMPUTE_TEXTURE();
    EXPORT static Enum::type COMPUTE_WORK_GROUP_SIZE();
    EXPORT static Enum::type CONDITION_SATISFIED();
    EXPORT static Enum::type CONSTANT_ALPHA();
    EXPORT static Enum::type CONSTANT_COLOR();
    EXPORT static Enum::type CONTEXT_COMPATIBILITY_PROFILE_BIT();
    EXPORT static Enum::type CONTEXT_CORE_PROFILE_BIT();
    EXPORT static Enum::type CONTEXT_FLAGS();
    EXPORT static Enum::type CONTEXT_FLAG_DEBUG_BIT();
    EXPORT static Enum::type CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT();
    EXPORT static Enum::type CONTEXT_FLAG_NO_ERROR_BIT();
    EXPORT static Enum::type CONTEXT_FLAG_ROBUST_ACCESS_BIT();
    EXPORT static Enum::type CONTEXT_LOST();
    EXPORT static Enum::type CONTEXT_PROFILE_MASK();
    EXPORT static Enum::type CONTEXT_RELEASE_BEHAVIOR();
    EXPORT static Enum::type CONTEXT_RELEASE_BEHAVIOR_FLUSH();
    EXPORT static Enum::type COPY();
    EXPORT static Enum::type COPY_INVERTED();
    EXPORT static Enum::type COPY_READ_BUFFER();
    EXPORT static Enum::type COPY_READ_BUFFER_BINDING();
    EXPORT static Enum::type COPY_WRITE_BUFFER();
    EXPORT static Enum::type COPY_WRITE_BUFFER_BINDING();
    EXPORT static Enum::type CULL_FACE();
    EXPORT static Enum::type CULL_FACE_MODE();
    EXPORT static Enum::type CURRENT_PROGRAM();
    EXPORT static Enum::type CURRENT_QUERY();
    EXPORT static Enum::type CURRENT_VERTEX_ATTRIB();
    EXPORT static Enum::type CW();
    EXPORT static Enum::type DEBUG_CALLBACK_FUNCTION();
    EXPORT static Enum::type DEBUG_CALLBACK_USER_PARAM();
    EXPORT static Enum::type DEBUG_GROUP_STACK_DEPTH();
    EXPORT static Enum::type DEBUG_LOGGED_MESSAGES();
    EXPORT static Enum::type DEBUG_NEXT_LOGGED_MESSAGE_LENGTH();
    EXPORT static Enum::type DEBUG_OUTPUT();
    EXPORT static Enum::type DEBUG_OUTPUT_SYNCHRONOUS();
    EXPORT static Enum::type DEBUG_SEVERITY_HIGH();
    EXPORT static Enum::type DEBUG_SEVERITY_LOW();
    EXPORT static Enum::type DEBUG_SEVERITY_MEDIUM();
    EXPORT static Enum::type DEBUG_SEVERITY_NOTIFICATION();
    EXPORT static Enum::type DEBUG_SOURCE_API();
    EXPORT static Enum::type DEBUG_SOURCE_APPLICATION();
    EXPORT static Enum::type DEBUG_SOURCE_OTHER();
    EXPORT static Enum::type DEBUG_SOURCE_SHADER_COMPILER();
    EXPORT static Enum::type DEBUG_SOURCE_THIRD_PARTY();
    EXPORT static Enum::type DEBUG_SOURCE_WINDOW_SYSTEM();
    EXPORT static Enum::type DEBUG_TYPE_DEPRECATED_BEHAVIOR();
    EXPORT static Enum::type DEBUG_TYPE_ERROR();
    EXPORT static Enum::type DEBUG_TYPE_MARKER();
    EXPORT static Enum::type DEBUG_TYPE_OTHER();
    EXPORT static Enum::type DEBUG_TYPE_PERFORMANCE();
    EXPORT static Enum::type DEBUG_TYPE_POP_GROUP();
    EXPORT static Enum::type DEBUG_TYPE_PORTABILITY();
    EXPORT static Enum::type DEBUG_TYPE_PUSH_GROUP();
    EXPORT static Enum::type DEBUG_TYPE_UNDEFINED_BEHAVIOR();
    EXPORT static Enum::type DECR();
    EXPORT static Enum::type DECR_WRAP();
    EXPORT static Enum::type DELETE_STATUS();
    EXPORT static Enum::type DEPTH();
    EXPORT static Enum::type DEPTH24_STENCIL8();
    EXPORT static Enum::type DEPTH32F_STENCIL8();
    EXPORT static Enum::type DEPTH_ATTACHMENT();
    EXPORT static Enum::type DEPTH_BUFFER_BIT();
    EXPORT static Enum::type DEPTH_CLAMP();
    EXPORT static Enum::type DEPTH_CLEAR_VALUE();
    EXPORT static Enum::type DEPTH_COMPONENT();
    EXPORT static Enum::type DEPTH_COMPONENT16();
    EXPORT static Enum::type DEPTH_COMPONENT24();
    EXPORT static Enum::type DEPTH_COMPONENT32();
    EXPORT static Enum::type DEPTH_COMPONENT32F();
    EXPORT static Enum::type DEPTH_COMPONENTS();
    EXPORT static Enum::type DEPTH_FUNC();
    EXPORT static Enum::type DEPTH_RANGE();
    EXPORT static Enum::type DEPTH_RENDERABLE();
    EXPORT static Enum::type DEPTH_STENCIL();
    EXPORT static Enum::type DEPTH_STENCIL_ATTACHMENT();
    EXPORT static Enum::type DEPTH_STENCIL_TEXTURE_MODE();
    EXPORT static Enum::type DEPTH_TEST();
    EXPORT static Enum::type DEPTH_WRITEMASK();
    EXPORT static Enum::type DISPATCH_INDIRECT_BUFFER();
    EXPORT static Enum::type DISPATCH_INDIRECT_BUFFER_BINDING();
    EXPORT static Enum::type DITHER();
    EXPORT static Enum::type DONT_CARE();
    EXPORT static Enum::type DOUBLE();
    EXPORT static Enum::type DOUBLEBUFFER();
    EXPORT static Enum::type DOUBLE_MAT2();
    EXPORT static Enum::type DOUBLE_MAT2x3();
    EXPORT static Enum::type DOUBLE_MAT2x4();
    EXPORT static Enum::type DOUBLE_MAT3();
    EXPORT static Enum::type DOUBLE_MAT3x2();
    EXPORT static Enum::type DOUBLE_MAT3x4();
    EXPORT static Enum::type DOUBLE_MAT4();
    EXPORT static Enum::type DOUBLE_MAT4x2();
    EXPORT static Enum::type DOUBLE_MAT4x3();
    EXPORT static Enum::type DOUBLE_VEC2();
    EXPORT static Enum::type DOUBLE_VEC3();
    EXPORT static Enum::type DOUBLE_VEC4();
    EXPORT static Enum::type DRAW_BUFFER();
    EXPORT static Enum::type DRAW_BUFFER0();
    EXPORT static Enum::type DRAW_BUFFER1();
    EXPORT static Enum::type DRAW_BUFFER10();
    EXPORT static Enum::type DRAW_BUFFER11();
    EXPORT static Enum::type DRAW_BUFFER12();
    EXPORT static Enum::type DRAW_BUFFER13();
    EXPORT static Enum::type DRAW_BUFFER14();
    EXPORT static Enum::type DRAW_BUFFER15();
    EXPORT static Enum::type DRAW_BUFFER2();
    EXPORT static Enum::type DRAW_BUFFER3();
    EXPORT static Enum::type DRAW_BUFFER4();
    EXPORT static Enum::type DRAW_BUFFER5();
    EXPORT static Enum::type DRAW_BUFFER6();
    EXPORT static Enum::type DRAW_BUFFER7();
    EXPORT static Enum::type DRAW_BUFFER8();
    EXPORT static Enum::type DRAW_BUFFER9();
    EXPORT static Enum::type DRAW_FRAMEBUFFER();
    EXPORT static Enum::type DRAW_FRAMEBUFFER_BINDING();
    EXPORT static Enum::type DRAW_INDIRECT_BUFFER();
    EXPORT static Enum::type DRAW_INDIRECT_BUFFER_BINDING();
    EXPORT static Enum::type DST_ALPHA();
    EXPORT static Enum::type DST_COLOR();
    EXPORT static Enum::type DYNAMIC_COPY();
    EXPORT static Enum::type DYNAMIC_DRAW();
    EXPORT static Enum::type DYNAMIC_READ();
    EXPORT static Enum::type DYNAMIC_STORAGE_BIT();
    EXPORT static Enum::type ELEMENT_ARRAY_BARRIER_BIT();
    EXPORT static Enum::type ELEMENT_ARRAY_BUFFER();
    EXPORT static Enum::type ELEMENT_ARRAY_BUFFER_BINDING();
    EXPORT static Enum::type EQUAL();
    EXPORT static Enum::type EQUIV();
    EXPORT static Enum::type EXTENSIONS();
    EXPORT static Enum::type FALSE();
    EXPORT static Enum::type FASTEST();
    EXPORT static Enum::type FILL();
    EXPORT static Enum::type FILTER();
    EXPORT static Enum::type FIRST_VERTEX_CONVENTION();
    EXPORT static Enum::type FIXED();
    EXPORT static Enum::type FIXED_ONLY();
    EXPORT static Enum::type FLOAT();
    EXPORT static Enum::type FLOAT_32_UNSIGNED_INT_24_8_REV();
    EXPORT static Enum::type FLOAT_MAT2();
    EXPORT static Enum::type FLOAT_MAT2x3();
    EXPORT static Enum::type FLOAT_MAT2x4();
    EXPORT static Enum::type FLOAT_MAT3();
    EXPORT static Enum::type FLOAT_MAT3x2();
    EXPORT static Enum::type FLOAT_MAT3x4();
    EXPORT static Enum::type FLOAT_MAT4();
    EXPORT static Enum::type FLOAT_MAT4x2();
    EXPORT static Enum::type FLOAT_MAT4x3();
    EXPORT static Enum::type FLOAT_VEC2();
    EXPORT static Enum::type FLOAT_VEC3();
    EXPORT static Enum::type FLOAT_VEC4();
    EXPORT static Enum::type FRACTIONAL_EVEN();
    EXPORT static Enum::type FRACTIONAL_ODD();
    EXPORT static Enum::type FRAGMENT_INTERPOLATION_OFFSET_BITS();
    EXPORT static Enum::type FRAGMENT_SHADER();
    EXPORT static Enum::type FRAGMENT_SHADER_BIT();
    EXPORT static Enum::type FRAGMENT_SHADER_DERIVATIVE_HINT();
    EXPORT static Enum::type FRAGMENT_SHADER_INVOCATIONS();
    EXPORT static Enum::type FRAGMENT_SUBROUTINE();
    EXPORT static Enum::type FRAGMENT_SUBROUTINE_UNIFORM();
    EXPORT static Enum::type FRAGMENT_TEXTURE();
    EXPORT static Enum::type FRAMEBUFFER();
    EXPORT static Enum::type FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE();
    EXPORT static Enum::type FRAMEBUFFER_ATTACHMENT_BLUE_SIZE();
    EXPORT static Enum::type FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING();
    EXPORT static Enum::type FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE();
    EXPORT static Enum::type FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE();
    EXPORT static Enum::type FRAMEBUFFER_ATTACHMENT_GREEN_SIZE();
    EXPORT static Enum::type FRAMEBUFFER_ATTACHMENT_LAYERED();
    EXPORT static Enum::type FRAMEBUFFER_ATTACHMENT_OBJECT_NAME();
    EXPORT static Enum::type FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE();
    EXPORT static Enum::type FRAMEBUFFER_ATTACHMENT_RED_SIZE();
    EXPORT static Enum::type FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE();
    EXPORT static Enum::type FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE();
    EXPORT static Enum::type FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER();
    EXPORT static Enum::type FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL();
    EXPORT static Enum::type FRAMEBUFFER_BARRIER_BIT();
    EXPORT static Enum::type FRAMEBUFFER_BINDING();
    EXPORT static Enum::type FRAMEBUFFER_BLEND();
    EXPORT static Enum::type FRAMEBUFFER_COMPLETE();
    EXPORT static Enum::type FRAMEBUFFER_DEFAULT();
    EXPORT static Enum::type FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS();
    EXPORT static Enum::type FRAMEBUFFER_DEFAULT_HEIGHT();
    EXPORT static Enum::type FRAMEBUFFER_DEFAULT_LAYERS();
    EXPORT static Enum::type FRAMEBUFFER_DEFAULT_SAMPLES();
    EXPORT static Enum::type FRAMEBUFFER_DEFAULT_WIDTH();
    EXPORT static Enum::type FRAMEBUFFER_INCOMPLETE_ATTACHMENT();
    EXPORT static Enum::type FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER();
    EXPORT static Enum::type FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS();
    EXPORT static Enum::type FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT();
    EXPORT static Enum::type FRAMEBUFFER_INCOMPLETE_MULTISAMPLE();
    EXPORT static Enum::type FRAMEBUFFER_INCOMPLETE_READ_BUFFER();
    EXPORT static Enum::type FRAMEBUFFER_RENDERABLE();
    EXPORT static Enum::type FRAMEBUFFER_RENDERABLE_LAYERED();
    EXPORT static Enum::type FRAMEBUFFER_SRGB();
    EXPORT static Enum::type FRAMEBUFFER_UNDEFINED();
    EXPORT static Enum::type FRAMEBUFFER_UNSUPPORTED();
    EXPORT static Enum::type FRONT();
    EXPORT static Enum::type FRONT_AND_BACK();
    EXPORT static Enum::type FRONT_FACE();
    EXPORT static Enum::type FRONT_LEFT();
    EXPORT static Enum::type FRONT_RIGHT();
    EXPORT static Enum::type FULL_SUPPORT();
    EXPORT static Enum::type FUNC_ADD();
    EXPORT static Enum::type FUNC_REVERSE_SUBTRACT();
    EXPORT static Enum::type FUNC_SUBTRACT();
    EXPORT static Enum::type GEOMETRY_INPUT_TYPE();
    EXPORT static Enum::type GEOMETRY_OUTPUT_TYPE();
    EXPORT static Enum::type GEOMETRY_SHADER();
    EXPORT static Enum::type GEOMETRY_SHADER_BIT();
    EXPORT static Enum::type GEOMETRY_SHADER_INVOCATIONS();
    EXPORT static Enum::type GEOMETRY_SHADER_PRIMITIVES_EMITTED();
    EXPORT static Enum::type GEOMETRY_SUBROUTINE();
    EXPORT static Enum::type GEOMETRY_SUBROUTINE_UNIFORM();
    EXPORT static Enum::type GEOMETRY_TEXTURE();
    EXPORT static Enum::type GEOMETRY_VERTICES_OUT();
    EXPORT static Enum::type GEQUAL();
    EXPORT static Enum::type GET_TEXTURE_IMAGE_FORMAT();
    EXPORT static Enum::type GET_TEXTURE_IMAGE_TYPE();
    EXPORT static Enum::type GREATER();
    EXPORT static Enum::type GREEN();
    EXPORT static Enum::type GREEN_INTEGER();
    EXPORT static Enum::type GUILTY_CONTEXT_RESET();
    EXPORT static Enum::type HALF_FLOAT();
    EXPORT static Enum::type HIGH_FLOAT();
    EXPORT static Enum::type HIGH_INT();
    EXPORT static Enum::type IMAGE_1D();
    EXPORT static Enum::type IMAGE_1D_ARRAY();
    EXPORT static Enum::type IMAGE_2D();
    EXPORT static Enum::type IMAGE_2D_ARRAY();
    EXPORT static Enum::type IMAGE_2D_MULTISAMPLE();
    EXPORT static Enum::type IMAGE_2D_MULTISAMPLE_ARRAY();
    EXPORT static Enum::type IMAGE_2D_RECT();
    EXPORT static Enum::type IMAGE_3D();
    EXPORT static Enum::type IMAGE_BINDING_ACCESS();
    EXPORT static Enum::type IMAGE_BINDING_FORMAT();
    EXPORT static Enum::type IMAGE_BINDING_LAYER();
    EXPORT static Enum::type IMAGE_BINDING_LAYERED();
    EXPORT static Enum::type IMAGE_BINDING_LEVEL();
    EXPORT static Enum::type IMAGE_BINDING_NAME();
    EXPORT static Enum::type IMAGE_BUFFER();
    EXPORT static Enum::type IMAGE_CLASS_10_10_10_2();
    EXPORT static Enum::type IMAGE_CLASS_11_11_10();
    EXPORT static Enum::type IMAGE_CLASS_1_X_16();
    EXPORT static Enum::type IMAGE_CLASS_1_X_32();
    EXPORT static Enum::type IMAGE_CLASS_1_X_8();
    EXPORT static Enum::type IMAGE_CLASS_2_X_16();
    EXPORT static Enum::type IMAGE_CLASS_2_X_32();
    EXPORT static Enum::type IMAGE_CLASS_2_X_8();
    EXPORT static Enum::type IMAGE_CLASS_4_X_16();
    EXPORT static Enum::type IMAGE_CLASS_4_X_32();
    EXPORT static Enum::type IMAGE_CLASS_4_X_8();
    EXPORT static Enum::type IMAGE_COMPATIBILITY_CLASS();
    EXPORT static Enum::type IMAGE_CUBE();
    EXPORT static Enum::type IMAGE_CUBE_MAP_ARRAY();
    EXPORT static Enum::type IMAGE_FORMAT_COMPATIBILITY_BY_CLASS();
    EXPORT static Enum::type IMAGE_FORMAT_COMPATIBILITY_BY_SIZE();
    EXPORT static Enum::type IMAGE_FORMAT_COMPATIBILITY_TYPE();
    EXPORT static Enum::type IMAGE_PIXEL_FORMAT();
    EXPORT static Enum::type IMAGE_PIXEL_TYPE();
    EXPORT static Enum::type IMAGE_TEXEL_SIZE();
    EXPORT static Enum::type IMPLEMENTATION_COLOR_READ_FORMAT();
    EXPORT static Enum::type IMPLEMENTATION_COLOR_READ_TYPE();
    EXPORT static Enum::type INCR();
    EXPORT static Enum::type INCR_WRAP();
    EXPORT static Enum::type INFO_LOG_LENGTH();
    EXPORT static Enum::type INNOCENT_CONTEXT_RESET();
    EXPORT static Enum::type INT();
    EXPORT static Enum::type INTERLEAVED_ATTRIBS();
    EXPORT static Enum::type INTERNALFORMAT_ALPHA_SIZE();
    EXPORT static Enum::type INTERNALFORMAT_ALPHA_TYPE();
    EXPORT static Enum::type INTERNALFORMAT_BLUE_SIZE();
    EXPORT static Enum::type INTERNALFORMAT_BLUE_TYPE();
    EXPORT static Enum::type INTERNALFORMAT_DEPTH_SIZE();
    EXPORT static Enum::type INTERNALFORMAT_DEPTH_TYPE();
    EXPORT static Enum::type INTERNALFORMAT_GREEN_SIZE();
    EXPORT static Enum::type INTERNALFORMAT_GREEN_TYPE();
    EXPORT static Enum::type INTERNALFORMAT_PREFERRED();
    EXPORT static Enum::type INTERNALFORMAT_RED_SIZE();
    EXPORT static Enum::type INTERNALFORMAT_RED_TYPE();
    EXPORT static Enum::type INTERNALFORMAT_SHARED_SIZE();
    EXPORT static Enum::type INTERNALFORMAT_STENCIL_SIZE();
    EXPORT static Enum::type INTERNALFORMAT_STENCIL_TYPE();
    EXPORT static Enum::type INTERNALFORMAT_SUPPORTED();
    EXPORT static Enum::type INT_2_10_10_10_REV();
    EXPORT static Enum::type INT_IMAGE_1D();
    EXPORT static Enum::type INT_IMAGE_1D_ARRAY();
    EXPORT static Enum::type INT_IMAGE_2D();
    EXPORT static Enum::type INT_IMAGE_2D_ARRAY();
    EXPORT static Enum::type INT_IMAGE_2D_MULTISAMPLE();
    EXPORT static Enum::type INT_IMAGE_2D_MULTISAMPLE_ARRAY();
    EXPORT static Enum::type INT_IMAGE_2D_RECT();
    EXPORT static Enum::type INT_IMAGE_3D();
    EXPORT static Enum::type INT_IMAGE_BUFFER();
    EXPORT static Enum::type INT_IMAGE_CUBE();
    EXPORT static Enum::type INT_IMAGE_CUBE_MAP_ARRAY();
    EXPORT static Enum::type INT_SAMPLER_1D();
    EXPORT static Enum::type INT_SAMPLER_1D_ARRAY();
    EXPORT static Enum::type INT_SAMPLER_2D();
    EXPORT static Enum::type INT_SAMPLER_2D_ARRAY();
    EXPORT static Enum::type INT_SAMPLER_2D_MULTISAMPLE();
    EXPORT static Enum::type INT_SAMPLER_2D_MULTISAMPLE_ARRAY();
    EXPORT static Enum::type INT_SAMPLER_2D_RECT();
    EXPORT static Enum::type INT_SAMPLER_3D();
    EXPORT static Enum::type INT_SAMPLER_BUFFER();
    EXPORT static Enum::type INT_SAMPLER_CUBE();
    EXPORT static Enum::type INT_SAMPLER_CUBE_MAP_ARRAY();
    EXPORT static Enum::type INT_VEC2();
    EXPORT static Enum::type INT_VEC3();
    EXPORT static Enum::type INT_VEC4();
    EXPORT static Enum::type INVALID_ENUM();
    EXPORT static Enum::type INVALID_FRAMEBUFFER_OPERATION();
    EXPORT static Enum::type INVALID_INDEX();
    EXPORT static Enum::type INVALID_OPERATION();
    EXPORT static Enum::type INVALID_VALUE();
    EXPORT static Enum::type INVERT();
    EXPORT static Enum::type ISOLINES();
    EXPORT static Enum::type IS_PER_PATCH();
    EXPORT static Enum::type IS_ROW_MAJOR();
    EXPORT static Enum::type KEEP();
    EXPORT static Enum::type LAST_VERTEX_CONVENTION();
    EXPORT static Enum::type LAYER_PROVOKING_VERTEX();
    EXPORT static Enum::type LEFT();
    EXPORT static Enum::type LEQUAL();
    EXPORT static Enum::type LESS();
    EXPORT static Enum::type LINE();
    EXPORT static Enum::type LINEAR();
    EXPORT static Enum::type LINEAR_MIPMAP_LINEAR();
    EXPORT static Enum::type LINEAR_MIPMAP_NEAREST();
    EXPORT static Enum::type LINES();
    EXPORT static Enum::type LINES_ADJACENCY();
    EXPORT static Enum::type LINE_LOOP();
    EXPORT static Enum::type LINE_SMOOTH();
    EXPORT static Enum::type LINE_SMOOTH_HINT();
    EXPORT static Enum::type LINE_STRIP();
    EXPORT static Enum::type LINE_STRIP_ADJACENCY();
    EXPORT static Enum::type LINE_WIDTH();
    EXPORT static Enum::type LINE_WIDTH_GRANULARITY();
    EXPORT static Enum::type LINE_WIDTH_RANGE();
    EXPORT static Enum::type LINK_STATUS();
    EXPORT static Enum::type LOCATION();
    EXPORT static Enum::type LOCATION_COMPONENT();
    EXPORT static Enum::type LOCATION_INDEX();
    EXPORT static Enum::type LOGIC_OP_MODE();
    EXPORT static Enum::type LOSE_CONTEXT_ON_RESET();
    EXPORT static Enum::type LOWER_LEFT();
    EXPORT static Enum::type LOW_FLOAT();
    EXPORT static Enum::type LOW_INT();
    EXPORT static Enum::type MAJOR_VERSION();
    EXPORT static Enum::type MANUAL_GENERATE_MIPMAP();
    EXPORT static Enum::type MAP_COHERENT_BIT();
    EXPORT static Enum::type MAP_FLUSH_EXPLICIT_BIT();
    EXPORT static Enum::type MAP_INVALIDATE_BUFFER_BIT();
    EXPORT static Enum::type MAP_INVALIDATE_RANGE_BIT();
    EXPORT static Enum::type MAP_PERSISTENT_BIT();
    EXPORT static Enum::type MAP_READ_BIT();
    EXPORT static Enum::type MAP_UNSYNCHRONIZED_BIT();
    EXPORT static Enum::type MAP_WRITE_BIT();
    EXPORT static Enum::type MATRIX_STRIDE();
    EXPORT static Enum::type MAX();
    EXPORT static Enum::type MAX_3D_TEXTURE_SIZE();
    EXPORT static Enum::type MAX_ARRAY_TEXTURE_LAYERS();
    EXPORT static Enum::type MAX_ATOMIC_COUNTER_BUFFER_BINDINGS();
    EXPORT static Enum::type MAX_ATOMIC_COUNTER_BUFFER_SIZE();
    EXPORT static Enum::type MAX_CLIP_DISTANCES();
    EXPORT static Enum::type MAX_COLOR_ATTACHMENTS();
    EXPORT static Enum::type MAX_COLOR_TEXTURE_SAMPLES();
    EXPORT static Enum::type MAX_COMBINED_ATOMIC_COUNTERS();
    EXPORT static Enum::type MAX_COMBINED_ATOMIC_COUNTER_BUFFERS();
    EXPORT static Enum::type MAX_COMBINED_CLIP_AND_CULL_DISTANCES();
    EXPORT static Enum::type MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS();
    EXPORT static Enum::type MAX_COMBINED_DIMENSIONS();
    EXPORT static Enum::type MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS();
    EXPORT static Enum::type MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS();
    EXPORT static Enum::type MAX_COMBINED_IMAGE_UNIFORMS();
    EXPORT static Enum::type MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS();
    EXPORT static Enum::type MAX_COMBINED_SHADER_OUTPUT_RESOURCES();
    EXPORT static Enum::type MAX_COMBINED_SHADER_STORAGE_BLOCKS();
    EXPORT static Enum::type MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS();
    EXPORT static Enum::type MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS();
    EXPORT static Enum::type MAX_COMBINED_TEXTURE_IMAGE_UNITS();
    EXPORT static Enum::type MAX_COMBINED_UNIFORM_BLOCKS();
    EXPORT static Enum::type MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS();
    EXPORT static Enum::type MAX_COMPUTE_ATOMIC_COUNTERS();
    EXPORT static Enum::type MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS();
    EXPORT static Enum::type MAX_COMPUTE_IMAGE_UNIFORMS();
    EXPORT static Enum::type MAX_COMPUTE_SHADER_STORAGE_BLOCKS();
    EXPORT static Enum::type MAX_COMPUTE_SHARED_MEMORY_SIZE();
    EXPORT static Enum::type MAX_COMPUTE_TEXTURE_IMAGE_UNITS();
    EXPORT static Enum::type MAX_COMPUTE_UNIFORM_BLOCKS();
    EXPORT static Enum::type MAX_COMPUTE_UNIFORM_COMPONENTS();
    EXPORT static Enum::type MAX_COMPUTE_WORK_GROUP_COUNT();
    EXPORT static Enum::type MAX_COMPUTE_WORK_GROUP_INVOCATIONS();
    EXPORT static Enum::type MAX_COMPUTE_WORK_GROUP_SIZE();
    EXPORT static Enum::type MAX_CUBE_MAP_TEXTURE_SIZE();
    EXPORT static Enum::type MAX_CULL_DISTANCES();
    EXPORT static Enum::type MAX_DEBUG_GROUP_STACK_DEPTH();
    EXPORT static Enum::type MAX_DEBUG_LOGGED_MESSAGES();
    EXPORT static Enum::type MAX_DEBUG_MESSAGE_LENGTH();
    EXPORT static Enum::type MAX_DEPTH();
    EXPORT static Enum::type MAX_DEPTH_TEXTURE_SAMPLES();
    EXPORT static Enum::type MAX_DRAW_BUFFERS();
    EXPORT static Enum::type MAX_DUAL_SOURCE_DRAW_BUFFERS();
    EXPORT static Enum::type MAX_ELEMENTS_INDICES();
    EXPORT static Enum::type MAX_ELEMENTS_VERTICES();
    EXPORT static Enum::type MAX_ELEMENT_INDEX();
    EXPORT static Enum::type MAX_FRAGMENT_ATOMIC_COUNTERS();
    EXPORT static Enum::type MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS();
    EXPORT static Enum::type MAX_FRAGMENT_IMAGE_UNIFORMS();
    EXPORT static Enum::type MAX_FRAGMENT_INPUT_COMPONENTS();
    EXPORT static Enum::type MAX_FRAGMENT_INTERPOLATION_OFFSET();
    EXPORT static Enum::type MAX_FRAGMENT_SHADER_STORAGE_BLOCKS();
    EXPORT static Enum::type MAX_FRAGMENT_UNIFORM_BLOCKS();
    EXPORT static Enum::type MAX_FRAGMENT_UNIFORM_COMPONENTS();
    EXPORT static Enum::type MAX_FRAGMENT_UNIFORM_VECTORS();
    EXPORT static Enum::type MAX_FRAMEBUFFER_HEIGHT();
    EXPORT static Enum::type MAX_FRAMEBUFFER_LAYERS();
    EXPORT static Enum::type MAX_FRAMEBUFFER_SAMPLES();
    EXPORT static Enum::type MAX_FRAMEBUFFER_WIDTH();
    EXPORT static Enum::type MAX_GEOMETRY_ATOMIC_COUNTERS();
    EXPORT static Enum::type MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS();
    EXPORT static Enum::type MAX_GEOMETRY_IMAGE_UNIFORMS();
    EXPORT static Enum::type MAX_GEOMETRY_INPUT_COMPONENTS();
    EXPORT static Enum::type MAX_GEOMETRY_OUTPUT_COMPONENTS();
    EXPORT static Enum::type MAX_GEOMETRY_OUTPUT_VERTICES();
    EXPORT static Enum::type MAX_GEOMETRY_SHADER_INVOCATIONS();
    EXPORT static Enum::type MAX_GEOMETRY_SHADER_STORAGE_BLOCKS();
    EXPORT static Enum::type MAX_GEOMETRY_TEXTURE_IMAGE_UNITS();
    EXPORT static Enum::type MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS();
    EXPORT static Enum::type MAX_GEOMETRY_UNIFORM_BLOCKS();
    EXPORT static Enum::type MAX_GEOMETRY_UNIFORM_COMPONENTS();
    EXPORT static Enum::type MAX_HEIGHT();
    EXPORT static Enum::type MAX_IMAGE_SAMPLES();
    EXPORT static Enum::type MAX_IMAGE_UNITS();
    EXPORT static Enum::type MAX_INTEGER_SAMPLES();
    EXPORT static Enum::type MAX_LABEL_LENGTH();
    EXPORT static Enum::type MAX_LAYERS();
    EXPORT static Enum::type MAX_NAME_LENGTH();
    EXPORT static Enum::type MAX_NUM_ACTIVE_VARIABLES();
    EXPORT static Enum::type MAX_NUM_COMPATIBLE_SUBROUTINES();
    EXPORT static Enum::type MAX_PATCH_VERTICES();
    EXPORT static Enum::type MAX_PROGRAM_TEXEL_OFFSET();
    EXPORT static Enum::type MAX_PROGRAM_TEXTURE_GATHER_OFFSET();
    EXPORT static Enum::type MAX_RECTANGLE_TEXTURE_SIZE();
    EXPORT static Enum::type MAX_RENDERBUFFER_SIZE();
    EXPORT static Enum::type MAX_SAMPLES();
    EXPORT static Enum::type MAX_SAMPLE_MASK_WORDS();
    EXPORT static Enum::type MAX_SERVER_WAIT_TIMEOUT();
    EXPORT static Enum::type MAX_SHADER_STORAGE_BLOCK_SIZE();
    EXPORT static Enum::type MAX_SHADER_STORAGE_BUFFER_BINDINGS();
    EXPORT static Enum::type MAX_SUBROUTINES();
    EXPORT static Enum::type MAX_SUBROUTINE_UNIFORM_LOCATIONS();
    EXPORT static Enum::type MAX_TESS_CONTROL_ATOMIC_COUNTERS();
    EXPORT static Enum::type MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS();
    EXPORT static Enum::type MAX_TESS_CONTROL_IMAGE_UNIFORMS();
    EXPORT static Enum::type MAX_TESS_CONTROL_INPUT_COMPONENTS();
    EXPORT static Enum::type MAX_TESS_CONTROL_OUTPUT_COMPONENTS();
    EXPORT static Enum::type MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS();
    EXPORT static Enum::type MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS();
    EXPORT static Enum::type MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS();
    EXPORT static Enum::type MAX_TESS_CONTROL_UNIFORM_BLOCKS();
    EXPORT static Enum::type MAX_TESS_CONTROL_UNIFORM_COMPONENTS();
    EXPORT static Enum::type MAX_TESS_EVALUATION_ATOMIC_COUNTERS();
    EXPORT static Enum::type MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS();
    EXPORT static Enum::type MAX_TESS_EVALUATION_IMAGE_UNIFORMS();
    EXPORT static Enum::type MAX_TESS_EVALUATION_INPUT_COMPONENTS();
    EXPORT static Enum::type MAX_TESS_EVALUATION_OUTPUT_COMPONENTS();
    EXPORT static Enum::type MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS();
    EXPORT static Enum::type MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS();
    EXPORT static Enum::type MAX_TESS_EVALUATION_UNIFORM_BLOCKS();
    EXPORT static Enum::type MAX_TESS_EVALUATION_UNIFORM_COMPONENTS();
    EXPORT static Enum::type MAX_TESS_GEN_LEVEL();
    EXPORT static Enum::type MAX_TESS_PATCH_COMPONENTS();
    EXPORT static Enum::type MAX_TEXTURE_BUFFER_SIZE();
    EXPORT static Enum::type MAX_TEXTURE_IMAGE_UNITS();
    EXPORT static Enum::type MAX_TEXTURE_LOD_BIAS();
    EXPORT static Enum::type MAX_TEXTURE_MAX_ANISOTROPY();
    EXPORT static Enum::type MAX_TEXTURE_SIZE();
    EXPORT static Enum::type MAX_TRANSFORM_FEEDBACK_BUFFERS();
    EXPORT static Enum::type MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS();
    EXPORT static Enum::type MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS();
    EXPORT static Enum::type MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS();
    EXPORT static Enum::type MAX_UNIFORM_BLOCK_SIZE();
    EXPORT static Enum::type MAX_UNIFORM_BUFFER_BINDINGS();
    EXPORT static Enum::type MAX_UNIFORM_LOCATIONS();
    EXPORT static Enum::type MAX_VARYING_COMPONENTS();
    EXPORT static Enum::type MAX_VARYING_FLOATS();
    EXPORT static Enum::type MAX_VARYING_VECTORS();
    EXPORT static Enum::type MAX_VERTEX_ATOMIC_COUNTERS();
    EXPORT static Enum::type MAX_VERTEX_ATOMIC_COUNTER_BUFFERS();
    EXPORT static Enum::type MAX_VERTEX_ATTRIBS();
    EXPORT static Enum::type MAX_VERTEX_ATTRIB_BINDINGS();
    EXPORT static Enum::type MAX_VERTEX_ATTRIB_RELATIVE_OFFSET();
    EXPORT static Enum::type MAX_VERTEX_ATTRIB_STRIDE();
    EXPORT static Enum::type MAX_VERTEX_IMAGE_UNIFORMS();
    EXPORT static Enum::type MAX_VERTEX_OUTPUT_COMPONENTS();
    EXPORT static Enum::type MAX_VERTEX_SHADER_STORAGE_BLOCKS();
    EXPORT static Enum::type MAX_VERTEX_STREAMS();
    EXPORT static Enum::type MAX_VERTEX_TEXTURE_IMAGE_UNITS();
    EXPORT static Enum::type MAX_VERTEX_UNIFORM_BLOCKS();
    EXPORT static Enum::type MAX_VERTEX_UNIFORM_COMPONENTS();
    EXPORT static Enum::type MAX_VERTEX_UNIFORM_VECTORS();
    EXPORT static Enum::type MAX_VIEWPORTS();
    EXPORT static Enum::type MAX_VIEWPORT_DIMS();
    EXPORT static Enum::type MAX_WIDTH();
    EXPORT static Enum::type MEDIUM_FLOAT();
    EXPORT static Enum::type MEDIUM_INT();
    EXPORT static Enum::type MIN();
    EXPORT static Enum::type MINOR_VERSION();
    EXPORT static Enum::type MIN_FRAGMENT_INTERPOLATION_OFFSET();
    EXPORT static Enum::type MIN_MAP_BUFFER_ALIGNMENT();
    EXPORT static Enum::type MIN_PROGRAM_TEXEL_OFFSET();
    EXPORT static Enum::type MIN_PROGRAM_TEXTURE_GATHER_OFFSET();
    EXPORT static Enum::type MIN_SAMPLE_SHADING_VALUE();
    EXPORT static Enum::type MIPMAP();
    EXPORT static Enum::type MIRRORED_REPEAT();
    EXPORT static Enum::type MIRROR_CLAMP_TO_EDGE();
    EXPORT static Enum::type MULTISAMPLE();
    EXPORT static Enum::type NAME_LENGTH();
    EXPORT static Enum::type NAND();
    EXPORT static Enum::type NEAREST();
    EXPORT static Enum::type NEAREST_MIPMAP_LINEAR();
    EXPORT static Enum::type NEAREST_MIPMAP_NEAREST();
    EXPORT static Enum::type NEGATIVE_ONE_TO_ONE();
    EXPORT static Enum::type NEVER();
    EXPORT static Enum::type NICEST();
    EXPORT static Enum::type NONE();
    EXPORT static Enum::type NOOP();
    EXPORT static Enum::type NOR();
    EXPORT static Enum::type NOTEQUAL();
    EXPORT static Enum::type NO_ERROR();
    EXPORT static Enum::type NO_RESET_NOTIFICATION();
    EXPORT static Enum::type NUM_ACTIVE_VARIABLES();
    EXPORT static Enum::type NUM_COMPATIBLE_SUBROUTINES();
    EXPORT static Enum::type NUM_COMPRESSED_TEXTURE_FORMATS();
    EXPORT static Enum::type NUM_EXTENSIONS();
    EXPORT static Enum::type NUM_PROGRAM_BINARY_FORMATS();
    EXPORT static Enum::type NUM_SAMPLE_COUNTS();
    EXPORT static Enum::type NUM_SHADER_BINARY_FORMATS();
    EXPORT static Enum::type NUM_SHADING_LANGUAGE_VERSIONS();
    EXPORT static Enum::type NUM_SPIR_V_EXTENSIONS();
    EXPORT static Enum::type OBJECT_TYPE();
    EXPORT static Enum::type OFFSET();
    EXPORT static Enum::type ONE();
    EXPORT static Enum::type ONE_MINUS_CONSTANT_ALPHA();
    EXPORT static Enum::type ONE_MINUS_CONSTANT_COLOR();
    EXPORT static Enum::type ONE_MINUS_DST_ALPHA();
    EXPORT static Enum::type ONE_MINUS_DST_COLOR();
    EXPORT static Enum::type ONE_MINUS_SRC1_ALPHA();
    EXPORT static Enum::type ONE_MINUS_SRC1_COLOR();
    EXPORT static Enum::type ONE_MINUS_SRC_ALPHA();
    EXPORT static Enum::type ONE_MINUS_SRC_COLOR();
    EXPORT static Enum::type OR();
    EXPORT static Enum::type OR_INVERTED();
    EXPORT static Enum::type OR_REVERSE();
    EXPORT static Enum::type OUT_OF_MEMORY();
    EXPORT static Enum::type PACK_ALIGNMENT();
    EXPORT static Enum::type PACK_COMPRESSED_BLOCK_DEPTH();
    EXPORT static Enum::type PACK_COMPRESSED_BLOCK_HEIGHT();
    EXPORT static Enum::type PACK_COMPRESSED_BLOCK_SIZE();
    EXPORT static Enum::type PACK_COMPRESSED_BLOCK_WIDTH();
    EXPORT static Enum::type PACK_IMAGE_HEIGHT();
    EXPORT static Enum::type PACK_LSB_FIRST();
    EXPORT static Enum::type PACK_ROW_LENGTH();
    EXPORT static Enum::type PACK_SKIP_IMAGES();
    EXPORT static Enum::type PACK_SKIP_PIXELS();
    EXPORT static Enum::type PACK_SKIP_ROWS();
    EXPORT static Enum::type PACK_SWAP_BYTES();
    EXPORT static Enum::type PARAMETER_BUFFER();
    EXPORT static Enum::type PARAMETER_BUFFER_BINDING();
    EXPORT static Enum::type PATCHES();
    EXPORT static Enum::type PATCH_DEFAULT_INNER_LEVEL();
    EXPORT static Enum::type PATCH_DEFAULT_OUTER_LEVEL();
    EXPORT static Enum::type PATCH_VERTICES();
    EXPORT static Enum::type PIXEL_BUFFER_BARRIER_BIT();
    EXPORT static Enum::type PIXEL_PACK_BUFFER();
    EXPORT static Enum::type PIXEL_PACK_BUFFER_BINDING();
    EXPORT static Enum::type PIXEL_UNPACK_BUFFER();
    EXPORT static Enum::type PIXEL_UNPACK_BUFFER_BINDING();
    EXPORT static Enum::type POINT();
    EXPORT static Enum::type POINTS();
    EXPORT static Enum::type POINT_FADE_THRESHOLD_SIZE();
    EXPORT static Enum::type POINT_SIZE();
    EXPORT static Enum::type POINT_SIZE_GRANULARITY();
    EXPORT static Enum::type POINT_SIZE_RANGE();
    EXPORT static Enum::type POINT_SPRITE_COORD_ORIGIN();
    EXPORT static Enum::type POLYGON_MODE();
    EXPORT static Enum::type POLYGON_OFFSET_CLAMP();
    EXPORT static Enum::type POLYGON_OFFSET_FACTOR();
    EXPORT static Enum::type POLYGON_OFFSET_FILL();
    EXPORT static Enum::type POLYGON_OFFSET_LINE();
    EXPORT static Enum::type POLYGON_OFFSET_POINT();
    EXPORT static Enum::type POLYGON_OFFSET_UNITS();
    EXPORT static Enum::type POLYGON_SMOOTH();
    EXPORT static Enum::type POLYGON_SMOOTH_HINT();
    EXPORT static Enum::type PRIMITIVES_GENERATED();
    EXPORT static Enum::type PRIMITIVES_SUBMITTED();
    EXPORT static Enum::type PRIMITIVE_RESTART();
    EXPORT static Enum::type PRIMITIVE_RESTART_FIXED_INDEX();
    EXPORT static Enum::type PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED();
    EXPORT static Enum::type PRIMITIVE_RESTART_INDEX();
    EXPORT static Enum::type PROGRAM();
    EXPORT static Enum::type PROGRAM_BINARY_FORMATS();
    EXPORT static Enum::type PROGRAM_BINARY_LENGTH();
    EXPORT static Enum::type PROGRAM_BINARY_RETRIEVABLE_HINT();
    EXPORT static Enum::type PROGRAM_INPUT();
    EXPORT static Enum::type PROGRAM_OUTPUT();
    EXPORT static Enum::type PROGRAM_PIPELINE();
    EXPORT static Enum::type PROGRAM_PIPELINE_BINDING();
    EXPORT static Enum::type PROGRAM_POINT_SIZE();
    EXPORT static Enum::type PROGRAM_SEPARABLE();
    EXPORT static Enum::type PROVOKING_VERTEX();
    EXPORT static Enum::type PROXY_TEXTURE_1D();
    EXPORT static Enum::type PROXY_TEXTURE_1D_ARRAY();
    EXPORT static Enum::type PROXY_TEXTURE_2D();
    EXPORT static Enum::type PROXY_TEXTURE_2D_ARRAY();
    EXPORT static Enum::type PROXY_TEXTURE_2D_MULTISAMPLE();
    EXPORT static Enum::type PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY();
    EXPORT static Enum::type PROXY_TEXTURE_3D();
    EXPORT static Enum::type PROXY_TEXTURE_CUBE_MAP();
    EXPORT static Enum::type PROXY_TEXTURE_CUBE_MAP_ARRAY();
    EXPORT static Enum::type PROXY_TEXTURE_RECTANGLE();
    EXPORT static Enum::type QUADS();
    EXPORT static Enum::type QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION();
    EXPORT static Enum::type QUERY();
    EXPORT static Enum::type QUERY_BUFFER();
    EXPORT static Enum::type QUERY_BUFFER_BARRIER_BIT();
    EXPORT static Enum::type QUERY_BUFFER_BINDING();
    EXPORT static Enum::type QUERY_BY_REGION_NO_WAIT();
    EXPORT static Enum::type QUERY_BY_REGION_NO_WAIT_INVERTED();
    EXPORT static Enum::type QUERY_BY_REGION_WAIT();
    EXPORT static Enum::type QUERY_BY_REGION_WAIT_INVERTED();
    EXPORT static Enum::type QUERY_COUNTER_BITS();
    EXPORT static Enum::type QUERY_NO_WAIT();
    EXPORT static Enum::type QUERY_NO_WAIT_INVERTED();
    EXPORT static Enum::type QUERY_RESULT();
    EXPORT static Enum::type QUERY_RESULT_AVAILABLE();
    EXPORT static Enum::type QUERY_RESULT_NO_WAIT();
    EXPORT static Enum::type QUERY_TARGET();
    EXPORT static Enum::type QUERY_WAIT();
    EXPORT static Enum::type QUERY_WAIT_INVERTED();
    EXPORT static Enum::type R11F_G11F_B10F();
    EXPORT static Enum::type R16();
    EXPORT static Enum::type R16F();
    EXPORT static Enum::type R16I();
    EXPORT static Enum::type R16UI();
    EXPORT static Enum::type R16_SNORM();
    EXPORT static Enum::type R32F();
    EXPORT static Enum::type R32I();
    EXPORT static Enum::type R32UI();
    EXPORT static Enum::type R3_G3_B2();
    EXPORT static Enum::type R8();
    EXPORT static Enum::type R8I();
    EXPORT static Enum::type R8UI();
    EXPORT static Enum::type R8_SNORM();
    EXPORT static Enum::type RASTERIZER_DISCARD();
    EXPORT static Enum::type READ_BUFFER();
    EXPORT static Enum::type READ_FRAMEBUFFER();
    EXPORT static Enum::type READ_FRAMEBUFFER_BINDING();
    EXPORT static Enum::type READ_ONLY();
    EXPORT static Enum::type READ_PIXELS();
    EXPORT static Enum::type READ_PIXELS_FORMAT();
    EXPORT static Enum::type READ_PIXELS_TYPE();
    EXPORT static Enum::type READ_WRITE();
    EXPORT static Enum::type RED();
    EXPORT static Enum::type RED_INTEGER();
    EXPORT static Enum::type REFERENCED_BY_COMPUTE_SHADER();
    EXPORT static Enum::type REFERENCED_BY_FRAGMENT_SHADER();
    EXPORT static Enum::type REFERENCED_BY_GEOMETRY_SHADER();
    EXPORT static Enum::type REFERENCED_BY_TESS_CONTROL_SHADER();
    EXPORT static Enum::type REFERENCED_BY_TESS_EVALUATION_SHADER();
    EXPORT static Enum::type REFERENCED_BY_VERTEX_SHADER();
    EXPORT static Enum::type RENDERBUFFER();
    EXPORT static Enum::type RENDERBUFFER_ALPHA_SIZE();
    EXPORT static Enum::type RENDERBUFFER_BINDING();
    EXPORT static Enum::type RENDERBUFFER_BLUE_SIZE();
    EXPORT static Enum::type RENDERBUFFER_DEPTH_SIZE();
    EXPORT static Enum::type RENDERBUFFER_GREEN_SIZE();
    EXPORT static Enum::type RENDERBUFFER_HEIGHT();
    EXPORT static Enum::type RENDERBUFFER_INTERNAL_FORMAT();
    EXPORT static Enum::type RENDERBUFFER_RED_SIZE();
    EXPORT static Enum::type RENDERBUFFER_SAMPLES();
    EXPORT static Enum::type RENDERBUFFER_STENCIL_SIZE();
    EXPORT static Enum::type RENDERBUFFER_WIDTH();
    EXPORT static Enum::type RENDERER();
    EXPORT static Enum::type REPEAT();
    EXPORT static Enum::type REPLACE();
    EXPORT static Enum::type RESET_NOTIFICATION_STRATEGY();
    EXPORT static Enum::type RG();
    EXPORT static Enum::type RG16();
    EXPORT static Enum::type RG16F();
    EXPORT static Enum::type RG16I();
    EXPORT static Enum::type RG16UI();
    EXPORT static Enum::type RG16_SNORM();
    EXPORT static Enum::type RG32F();
    EXPORT static Enum::type RG32I();
    EXPORT static Enum::type RG32UI();
    EXPORT static Enum::type RG8();
    EXPORT static Enum::type RG8I();
    EXPORT static Enum::type RG8UI();
    EXPORT static Enum::type RG8_SNORM();
    EXPORT static Enum::type RGB();
    EXPORT static Enum::type RGB10();
    EXPORT static Enum::type RGB10_A2();
    EXPORT static Enum::type RGB10_A2UI();
    EXPORT static Enum::type RGB12();
    EXPORT static Enum::type RGB16();
    EXPORT static Enum::type RGB16F();
    EXPORT static Enum::type RGB16I();
    EXPORT static Enum::type RGB16UI();
    EXPORT static Enum::type RGB16_SNORM();
    EXPORT static Enum::type RGB32F();
    EXPORT static Enum::type RGB32I();
    EXPORT static Enum::type RGB32UI();
    EXPORT static Enum::type RGB4();
    EXPORT static Enum::type RGB5();
    EXPORT static Enum::type RGB565();
    EXPORT static Enum::type RGB5_A1();
    EXPORT static Enum::type RGB8();
    EXPORT static Enum::type RGB8I();
    EXPORT static Enum::type RGB8UI();
    EXPORT static Enum::type RGB8_SNORM();
    EXPORT static Enum::type RGB9_E5();
    EXPORT static Enum::type RGBA();
    EXPORT static Enum::type RGBA12();
    EXPORT static Enum::type RGBA16();
    EXPORT static Enum::type RGBA16F();
    EXPORT static Enum::type RGBA16I();
    EXPORT static Enum::type RGBA16UI();
    EXPORT static Enum::type RGBA16_SNORM();
    EXPORT static Enum::type RGBA2();
    EXPORT static Enum::type RGBA32F();
    EXPORT static Enum::type RGBA32I();
    EXPORT static Enum::type RGBA32UI();
    EXPORT static Enum::type RGBA4();
    EXPORT static Enum::type RGBA8();
    EXPORT static Enum::type RGBA8I();
    EXPORT static Enum::type RGBA8UI();
    EXPORT static Enum::type RGBA8_SNORM();
    EXPORT static Enum::type RGBA_INTEGER();
    EXPORT static Enum::type RGB_INTEGER();
    EXPORT static Enum::type RG_INTEGER();
    EXPORT static Enum::type RIGHT();
    EXPORT static Enum::type SAMPLER();
    EXPORT static Enum::type SAMPLER_1D();
    EXPORT static Enum::type SAMPLER_1D_ARRAY();
    EXPORT static Enum::type SAMPLER_1D_ARRAY_SHADOW();
    EXPORT static Enum::type SAMPLER_1D_SHADOW();
    EXPORT static Enum::type SAMPLER_2D();
    EXPORT static Enum::type SAMPLER_2D_ARRAY();
    EXPORT static Enum::type SAMPLER_2D_ARRAY_SHADOW();
    EXPORT static Enum::type SAMPLER_2D_MULTISAMPLE();
    EXPORT static Enum::type SAMPLER_2D_MULTISAMPLE_ARRAY();
    EXPORT static Enum::type SAMPLER_2D_RECT();
    EXPORT static Enum::type SAMPLER_2D_RECT_SHADOW();
    EXPORT static Enum::type SAMPLER_2D_SHADOW();
    EXPORT static Enum::type SAMPLER_3D();
    EXPORT static Enum::type SAMPLER_BINDING();
    EXPORT static Enum::type SAMPLER_BUFFER();
    EXPORT static Enum::type SAMPLER_CUBE();
    EXPORT static Enum::type SAMPLER_CUBE_MAP_ARRAY();
    EXPORT static Enum::type SAMPLER_CUBE_MAP_ARRAY_SHADOW();
    EXPORT static Enum::type SAMPLER_CUBE_SHADOW();
    EXPORT static Enum::type SAMPLES();
    EXPORT static Enum::type SAMPLES_PASSED();
    EXPORT static Enum::type SAMPLE_ALPHA_TO_COVERAGE();
    EXPORT static Enum::type SAMPLE_ALPHA_TO_ONE();
    EXPORT static Enum::type SAMPLE_BUFFERS();
    EXPORT static Enum::type SAMPLE_COVERAGE();
    EXPORT static Enum::type SAMPLE_COVERAGE_INVERT();
    EXPORT static Enum::type SAMPLE_COVERAGE_VALUE();
    EXPORT static Enum::type SAMPLE_MASK();
    EXPORT static Enum::type SAMPLE_MASK_VALUE();
    EXPORT static Enum::type SAMPLE_POSITION();
    EXPORT static Enum::type SAMPLE_SHADING();
    EXPORT static Enum::type SCISSOR_BOX();
    EXPORT static Enum::type SCISSOR_TEST();
    EXPORT static Enum::type SEPARATE_ATTRIBS();
    EXPORT static Enum::type SET();
    EXPORT static Enum::type SHADER();
    EXPORT static Enum::type SHADER_BINARY_FORMATS();
    EXPORT static Enum::type SHADER_BINARY_FORMAT_SPIR_V();
    EXPORT static Enum::type SHADER_COMPILER();
    EXPORT static Enum::type SHADER_IMAGE_ACCESS_BARRIER_BIT();
    EXPORT static Enum::type SHADER_IMAGE_ATOMIC();
    EXPORT static Enum::type SHADER_IMAGE_LOAD();
    EXPORT static Enum::type SHADER_IMAGE_STORE();
    EXPORT static Enum::type SHADER_SOURCE_LENGTH();
    EXPORT static Enum::type SHADER_STORAGE_BARRIER_BIT();
    EXPORT static Enum::type SHADER_STORAGE_BLOCK();
    EXPORT static Enum::type SHADER_STORAGE_BUFFER();
    EXPORT static Enum::type SHADER_STORAGE_BUFFER_BINDING();
    EXPORT static Enum::type SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT();
    EXPORT static Enum::type SHADER_STORAGE_BUFFER_SIZE();
    EXPORT static Enum::type SHADER_STORAGE_BUFFER_START();
    EXPORT static Enum::type SHADER_TYPE();
    EXPORT static Enum::type SHADING_LANGUAGE_VERSION();
    EXPORT static Enum::type SHORT();
    EXPORT static Enum::type SIGNALED();
    EXPORT static Enum::type SIGNED_NORMALIZED();
    EXPORT static Enum::type SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST();
    EXPORT static Enum::type SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE();
    EXPORT static Enum::type SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST();
    EXPORT static Enum::type SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE();
    EXPORT static Enum::type SMOOTH_LINE_WIDTH_GRANULARITY();
    EXPORT static Enum::type SMOOTH_LINE_WIDTH_RANGE();
    EXPORT static Enum::type SMOOTH_POINT_SIZE_GRANULARITY();
    EXPORT static Enum::type SMOOTH_POINT_SIZE_RANGE();
    EXPORT static Enum::type SPIR_V_BINARY();
    EXPORT static Enum::type SPIR_V_EXTENSIONS();
    EXPORT static Enum::type SRC1_ALPHA();
    EXPORT static Enum::type SRC1_COLOR();
    EXPORT static Enum::type SRC_ALPHA();
    EXPORT static Enum::type SRC_ALPHA_SATURATE();
    EXPORT static Enum::type SRC_COLOR();
    EXPORT static Enum::type SRGB();
    EXPORT static Enum::type SRGB8();
    EXPORT static Enum::type SRGB8_ALPHA8();
    EXPORT static Enum::type SRGB_ALPHA();
    EXPORT static Enum::type SRGB_READ();
    EXPORT static Enum::type SRGB_WRITE();
    EXPORT static Enum::type STACK_OVERFLOW();
    EXPORT static Enum::type STACK_UNDERFLOW();
    EXPORT static Enum::type STATIC_COPY();
    EXPORT static Enum::type STATIC_DRAW();
    EXPORT static Enum::type STATIC_READ();
    EXPORT static Enum::type STENCIL();
    EXPORT static Enum::type STENCIL_ATTACHMENT();
    EXPORT static Enum::type STENCIL_BACK_FAIL();
    EXPORT static Enum::type STENCIL_BACK_FUNC();
    EXPORT static Enum::type STENCIL_BACK_PASS_DEPTH_FAIL();
    EXPORT static Enum::type STENCIL_BACK_PASS_DEPTH_PASS();
    EXPORT static Enum::type STENCIL_BACK_REF();
    EXPORT static Enum::type STENCIL_BACK_VALUE_MASK();
    EXPORT static Enum::type STENCIL_BACK_WRITEMASK();
    EXPORT static Enum::type STENCIL_BUFFER_BIT();
    EXPORT static Enum::type STENCIL_CLEAR_VALUE();
    EXPORT static Enum::type STENCIL_COMPONENTS();
    EXPORT static Enum::type STENCIL_FAIL();
    EXPORT static Enum::type STENCIL_FUNC();
    EXPORT static Enum::type STENCIL_INDEX();
    EXPORT static Enum::type STENCIL_INDEX1();
    EXPORT static Enum::type STENCIL_INDEX16();
    EXPORT static Enum::type STENCIL_INDEX4();
    EXPORT static Enum::type STENCIL_INDEX8();
    EXPORT static Enum::type STENCIL_PASS_DEPTH_FAIL();
    EXPORT static Enum::type STENCIL_PASS_DEPTH_PASS();
    EXPORT static Enum::type STENCIL_REF();
    EXPORT static Enum::type STENCIL_RENDERABLE();
    EXPORT static Enum::type STENCIL_TEST();
    EXPORT static Enum::type STENCIL_VALUE_MASK();
    EXPORT static Enum::type STENCIL_WRITEMASK();
    EXPORT static Enum::type STEREO();
    EXPORT static Enum::type STREAM_COPY();
    EXPORT static Enum::type STREAM_DRAW();
    EXPORT static Enum::type STREAM_READ();
    EXPORT static Enum::type SUBPIXEL_BITS();
    EXPORT static Enum::type SYNC_CONDITION();
    EXPORT static Enum::type SYNC_FENCE();
    EXPORT static Enum::type SYNC_FLAGS();
    EXPORT static Enum::type SYNC_FLUSH_COMMANDS_BIT();
    EXPORT static Enum::type SYNC_GPU_COMMANDS_COMPLETE();
    EXPORT static Enum::type SYNC_STATUS();
    EXPORT static Enum::type TESS_CONTROL_OUTPUT_VERTICES();
    EXPORT static Enum::type TESS_CONTROL_SHADER();
    EXPORT static Enum::type TESS_CONTROL_SHADER_BIT();
    EXPORT static Enum::type TESS_CONTROL_SHADER_PATCHES();
    EXPORT static Enum::type TESS_CONTROL_SUBROUTINE();
    EXPORT static Enum::type TESS_CONTROL_SUBROUTINE_UNIFORM();
    EXPORT static Enum::type TESS_CONTROL_TEXTURE();
    EXPORT static Enum::type TESS_EVALUATION_SHADER();
    EXPORT static Enum::type TESS_EVALUATION_SHADER_BIT();
    EXPORT static Enum::type TESS_EVALUATION_SHADER_INVOCATIONS();
    EXPORT static Enum::type TESS_EVALUATION_SUBROUTINE();
    EXPORT static Enum::type TESS_EVALUATION_SUBROUTINE_UNIFORM();
    EXPORT static Enum::type TESS_EVALUATION_TEXTURE();
    EXPORT static Enum::type TESS_GEN_MODE();
    EXPORT static Enum::type TESS_GEN_POINT_MODE();
    EXPORT static Enum::type TESS_GEN_SPACING();
    EXPORT static Enum::type TESS_GEN_VERTEX_ORDER();
    EXPORT static Enum::type TEXTURE();
    EXPORT static Enum::type TEXTURE0();
    EXPORT static Enum::type TEXTURE1();
    EXPORT static Enum::type TEXTURE10();
    EXPORT static Enum::type TEXTURE11();
    EXPORT static Enum::type TEXTURE12();
    EXPORT static Enum::type TEXTURE13();
    EXPORT static Enum::type TEXTURE14();
    EXPORT static Enum::type TEXTURE15();
    EXPORT static Enum::type TEXTURE16();
    EXPORT static Enum::type TEXTURE17();
    EXPORT static Enum::type TEXTURE18();
    EXPORT static Enum::type TEXTURE19();
    EXPORT static Enum::type TEXTURE2();
    EXPORT static Enum::type TEXTURE20();
    EXPORT static Enum::type TEXTURE21();
    EXPORT static Enum::type TEXTURE22();
    EXPORT static Enum::type TEXTURE23();
    EXPORT static Enum::type TEXTURE24();
    EXPORT static Enum::type TEXTURE25();
    EXPORT static Enum::type TEXTURE26();
    EXPORT static Enum::type TEXTURE27();
    EXPORT static Enum::type TEXTURE28();
    EXPORT static Enum::type TEXTURE29();
    EXPORT static Enum::type TEXTURE3();
    EXPORT static Enum::type TEXTURE30();
    EXPORT static Enum::type TEXTURE31();
    EXPORT static Enum::type TEXTURE4();
    EXPORT static Enum::type TEXTURE5();
    EXPORT static Enum::type TEXTURE6();
    EXPORT static Enum::type TEXTURE7();
    EXPORT static Enum::type TEXTURE8();
    EXPORT static Enum::type TEXTURE9();
    EXPORT static Enum::type TEXTURE_1D();
    EXPORT static Enum::type TEXTURE_1D_ARRAY();
    EXPORT static Enum::type TEXTURE_2D();
    EXPORT static Enum::type TEXTURE_2D_ARRAY();
    EXPORT static Enum::type TEXTURE_2D_MULTISAMPLE();
    EXPORT static Enum::type TEXTURE_2D_MULTISAMPLE_ARRAY();
    EXPORT static Enum::type TEXTURE_3D();
    EXPORT static Enum::type TEXTURE_ALPHA_SIZE();
    EXPORT static Enum::type TEXTURE_ALPHA_TYPE();
    EXPORT static Enum::type TEXTURE_BASE_LEVEL();
    EXPORT static Enum::type TEXTURE_BINDING_1D();
    EXPORT static Enum::type TEXTURE_BINDING_1D_ARRAY();
    EXPORT static Enum::type TEXTURE_BINDING_2D();
    EXPORT static Enum::type TEXTURE_BINDING_2D_ARRAY();
    EXPORT static Enum::type TEXTURE_BINDING_2D_MULTISAMPLE();
    EXPORT static Enum::type TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY();
    EXPORT static Enum::type TEXTURE_BINDING_3D();
    EXPORT static Enum::type TEXTURE_BINDING_BUFFER();
    EXPORT static Enum::type TEXTURE_BINDING_CUBE_MAP();
    EXPORT static Enum::type TEXTURE_BINDING_CUBE_MAP_ARRAY();
    EXPORT static Enum::type TEXTURE_BINDING_RECTANGLE();
    EXPORT static Enum::type TEXTURE_BLUE_SIZE();
    EXPORT static Enum::type TEXTURE_BLUE_TYPE();
    EXPORT static Enum::type TEXTURE_BORDER_COLOR();
    EXPORT static Enum::type TEXTURE_BUFFER();
    EXPORT static Enum::type TEXTURE_BUFFER_BINDING();
    EXPORT static Enum::type TEXTURE_BUFFER_DATA_STORE_BINDING();
    EXPORT static Enum::type TEXTURE_BUFFER_OFFSET();
    EXPORT static Enum::type TEXTURE_BUFFER_OFFSET_ALIGNMENT();
    EXPORT static Enum::type TEXTURE_BUFFER_SIZE();
    EXPORT static Enum::type TEXTURE_COMPARE_FUNC();
    EXPORT static Enum::type TEXTURE_COMPARE_MODE();
    EXPORT static Enum::type TEXTURE_COMPRESSED();
    EXPORT static Enum::type TEXTURE_COMPRESSED_BLOCK_HEIGHT();
    EXPORT static Enum::type TEXTURE_COMPRESSED_BLOCK_SIZE();
    EXPORT static Enum::type TEXTURE_COMPRESSED_BLOCK_WIDTH();
    EXPORT static Enum::type TEXTURE_COMPRESSED_IMAGE_SIZE();
    EXPORT static Enum::type TEXTURE_COMPRESSION_HINT();
    EXPORT static Enum::type TEXTURE_CUBE_MAP();
    EXPORT static Enum::type TEXTURE_CUBE_MAP_ARRAY();
    EXPORT static Enum::type TEXTURE_CUBE_MAP_NEGATIVE_X();
    EXPORT static Enum::type TEXTURE_CUBE_MAP_NEGATIVE_Y();
    EXPORT static Enum::type TEXTURE_CUBE_MAP_NEGATIVE_Z();
    EXPORT static Enum::type TEXTURE_CUBE_MAP_POSITIVE_X();
    EXPORT static Enum::type TEXTURE_CUBE_MAP_POSITIVE_Y();
    EXPORT static Enum::type TEXTURE_CUBE_MAP_POSITIVE_Z();
    EXPORT static Enum::type TEXTURE_CUBE_MAP_SEAMLESS();
    EXPORT static Enum::type TEXTURE_DEPTH();
    EXPORT static Enum::type TEXTURE_DEPTH_SIZE();
    EXPORT static Enum::type TEXTURE_DEPTH_TYPE();
    EXPORT static Enum::type TEXTURE_FETCH_BARRIER_BIT();
    EXPORT static Enum::type TEXTURE_FIXED_SAMPLE_LOCATIONS();
    EXPORT static Enum::type TEXTURE_GATHER();
    EXPORT static Enum::type TEXTURE_GATHER_SHADOW();
    EXPORT static Enum::type TEXTURE_GREEN_SIZE();
    EXPORT static Enum::type TEXTURE_GREEN_TYPE();
    EXPORT static Enum::type TEXTURE_HEIGHT();
    EXPORT static Enum::type TEXTURE_IMAGE_FORMAT();
    EXPORT static Enum::type TEXTURE_IMAGE_TYPE();
    EXPORT static Enum::type TEXTURE_IMMUTABLE_FORMAT();
    EXPORT static Enum::type TEXTURE_IMMUTABLE_LEVELS();
    EXPORT static Enum::type TEXTURE_INTERNAL_FORMAT();
    EXPORT static Enum::type TEXTURE_LOD_BIAS();
    EXPORT static Enum::type TEXTURE_MAG_FILTER();
    EXPORT static Enum::type TEXTURE_MAX_ANISOTROPY();
    EXPORT static Enum::type TEXTURE_MAX_LEVEL();
    EXPORT static Enum::type TEXTURE_MAX_LOD();
    EXPORT static Enum::type TEXTURE_MIN_FILTER();
    EXPORT static Enum::type TEXTURE_MIN_LOD();
    EXPORT static Enum::type TEXTURE_RECTANGLE();
    EXPORT static Enum::type TEXTURE_RED_SIZE();
    EXPORT static Enum::type TEXTURE_RED_TYPE();
    EXPORT static Enum::type TEXTURE_SAMPLES();
    EXPORT static Enum::type TEXTURE_SHADOW();
    EXPORT static Enum::type TEXTURE_SHARED_SIZE();
    EXPORT static Enum::type TEXTURE_STENCIL_SIZE();
    EXPORT static Enum::type TEXTURE_SWIZZLE_A();
    EXPORT static Enum::type TEXTURE_SWIZZLE_B();
    EXPORT static Enum::type TEXTURE_SWIZZLE_G();
    EXPORT static Enum::type TEXTURE_SWIZZLE_R();
    EXPORT static Enum::type TEXTURE_SWIZZLE_RGBA();
    EXPORT static Enum::type TEXTURE_TARGET();
    EXPORT static Enum::type TEXTURE_UPDATE_BARRIER_BIT();
    EXPORT static Enum::type TEXTURE_VIEW();
    EXPORT static Enum::type TEXTURE_VIEW_MIN_LAYER();
    EXPORT static Enum::type TEXTURE_VIEW_MIN_LEVEL();
    EXPORT static Enum::type TEXTURE_VIEW_NUM_LAYERS();
    EXPORT static Enum::type TEXTURE_VIEW_NUM_LEVELS();
    EXPORT static Enum::type TEXTURE_WIDTH();
    EXPORT static Enum::type TEXTURE_WRAP_R();
    EXPORT static Enum::type TEXTURE_WRAP_S();
    EXPORT static Enum::type TEXTURE_WRAP_T();
    EXPORT static Enum::type TIMEOUT_EXPIRED();
    EXPORT static Enum::type TIMEOUT_IGNORED();
    EXPORT static Enum::type TIMESTAMP();
    EXPORT static Enum::type TIME_ELAPSED();
    EXPORT static Enum::type TOP_LEVEL_ARRAY_SIZE();
    EXPORT static Enum::type TOP_LEVEL_ARRAY_STRIDE();
    EXPORT static Enum::type TRANSFORM_FEEDBACK();
    EXPORT static Enum::type TRANSFORM_FEEDBACK_ACTIVE();
    EXPORT static Enum::type TRANSFORM_FEEDBACK_BARRIER_BIT();
    EXPORT static Enum::type TRANSFORM_FEEDBACK_BINDING();
    EXPORT static Enum::type TRANSFORM_FEEDBACK_BUFFER();
    EXPORT static Enum::type TRANSFORM_FEEDBACK_BUFFER_ACTIVE();
    EXPORT static Enum::type TRANSFORM_FEEDBACK_BUFFER_BINDING();
    EXPORT static Enum::type TRANSFORM_FEEDBACK_BUFFER_INDEX();
    EXPORT static Enum::type TRANSFORM_FEEDBACK_BUFFER_MODE();
    EXPORT static Enum::type TRANSFORM_FEEDBACK_BUFFER_PAUSED();
    EXPORT static Enum::type TRANSFORM_FEEDBACK_BUFFER_SIZE();
    EXPORT static Enum::type TRANSFORM_FEEDBACK_BUFFER_START();
    EXPORT static Enum::type TRANSFORM_FEEDBACK_BUFFER_STRIDE();
    EXPORT static Enum::type TRANSFORM_FEEDBACK_OVERFLOW();
    EXPORT static Enum::type TRANSFORM_FEEDBACK_PAUSED();
    EXPORT static Enum::type TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN();
    EXPORT static Enum::type TRANSFORM_FEEDBACK_STREAM_OVERFLOW();
    EXPORT static Enum::type TRANSFORM_FEEDBACK_VARYING();
    EXPORT static Enum::type TRANSFORM_FEEDBACK_VARYINGS();
    EXPORT static Enum::type TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH();
    EXPORT static Enum::type TRIANGLES();
    EXPORT static Enum::type TRIANGLES_ADJACENCY();
    EXPORT static Enum::type TRIANGLE_FAN();
    EXPORT static Enum::type TRIANGLE_STRIP();
    EXPORT static Enum::type TRIANGLE_STRIP_ADJACENCY();
    EXPORT static Enum::type TRUE();
    EXPORT static Enum::type TYPE();
    EXPORT static Enum::type UNDEFINED_VERTEX();
    EXPORT static Enum::type UNIFORM();
    EXPORT static Enum::type UNIFORM_ARRAY_STRIDE();
    EXPORT static Enum::type UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX();
    EXPORT static Enum::type UNIFORM_BARRIER_BIT();
    EXPORT static Enum::type UNIFORM_BLOCK();
    EXPORT static Enum::type UNIFORM_BLOCK_ACTIVE_UNIFORMS();
    EXPORT static Enum::type UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES();
    EXPORT static Enum::type UNIFORM_BLOCK_BINDING();
    EXPORT static Enum::type UNIFORM_BLOCK_DATA_SIZE();
    EXPORT static Enum::type UNIFORM_BLOCK_INDEX();
    EXPORT static Enum::type UNIFORM_BLOCK_NAME_LENGTH();
    EXPORT static Enum::type UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER();
    EXPORT static Enum::type UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER();
    EXPORT static Enum::type UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER();
    EXPORT static Enum::type UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER();
    EXPORT static Enum::type UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER();
    EXPORT static Enum::type UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER();
    EXPORT static Enum::type UNIFORM_BUFFER();
    EXPORT static Enum::type UNIFORM_BUFFER_BINDING();
    EXPORT static Enum::type UNIFORM_BUFFER_OFFSET_ALIGNMENT();
    EXPORT static Enum::type UNIFORM_BUFFER_SIZE();
    EXPORT static Enum::type UNIFORM_BUFFER_START();
    EXPORT static Enum::type UNIFORM_IS_ROW_MAJOR();
    EXPORT static Enum::type UNIFORM_MATRIX_STRIDE();
    EXPORT static Enum::type UNIFORM_NAME_LENGTH();
    EXPORT static Enum::type UNIFORM_OFFSET();
    EXPORT static Enum::type UNIFORM_SIZE();
    EXPORT static Enum::type UNIFORM_TYPE();
    EXPORT static Enum::type UNKNOWN_CONTEXT_RESET();
    EXPORT static Enum::type UNPACK_ALIGNMENT();
    EXPORT static Enum::type UNPACK_COMPRESSED_BLOCK_DEPTH();
    EXPORT static Enum::type UNPACK_COMPRESSED_BLOCK_HEIGHT();
    EXPORT static Enum::type UNPACK_COMPRESSED_BLOCK_SIZE();
    EXPORT static Enum::type UNPACK_COMPRESSED_BLOCK_WIDTH();
    EXPORT static Enum::type UNPACK_IMAGE_HEIGHT();
    EXPORT static Enum::type UNPACK_LSB_FIRST();
    EXPORT static Enum::type UNPACK_ROW_LENGTH();
    EXPORT static Enum::type UNPACK_SKIP_IMAGES();
    EXPORT static Enum::type UNPACK_SKIP_PIXELS();
    EXPORT static Enum::type UNPACK_SKIP_ROWS();
    EXPORT static Enum::type UNPACK_SWAP_BYTES();
    EXPORT static Enum::type UNSIGNALED();
    EXPORT static Enum::type UNSIGNED_BYTE();
    EXPORT static Enum::type UNSIGNED_BYTE_2_3_3_REV();
    EXPORT static Enum::type UNSIGNED_BYTE_3_3_2();
    EXPORT static Enum::type UNSIGNED_INT();
    EXPORT static Enum::type UNSIGNED_INT_10F_11F_11F_REV();
    EXPORT static Enum::type UNSIGNED_INT_10_10_10_2();
    EXPORT static Enum::type UNSIGNED_INT_24_8();
    EXPORT static Enum::type UNSIGNED_INT_2_10_10_10_REV();
    EXPORT static Enum::type UNSIGNED_INT_5_9_9_9_REV();
    EXPORT static Enum::type UNSIGNED_INT_8_8_8_8();
    EXPORT static Enum::type UNSIGNED_INT_8_8_8_8_REV();
    EXPORT static Enum::type UNSIGNED_INT_ATOMIC_COUNTER();
    EXPORT static Enum::type UNSIGNED_INT_IMAGE_1D();
    EXPORT static Enum::type UNSIGNED_INT_IMAGE_1D_ARRAY();
    EXPORT static Enum::type UNSIGNED_INT_IMAGE_2D();
    EXPORT static Enum::type UNSIGNED_INT_IMAGE_2D_ARRAY();
    EXPORT static Enum::type UNSIGNED_INT_IMAGE_2D_MULTISAMPLE();
    EXPORT static Enum::type UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY();
    EXPORT static Enum::type UNSIGNED_INT_IMAGE_2D_RECT();
    EXPORT static Enum::type UNSIGNED_INT_IMAGE_3D();
    EXPORT static Enum::type UNSIGNED_INT_IMAGE_BUFFER();
    EXPORT static Enum::type UNSIGNED_INT_IMAGE_CUBE();
    EXPORT static Enum::type UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY();
    EXPORT static Enum::type UNSIGNED_INT_SAMPLER_1D();
    EXPORT static Enum::type UNSIGNED_INT_SAMPLER_1D_ARRAY();
    EXPORT static Enum::type UNSIGNED_INT_SAMPLER_2D();
    EXPORT static Enum::type UNSIGNED_INT_SAMPLER_2D_ARRAY();
    EXPORT static Enum::type UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE();
    EXPORT static Enum::type UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY();
    EXPORT static Enum::type UNSIGNED_INT_SAMPLER_2D_RECT();
    EXPORT static Enum::type UNSIGNED_INT_SAMPLER_3D();
    EXPORT static Enum::type UNSIGNED_INT_SAMPLER_BUFFER();
    EXPORT static Enum::type UNSIGNED_INT_SAMPLER_CUBE();
    EXPORT static Enum::type UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY();
    EXPORT static Enum::type UNSIGNED_INT_VEC2();
    EXPORT static Enum::type UNSIGNED_INT_VEC3();
    EXPORT static Enum::type UNSIGNED_INT_VEC4();
    EXPORT static Enum::type UNSIGNED_NORMALIZED();
    EXPORT static Enum::type UNSIGNED_SHORT();
    EXPORT static Enum::type UNSIGNED_SHORT_1_5_5_5_REV();
    EXPORT static Enum::type UNSIGNED_SHORT_4_4_4_4();
    EXPORT static Enum::type UNSIGNED_SHORT_4_4_4_4_REV();
    EXPORT static Enum::type UNSIGNED_SHORT_5_5_5_1();
    EXPORT static Enum::type UNSIGNED_SHORT_5_6_5();
    EXPORT static Enum::type UNSIGNED_SHORT_5_6_5_REV();
    EXPORT static Enum::type UPPER_LEFT();
    EXPORT static Enum::type VALIDATE_STATUS();
    EXPORT static Enum::type VENDOR();
    EXPORT static Enum::type VERSION();
    EXPORT static Enum::type VERTEX_ARRAY();
    EXPORT static Enum::type VERTEX_ARRAY_BINDING();
    EXPORT static Enum::type VERTEX_ATTRIB_ARRAY_BARRIER_BIT();
    EXPORT static Enum::type VERTEX_ATTRIB_ARRAY_BUFFER_BINDING();
    EXPORT static Enum::type VERTEX_ATTRIB_ARRAY_DIVISOR();
    EXPORT static Enum::type VERTEX_ATTRIB_ARRAY_ENABLED();
    EXPORT static Enum::type VERTEX_ATTRIB_ARRAY_INTEGER();
    EXPORT static Enum::type VERTEX_ATTRIB_ARRAY_LONG();
    EXPORT static Enum::type VERTEX_ATTRIB_ARRAY_NORMALIZED();
    EXPORT static Enum::type VERTEX_ATTRIB_ARRAY_POINTER();
    EXPORT static Enum::type VERTEX_ATTRIB_ARRAY_SIZE();
    EXPORT static Enum::type VERTEX_ATTRIB_ARRAY_STRIDE();
    EXPORT static Enum::type VERTEX_ATTRIB_ARRAY_TYPE();
    EXPORT static Enum::type VERTEX_ATTRIB_BINDING();
    EXPORT static Enum::type VERTEX_ATTRIB_RELATIVE_OFFSET();
    EXPORT static Enum::type VERTEX_BINDING_BUFFER();
    EXPORT static Enum::type VERTEX_BINDING_DIVISOR();
    EXPORT static Enum::type VERTEX_BINDING_OFFSET();
    EXPORT static Enum::type VERTEX_BINDING_STRIDE();
    EXPORT static Enum::type VERTEX_PROGRAM_POINT_SIZE();
    EXPORT static Enum::type VERTEX_SHADER();
    EXPORT static Enum::type VERTEX_SHADER_BIT();
    EXPORT static Enum::type VERTEX_SHADER_INVOCATIONS();
    EXPORT static Enum::type VERTEX_SUBROUTINE();
    EXPORT static Enum::type VERTEX_SUBROUTINE_UNIFORM();
    EXPORT static Enum::type VERTEX_TEXTURE();
    EXPORT static Enum::type VERTICES_SUBMITTED();
    EXPORT static Enum::type VIEWPORT();
    EXPORT static Enum::type VIEWPORT_BOUNDS_RANGE();
    EXPORT static Enum::type VIEWPORT_INDEX_PROVOKING_VERTEX();
    EXPORT static Enum::type VIEWPORT_SUBPIXEL_BITS();
    EXPORT static Enum::type VIEW_CLASS_128_BITS();
    EXPORT static Enum::type VIEW_CLASS_16_BITS();
    EXPORT static Enum::type VIEW_CLASS_24_BITS();
    EXPORT static Enum::type VIEW_CLASS_32_BITS();
    EXPORT static Enum::type VIEW_CLASS_48_BITS();
    EXPORT static Enum::type VIEW_CLASS_64_BITS();
    EXPORT static Enum::type VIEW_CLASS_8_BITS();
    EXPORT static Enum::type VIEW_CLASS_96_BITS();
    EXPORT static Enum::type VIEW_CLASS_BPTC_FLOAT();
    EXPORT static Enum::type VIEW_CLASS_BPTC_UNORM();
    EXPORT static Enum::type VIEW_CLASS_RGTC1_RED();
    EXPORT static Enum::type VIEW_CLASS_RGTC2_RG();
    EXPORT static Enum::type VIEW_CLASS_S3TC_DXT1_RGB();
    EXPORT static Enum::type VIEW_CLASS_S3TC_DXT1_RGBA();
    EXPORT static Enum::type VIEW_CLASS_S3TC_DXT3_RGBA();
    EXPORT static Enum::type VIEW_CLASS_S3TC_DXT5_RGBA();
    EXPORT static Enum::type VIEW_COMPATIBILITY_CLASS();
    EXPORT static Enum::type WAIT_FAILED();
    EXPORT static Enum::type WRITE_ONLY();
    EXPORT static Enum::type XOR();
    EXPORT static Enum::type ZERO();
    EXPORT static Enum::type ZERO_TO_ONE();

    // EXPORT virtual void DebugMessageCallback(const GLDEBUGPROC& callback, const Data& userParam, const SrcLoc& src_loc = SrcLoc{}) = 0;
    // EXPORT virtual void GetUniformIndices(const Uint& program, const Sizei& uniformCount, const GLchar& *const* uniformNames, const UintArr& uniformIndices, const SrcLoc& src_loc = SrcLoc{}) = 0;
    // EXPORT virtual void TransformFeedbackVaryings(const Uint& program, const Sizei& count, const GLchar& *const* varyings, const Enum& bufferMode, const SrcLoc& src_loc = SrcLoc{}) = 0;
 
protected:   
    const std::function<void(const SrcLoc&)> _debug;

};

}; // namespace GL 

} // namespace glwpp